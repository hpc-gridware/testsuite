#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
#  Portions of this software are Copyright (c) 2023-2025 HPC-Gridware GmbH
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name
global check_category
global check_description
global check_needs
global check_functions
global check_root_access_needs

set check_root_access_needs "yes"

# define test's name and run level descriptions
set check_name            "arco_dbwriter_performance"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_description(0)  "Tests the performance of the dbwriter (short test) 5 minutes"
set check_description(200)  "Tests the performance of the dbwriter (long test) 1 hour"
set check_description(300)  "Tests the performance of the dbwriter (day test) 1 day"
set check_description(400)  "Tests the performance of the dbwriter (day test) 2 days"

# define test's dependencies
set check_needs           "init_core_system arco_database_install"

# setup and cleanup functions
set check_setup_function arco_dbwriter_performance_setup
set check_cleanup_function arco_dbwriter_performance_cleanup

# define test's procedure order
set check_functions ""
lappend check_functions "arco_dbwriter_performance_execute"

# -------- local test procedures: initialization------------------------------

proc arco_dbwriter_performance_setup  {} {
   global ts_config
   global sqlutil_id sqlutil_sp_id
   global arco_dbwriter_job_log_org_config
   global arco_dbwriter_performance_org_config
   global CHECK_USER

   set sqlutil_id ""

   if {[get_dbwriter_status 0] != 0} {
      if {[startup_dbwriter] != 0} {
         ts_log_severe "Can not start dbwriter"
         return -1
      }
   }

   ts_log_fine "Create sqlutil as $CHECK_USER"
   set sqlutil_id [sqlutil_create $CHECK_USER]
   if {$sqlutil_id == "-1"} {
      ts_log_severe "Can not create sqlutil"
      set sqlutil_id ""
      return -1
   }
   set sqlutil_sp_id [lindex $sqlutil_id 1]

   if {[sqlutil_connect $sqlutil_sp_id] != 0} {
      ts_log_severe "Can not connect to database"
      close_spawn_process $sqlutil_id;
      set sqlutil_id ""
      return -2
   }

   ts_log_fine "sqlutil created ($sqlutil_id)"

   # setup reporting params (enable job_log)
   if {[info exists arco_dbwriter_performance_org_config]} {
      unset arco_dbwriter_performance_org_config
   }

   # enable reporting
   get_config arco_dbwriter_performance_org_config
   set delimiter " "
   add_or_replace_array_param new_conf arco_dbwriter_performance_org_config reporting_params "reporting" "true" $delimiter
   # for now dbwriter uses the old reporting file format
   add_or_replace_array_param new_conf new_conf reporting_params "old_reporting" "true" $delimiter
   add_or_replace_array_param new_conf new_conf reporting_params "joblog" "true" $delimiter
   add_or_replace_array_param new_conf new_conf reporting_params "sharelog" "00:10:00" $delimiter
   set_config new_conf

   # setup some projects
   add_project "project0"
   add_project "project1"
   add_project "project2"

   ts_log_fine "projects created"
}

proc arco_dbwriter_performance_cleanup  {} {
   global ts_config
   global sqlutil_id sqlutil_sp_id
   global arco_dbwriter_performance_org_config

   # prevent new jobs from starting to speed up deletion
   disable_queue "all.q"
   delete_all_jobs 0
   # the running jobs might just have submitted new jobs ...
   sleep_for_seconds 5
   delete_all_jobs
   wait_for_end_of_all_jobs 120
   enable_queue "all.q"

   if {$sqlutil_id != ""} {
      close_spawn_process $sqlutil_id;
   }
   set sqlutil_id ""
   set sqlutil_sp_id ""

   reset_config arco_dbwriter_performance_org_config

   del_project "project0"
   del_project "project1"
   del_project "project2"

   if {[get_dbwriter_status 0] == 0} {
      if {[shutdown_dbwriter] != 0} {
         ts_log_severe "Can not stop dbwriter"
         return -1
      }
   }

   # clean data from arco database
   arco_clean_database

   unset -nocomplain sqlutil_id sqlutil_sp_id arco_dbwriter_performance_org_config
}



proc arco_dbwriter_performance_execute {} {
   global CHECK_USER CHECK_ACT_LEVEL
   global CHECK_FIRST_FOREIGN_SYSTEM_USER CHECK_SECOND_FOREIGN_SYSTEM_USER
   global ts_config check_description sqlutil_sp_id

   ts_log_fine $check_description($CHECK_ACT_LEVEL)


   set job_sleep_time 1

   switch -- $CHECK_ACT_LEVEL {
      "0" {
         set test_time [expr 5 * 60 * 1000]   ;# test time is five minutes
      }
      "200" {
         set test_time [expr 60 * 60 * 1000]   ;# test time is 1 hour
      }
      "300" {
         set test_time [expr 60 * 60 * 1000 * 24 ]   ;# test time is 1 day
      }
      "400" {
         set test_time [expr 60 * 60 * 1000 * 24 * 2 ]   ;# test time is 2 days
      }
      default {
         ts_log_severe "Invalid runlevel $CHECK_ACT_LEVEL"
         return -1
      }
   }

   # we want to have jobs running over the whole test time
   # assume 0.1s overhead - the cluster might then run empty near the end
   set job_count [expr int($test_time / 1000 / ($job_sleep_time + 0.1))]
   ts_log_fine "each miniworm will submit $job_count jobs"

   set job_script "$ts_config(testsuite_root_dir)/scripts/pminiworm.sh"
   set job_args "$job_script -e $job_script -s $job_sleep_time -m $job_count -- "

   set projects "project0 project1 project2"
   set users    "$CHECK_USER $CHECK_FIRST_FOREIGN_SYSTEM_USER $CHECK_SECOND_FOREIGN_SYSTEM_USER"

   qstat_g_c_plain_parse qstat_info

   # we want to fill all (most) cluster slots
   # in runlevel 0 (functional test) we limit the number of jobs per user and project to 10
   set jobs_per_project_user [expr int($qstat_info(all.q,avail) / [llength $projects] / [llength $users])]
   if {$CHECK_ACT_LEVEL == 0 && $jobs_per_project_user > 10} {
      set jobs_per_project_user 10
   }
   ts_log_fine "submitting $jobs_per_project_user jobs per user and project"

   # we want the jobs to start when we start measuring, submit them with disabled queues
   disable_queue "all.q"
   foreach project $projects {
      foreach user $users {
         for {set i 0} {$i < $jobs_per_project_user} {incr i} {
            set res [submit_job "$job_args -P $project" 1 60 $ts_config(master_host) $user]
            if {$res < 0} {
               ts_log_severe "submission of job failed"
               return -1
            }
         }
      }
   }
   enable_queue "all.q"
   trigger_scheduling

   set cycle_time [expr 60 * 1000]
   while {$test_time > 0} {
      set res [time "arco_dbwriter_performance_query $sqlutil_sp_id"]
      set needed_time [lindex $res 0]
      set needed_time [expr $needed_time / 1000]
      set sleep_time [expr $cycle_time - $needed_time]


      set seconds [expr $test_time / 1000]
      set minutes [expr $seconds / 60]
      set hours [expr $minutes / 60]
      set minutes [expr $minutes % 60]
      set seconds [expr $seconds % 60]
      ts_log_fine [format "Remaining time %02d:%02d:%02d" ${hours} ${minutes} ${seconds}]

      after $sleep_time
      set test_time [expr $test_time - $cycle_time]
   }

   return 0
}

proc arco_dbwriter_performance_query {sqlutil_sp_id} {
   global CHECK_DEBUG_LEVEL

   set sql "select num_value from view_statistic where time_end = (select max(time_end) from view_statistic where variable = 'lines_per_second')"

   set res [sqlutil_query $sqlutil_sp_id $sql rows columns 300]
   if { $res <= 0 } {
      ts_log_fine "Got no statistics from db"
   } else {
      ts_log_fine "Current dbwriter performance is [format "%.0f" $rows(0,0)] lines/second"
   }
}

