#___INFO__MARK_BEGIN_NEW__
###########################################################################
#
#  Copyright 2024-2025 HPC-Gridware GmbH
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
###########################################################################
#___INFO__MARK_END_NEW__


# define global variable in this namespace
global check_name
global check_category
global check_description
global check_needs
global check_functions
global check_root_access_needs
global check_need_running_system
global check_version_range

#set check_root_access_needs "yes"
set check_version_range "9.0.0"

# define test's name and run level descriptions
set check_name            "per_host_consumable"
set check_category        "AR CENTRY RQS SCHEDULER QQUOTA VERIFIED"
set check_description(0)  "test per host consumables on global layer"
set check_description(1)  "test per host consumables on exechost layer"
set check_description(2)  "test per host consumables on global layer granted to an AR"
set check_description(3)  "test per host consumables on exechost layer granted to an AR"
set check_description(4)  "test per host consumables on global layer limited by resource quota"
set check_description(5)  "test per host consumables on exechost layer limited by resource quota"

# define test's dependencies
set check_needs           "init_core_system"

# setup and cleanup functions
set check_setup_function per_host_consumable_setup
set check_setup_level_function per_host_consumable_setup_level
set check_cleanup_level_function per_host_consumable_cleanup_level
set check_cleanup_function per_host_consumable_cleanup

# define test's procedure order
set check_functions {}
lappend check_functions "per_host_consumable_int_sequential"
lappend check_functions "per_host_consumable_rsmap_sequential"
lappend check_functions "per_host_consumable_int_array"
lappend check_functions "per_host_consumable_rsmap_array"
lappend check_functions "per_host_consumable_int_parallel"
lappend check_functions "per_host_consumable_rsmap_parallel"

# -------- local test procedures: initialization------------------------------

proc per_host_consumable_setup {} {
   get_current_cluster_config_array ts_config
   global phc_complex_backup
   global host_config_backup

   # increase slots capacity
   foreach host $ts_config(execd_nodes) {
      get_exechost host_config_bkup $host
      set host_config_backup($host) $host_config_bkup(complex_values)

      set host_cfg(complex_values)  "slots=5000"
      set_exechost host_cfg $host
   }

   # backup complex
   get_complex phc_complex_backup

   # create test variables
   #           name       shortcut type  relop requestable consumable default urgency
   set complex(phc_int)   "phci    INT   <=    YES         HOST       0       0"
   set complex(phc_rsmap) "phcr    RSMAP <=    YES         HOST       0       0"
   set_complex complex

   # create a test pe and queue
   set pe(slots) "100"
   set pe(allocation_rule) "\$round_robin"
   set pe(job_is_first_task) "FALSE"
   add_pe "test.pe" pe

   set q(slots) "10"
   set q(pe_list) "test.pe"
   add_queue "test.q" "@allhosts" q

   disable_queue "all.q"
}

proc per_host_consumable_setup_level {} {
   get_current_cluster_config_array ts_config
   global CHECK_ACT_LEVEL
   global phc_host_backup phc_capacity_hosts phc_consumable_type phc_ar phc_is_rqs
   global host_config_backup

   # restore complex_values
   foreach host $ts_config(execd_nodes) {
      set host_cfg(complex_values) $host_config_backup($host)
      set_exechost host_cfg $host
   }

   switch $CHECK_ACT_LEVEL {
      0 {
         # set up consumables on global layer
         set phc_capacity_hosts "global"
         set phc_consumable_type "gc"
         set complex_values "phc_int=4,phc_rsmap=4(A B A B)"
         set test_hosts [host_conf_get_suited_hosts 2]
      }
      2 -
      4 {
         # set up consumables on global layer, but we limit job execution by AR / RQS
         set phc_capacity_hosts "global"
         set phc_consumable_type "gc"
         set complex_values "phc_int=5,phc_rsmap=5(A B A B C)"
         set test_hosts [host_conf_get_suited_hosts 2]
      }
      1 {
         # set up consumables on exechost layer
         set phc_capacity_hosts [host_conf_get_suited_hosts 2]
         set test_hosts $phc_capacity_hosts
         set phc_consumable_type "hc"
         set complex_values "phc_int=2,phc_rsmap=2(A B)"
      }
      3 -
      5 {
         # set up consumables on exechost layer, but we limit job execution by AR / RQS
         set phc_capacity_hosts [host_conf_get_suited_hosts 2]
         set test_hosts $phc_capacity_hosts
         set phc_consumable_type "hc"
         set complex_values "phc_int=3,phc_rsmap=3(A B C)"
      }
   }

   # backup exec host(s) and set new values
   foreach host $phc_capacity_hosts {
      unset -nocomplain eh
      get_exechost eh $host
      set phc_host_backup($host) $eh(complex_values)

      add_to_config_attribute eh new_eh "complex_values" $complex_values
      set_exechost new_eh $host
   }

   set queues {}
   # disable the whole test.q, we will then enable just the 2 qinstances we want to test on
   disable_queue "test.q"
   foreach host $test_hosts {
      set queue "test.q@$host"
      lappend queues $queue
      enable_queue $queue
   }

   # AR runlevels
   set phc_ar 0
   if {$CHECK_ACT_LEVEL == 2 || $CHECK_ACT_LEVEL == 3} {
      # submit an AR which grabs all slots, all of phc_int and all of phc_rsmap
      set queue_request [join $queues ","]
      set phc_ar [submit_ar "-d 36000 -pe test.pe 10 -l phc_int=2 -l phc_rsmap=2 -q $queue_request"]
   }

   # RQS runlevels
   set phc_is_rqs 0
   if {$CHECK_ACT_LEVEL == 4 || $CHECK_ACT_LEVEL == 5} {
      # create a RQS limiting to 2 of each per host
      set rules {}
      lappend rules "hosts {*} to phc_int=2,phc_rsmap=2"
      set rqs(test.rqs,limit) $rules
      set rqs(test.rqs,enabled) "true"
      add_rqs rqs
      set phc_is_rqs 1
   }
}

proc per_host_consumable_cleanup_level {} {
   get_current_cluster_config_array ts_config
   global CHECK_ACT_LEVEL
   global phc_host_backup phc_capacity_hosts phc_consumable_type phc_ar phc_is_rqs

   # restore exec host(s)
   foreach host $phc_capacity_hosts {
      unset -nocomplain eh
      set eh(complex_values) $phc_host_backup($host)
      set_exechost eh $host
   }

   # delete AR, if we have one
   if {$phc_ar != 0} {
      delete_ar $phc_ar
   }

   # delete RQS, if we have one
   if {$phc_is_rqs} {
      del_rqs "test.rqs"
   }
}

proc per_host_consumable_cleanup {} {
   get_current_cluster_config_array ts_config
   global phc_complex_backup
   global phc_host_backup phc_capacity_hosts phc_consumable_type phc_ar phc_is_rqs

   delete_all_jobs
   wait_for_end_of_all_jobs

   del_queue "test.q" "" 1 1
   del_pe "test.pe"

   enable_queue "all.q"

   # restore complex
   reset_complex phc_complex_backup

   unset -nocomplain phc_complex_backup phc_host_backup phc_capacity_hosts phc_ar phc_is_rqs
}

proc per_host_consumable_check_remaining {type name expected_remaining} {
   global phc_ar phc_is_rqs

   if {$phc_ar == 0 && $phc_is_rqs == 0} {
      # it is the capacity configuration which limits job execution
      qstat_F_plain_parse qstat_info $name
      set remaining 0
      foreach attrib [array names qstat_info "test.q@*,$type:$name"] {
         incr remaining $qstat_info($attrib)
         if {$type == "gc"} {
            # count global value only once
            break
         }
      }

      if {$remaining != $expected_remaining} {
         ts_log_severe "expected $expected_remaining remaining of $name but got $remaining"
      }
   } else {
      # in runlevel 2 and 3 with resources being held by an AR we cannot do the check above,
      # as the AR holds *all* resources
      # instead, we'll have to look into the resource diagram of the AR, this will be available once
      # CS-364 add a way to print the resource diagram
      # has been done
      #
      # in runlevel 4 and 5 we have a RQS limiting job execution, need to use qquota
      if {$phc_is_rqs} {
         ts_log_fine [start_sge_bin "qquota" "-l $name"]
         # @todo we could parse the output here, but lets assume for now that if the number of running
         #       jobs is OK, the RQS are OK as well - this is not a RQS test
         # output would be e.g.
         #    test.rqs/1         phc_int=1/2          hosts ubuntu-22-amd64-2
         # or
         #    test.rqs/1         phc_int=2/2          hosts ubuntu-22-amd64-2
         #    test.rqs/1         phc_int=2/2          hosts ubuntu-22-amd64-1
      }
   }
}

proc per_host_consumable_check_running_job_count {num_expected} {
   set output [start_sge_bin "qstat" "-s r -u '*'"]
   set lines [split [string trim $output] "\n"]
   set num [llength $lines]
   if {$num > 2} {
      # if there was some output there are 2 header lines
      incr num -2
   }
   if {$num != $num_expected} {
      set output [start_sge_bin "qstat" "-f"]
      ts_log_severe "$num_expected jobs should be running but got $num:\n$output"
   }
}

proc per_host_consumable_int_sequential {} {
   get_current_cluster_config_array ts_config
   global phc_consumable_type phc_ar

   # submit a job requesting one of phc_int, expect 3 to be left
   set job_opts "-o /dev/null -e /dev/null -b y -l phc_int=1"
   if {$phc_ar != 0} {
      append job_opts " -ar $phc_ar"
   }
   set job_args "sleep 300"
   set job_id [submit_job "$job_opts $job_args"]
   wait_for_jobstart $job_id "" 10
   per_host_consumable_check_remaining $phc_consumable_type "phc_int" 3

   # submit further jobs
   for {set i 0} {$i < 5} {incr i} {
      set last_job_id [submit_job "$job_opts $job_args"]
   }
   # expect last one to stay pending
   if {[wait_for_jobstart $last_job_id "" 10 0 0] == 0} {
      ts_log_severe "job $last_job_id shouldn't be running"
   }
   # expect 4 to be running in total
   set num_running [per_host_consumable_check_running_job_count 4]
   # expect remaining capacity being 0
   per_host_consumable_check_remaining $phc_consumable_type "phc_int" 0

   # cleanup
   delete_all_jobs
   wait_for_end_of_all_jobs
}

proc per_host_consumable_rsmap_sequential {} {
   get_current_cluster_config_array ts_config
   global phc_consumable_type phc_ar

   # submit a job requesting two of phc_rsmap, expect 3 to be left
   set job_opts "-o /dev/null -e /dev/null -b y -l phc_rsmap=2"
   if {$phc_ar != 0} {
      append job_opts " -ar $phc_ar"
   }
   set job_args "sleep 300"
   set job_id [submit_job "$job_opts $job_args"]
   wait_for_jobstart $job_id "" 10
   per_host_consumable_check_remaining $phc_consumable_type "phc_rsmap" 2

   # submit further jobs
   for {set i 0} {$i < 5} {incr i} {
      set last_job_id [submit_job "$job_opts $job_args"]
   }
   # expect last one to stay pending
   if {[wait_for_jobstart $last_job_id "" 10 0 0] == 0} {
      ts_log_severe "job $last_job_id shouldn't be running"
   }
   # expect 2 to be running in total
   set num_running [per_host_consumable_check_running_job_count 2]
   # expect remaining capacity being 0
   per_host_consumable_check_remaining $phc_consumable_type "phc_rsmap" 0

   # cleanup
   delete_all_jobs
   wait_for_end_of_all_jobs
}

proc per_host_consumable_int_array {} {
   get_current_cluster_config_array ts_config
   global phc_consumable_type phc_ar

   # submit an array job requesting one of phc_int each
   set job_opts "-o /dev/null -e /dev/null -b y -t 1-10 -l phc_int=1"
   if {$phc_ar != 0} {
      append job_opts " -ar $phc_ar"
   }
   set job_args "sleep 300"
   set job_id [submit_job "$job_opts $job_args"]
   wait_for_jobstart $job_id "" 10

   # expect 4 to be running in total
   set num_running [per_host_consumable_check_running_job_count 4]
   # expect remaining capacity being 0
   per_host_consumable_check_remaining $phc_consumable_type "phc_int" 0

   # cleanup
   delete_all_jobs
   wait_for_end_of_all_jobs
}

proc per_host_consumable_rsmap_array {} {
   get_current_cluster_config_array ts_config
   global phc_consumable_type phc_ar

   # submit an array job requesting two of phc_rsmap each
   set job_opts "-o /dev/null -e /dev/null -b y -t 1-10 -l phc_rsmap=2"
   if {$phc_ar != 0} {
      append job_opts " -ar $phc_ar"
   }
   set job_args "sleep 300"
   set job_id [submit_job "$job_opts $job_args"]
   wait_for_jobstart $job_id "" 10

   # expect w to be running in total
   set num_running [per_host_consumable_check_running_job_count 2]
   # expect remaining capacity being 0
   per_host_consumable_check_remaining $phc_consumable_type "phc_rsmap" 0

   # cleanup
   delete_all_jobs
   wait_for_end_of_all_jobs
}

proc per_host_consumable_int_parallel {} {
   get_current_cluster_config_array ts_config
   global phc_consumable_type phc_ar

   # submit a parallel job requesting one of phc_int (per host)
   set job_opts "-o /dev/null -e /dev/null -b y -l phc_int=1 -pe test.pe 8"
   if {$phc_ar != 0} {
      append job_opts " -ar $phc_ar"
   }
   set job_args "sleep 300"
   set job_id [submit_job "$job_opts $job_args"]
   wait_for_jobstart $job_id "" 10

   # expect the job to be running in 2 chunks
   set num_running [per_host_consumable_check_running_job_count 1]
   # expect remaining capacity being 3|2:4 (1 consumed globally or 1 per host)
   if {$phc_consumable_type == "gc"} {
      per_host_consumable_check_remaining $phc_consumable_type "phc_int" 3
   } else {
      per_host_consumable_check_remaining $phc_consumable_type "phc_int" 2
   }

   # cleanup
   delete_all_jobs
   wait_for_end_of_all_jobs
}

proc per_host_consumable_rsmap_parallel {} {
   get_current_cluster_config_array ts_config
   global phc_consumable_type phc_ar

   # submit a parallel job requesting two of phc_rsmap (per host)
   set job_opts "-o /dev/null -e /dev/null -b y -l phc_rsmap=2 -pe test.pe 8"
   if {$phc_ar != 0} {
      append job_opts " -ar $phc_ar"
   }
   set job_args "sleep 300"
   set job_id [submit_job "$job_opts $job_args"]
   wait_for_jobstart $job_id "" 10

   # expect the job to be running in 2 chunks
   set num_running [per_host_consumable_check_running_job_count 1]
   # expect remaining capacity being 2|0:4 (consumed globally or 2 per host = 4)
   if {$phc_consumable_type == "gc"} {
      per_host_consumable_check_remaining $phc_consumable_type "phc_rsmap" 2
   } else {
      per_host_consumable_check_remaining $phc_consumable_type "phc_rsmap" 0
   }

   # cleanup
   delete_all_jobs
   wait_for_end_of_all_jobs
}

