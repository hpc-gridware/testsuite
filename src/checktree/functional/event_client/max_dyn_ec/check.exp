#___INFO__MARK_BEGIN_NEW__
###########################################################################
#
#  The contents of this file are made available subject to the terms of the
#  Apache Software License 2.0 ('The License').
#  You may not use this file except in compliance with The License.
#  You may obtain a copy of The License at
#  http://www.apache.org/licenses/LICENSE-2.0.html
#
#  Copyright (c) 2011 Univa Corporation.
#
#  Portions of this software are Copyright (c) 2023-2025 HPC-Gridware GmbH
#
###########################################################################
#___INFO__MARK_END_NEW__

# define global variable in this namespace
global check_name
global check_category
global check_description
global check_needs
global check_functions
global check_root_access_needs
global check_need_running_system

# define test's name and run level descriptions
set check_name            "max_dyn_ec"
set check_category        "COMPATIBILITY SYSTEM EVENTCLIENT JOB_SYNC VERIFIED"
set check_description(0)  "test setting of the maximum number of dynamic event clients"
set check_description(1)  "test a high number of event clients (qsub -sync y) with simulated hosts"

# define test's dependencies
set check_needs           "init_core_system"
set check_root_access_needs "yes"

# setup and cleanup functions
set check_setup_function max_dyn_ec_setup
set check_setup_level_function max_dyn_ec_setup_level
set check_cleanup_level_function max_dyn_ec_cleanup_level
set check_cleanup_function max_dyn_ec_cleanup

# define test's procedure order
set check_functions {}
lappend check_functions "max_dyn_ec_default" ;# shall be first check_function
lappend check_functions "max_dyn_ec_massive_qsub_sync"
lappend check_functions "max_dyn_ec_out_of_ids"

# -------- local test procedures: initialization------------------------------

proc max_dyn_ec_setup {} {
   global ts_config
   global max_dyn_ec_backup
   global max_dyn_ec_clients

   # default value
   set max_dyn_ec_clients 1000

   # we want to modify the global config - make a backup
   get_config max_dyn_ec_backup
}

proc max_dyn_ec_setup_level {} {
   global ts_config
   global CHECK_ACT_LEVEL
   global max_dyn_ec_simhosts max_dyn_ec_jobs_per_host

   # set the number of jobs per host
   if {$CHECK_ACT_LEVEL == 0} {
      # we have 40 slots per hosts, so we can start 40 jobs per host simultaneously
      # multiple consecutive job starts on a host might cause this test to hit timeouts
      # if you want to increase the number of jobs per host, you might need to increase
      # the number of hosts, the number of slots per host or the timeouts values!
      set max_dyn_ec_jobs_per_host 40
   } else {
      # we use simulated hosts, so we do not have load on the hosts from job execution
      # and can start more submit clients
      set max_dyn_ec_jobs_per_host 100

      # initialize the use of simulated hosts
      if {![simhost_init]} {
         # ts_log_config has been done in simhost_init
         return 99
      }

      # add hosts and add them to host group and queue
      set max_dyn_ec_simhosts [simhost_add 100 "@simhosts"]
      set q(slots) 10
      add_queue "sim.q" "@simhosts" q

      disable_queue "all.q"

      shutdown_and_restart_qmaster
   }
}

proc max_dyn_ec_cleanup_level {} {
   global ts_config
   global CHECK_ACT_LEVEL
   global max_dyn_ec_simhosts

   if {$CHECK_ACT_LEVEL == 1} {
      del_queue "sim.q" "" 1 1
      enable_queue "all.q"

      del_hostgroup "@simhosts"
      simhost_delete $max_dyn_ec_simhosts
   }
}

proc max_dyn_ec_cleanup {} {
   global ts_config
   global max_dyn_ec_backup
   global max_dyn_ec_clients max_dyn_ec_jobs_per_host max_dyn_ec_simhosts

   # cleanup jobs
   delete_all_jobs
   wait_for_end_of_all_jobs

   # standard reset config
   reset_config max_dyn_ec_backup

   # unset our test's global variables
   unset -nocomplain max_dyn_ec_backup max_dyn_ec_clients max_dyn_ec_jobs_per_host max_dyn_ec_simhosts
}

#****** max_dyn_ec/max_dyn_ec_default() *************************************************
#  NAME
#     max_dyn_ec_default() -- check default at qmaster startup
#
#  SYNOPSIS
#     max_dyn_ec_default {}
#
#  FUNCTION
#     Make sure the correct default value is active for MAX_DYN_EC at qmaster startup
#*******************************************************************************
proc max_dyn_ec_default {} {
   global ts_config CHECK_USER
   global max_dyn_ec_clients

   set expected_message [translate_macro MSG_SET_MAXDYNEVENTCLIENT_U "*"]
   set exceeds_message [translate_macro MSG_CONF_NR_DYNAMIC_EVENT_CLIENT_EXCEEDS_MAX_FILEDESCR_U "*"]

   shutdown_qmaster $ts_config(master_host) [get_qmaster_spool_dir]
   init_logfile_wait $ts_config(master_host) [get_qmaster_messages_file]
   startup_qmaster

   set messages [logfile_wait $expected_message]
   # if we got the expected message then check for the actual maximal number of event clients
   # it should be 1000 unless the file descriptor limit enforces a lower value
   if {$logfile_wait_error == 0} {
      set exceeded 0
      foreach msg [split $messages "\n"] {
         if {[string match "*$exceeds_message*" $msg]} {
            ts_log_fine "master host file descriptor limit restricts the number of event clients"
            set exceeded 1
         }
         if {[string match "*$expected_message*" $msg]} {
            set max_dyn [lindex $msg 9]
            ts_log_fine "dynamic event client limit is set to $max_dyn"
            if {$exceeded} {
               set max_dyn_ec_clients $max_dyn
                 set msg "master host file descriptor limit allows only $max_dyn dynamic event clients"
                 append msg "\ntry increasing it, on Linux edit /etc/security/limits.conf and add e.g. the lines"
                 append msg "\n*                -       nofile          8192"
                 append msg "\nroot             -       nofile          8192"
                 ts_log_config $msg
            } else {
               if {$max_dyn != $max_dyn_ec_clients} {
                  ts_log_severe "invalid max dynamic event clients: expected $max_dyn_ec_clients, got $max_dyn"
                  set max_dyn_ec_clients $max_dyn
               }
            }
         }
      }
   }

   wait_for_load_from_all_queues 60
}

#****** max_dyn_ec/max_dyn_ec_massive_qsub_sync() *************************************************
#  NAME
#     max_dyn_ec_massive_qsub_sync() -- test high number of event clients (qsub -sync y)
#
#  SYNOPSIS
#     max_dyn_ec_massive_qsub_sync {}
#
#  FUNCTION
#     Submits a high number of qsub -sync y jobs.
#     Will report unexpected output (e.g. error messages from qsub) as error.
#     TODO: check qmaster messages file
#*******************************************************************************
proc max_dyn_ec_massive_qsub_sync {} {
   global ts_config CHECK_USER
   global max_dyn_ec_clients max_dyn_ec_jobs_per_host

   ts_log_fine "starting max_dyn_ec_massive_qsub_sync at [clock format [clock seconds]]"

   # set high number of event clients
   get_config conf_backup
   set conf(qmaster_params) [add_or_replace_param $conf_backup(qmaster_params) "MAX_DYN_EC" "MAX_DYN_EC=2000"]
   set_config conf

   # maximum number of qsub -sync y to start
   set max_jobs $max_dyn_ec_clients

   # on every host call scripts/qsub_sync.sh to submit a bunch of qsub -sync jobs
   set hosts $ts_config(execd_nodes)
   set num_hosts [llength $hosts]

   # compute job numbers
   set max_jobs [min $max_jobs [expr $num_hosts * $max_dyn_ec_jobs_per_host]]
   set jobs_per_host [expr $max_jobs / $num_hosts]
   set num_jobs [expr $jobs_per_host * $num_hosts]

   # starting the submitter scripts might take some time, possibly we need to open the ssh connections one after another
   # pass a start time to the submit scripts to start submitting at the same time
   # to put maximum load on sge_qmaster / the event master thread
   # delay by 10 seconds + 1 second per host
   set delay [expr [clock seconds] + 10 + $num_hosts * 1]

   ts_log_fine "starting $num_jobs jobs on $num_hosts hosts"

   set id_list {}
   set spawn_list {}
   set submit_script "$ts_config(testsuite_root_dir)/scripts/qsub_sync.sh"
   foreach host $hosts {
      # to reproduce CS-666 set a high job runtime
      # it also makes sure that all event clients are registered at the same time
      # and event master has to cope with all of them
      set id [open_remote_spawn_process $host $CHECK_USER $submit_script "$jobs_per_host 120 $delay"]
      lappend id_list $id
      set spawn_id [lindex $id 1]
      lappend spawn_list $spawn_id
      set spawn_map($spawn_id) $host
   }

   set submitted 0
   set finished 0
   set unexpected_output ""
   set timeout 60
   set final_timeout [expr [clock seconds] + 15 * 60]
   # log_user 1
   expect_user {
      -i $spawn_list full_buffer {
         ts_log_severe "expect full_buffer error"
      }
      -i $spawn_list timeout {
         if {[clock seconds] > $final_timeout} {
            ts_log_severe "timeout"
         } else {
            ts_log_fine "submitted: $submitted, finished: $finished"
            exp_continue
         }
      }
      -i $spawn_list eof {
         ts_log_severe "got eof"
      }
      -i $spawn_list  "?*\n" {
         set spawn_id $expect_out(spawn_id)
         set host $spawn_map($spawn_id)
         foreach line [split $expect_out(0,string) "\n"] {
            set line [string trim $line]
            if {$line != ""} {
               switch -glob -- $line {
                  "Your job * has been submitted" {
                     ts_log_finer "$host: job submitted"
                     incr submitted
                  }
                  "Job * exited with exit code *." {
                     ts_log_finer "$host: job finished"
                     incr finished
                  }
                  "qsub_sync.sh exiting" {
                     ts_log_finer "$host: submit script done"
                     set pos [lsearch -exact $spawn_list $spawn_id]
                     if {$pos >= 0} {
                        set spawn_list [lreplace $spawn_list $pos $pos]
                     }
                  }
                  "*_qsub_sync.sh_*_*.sh" -
                  "*_start_mark_:(0)*" -
                  "script done. (_END_OF_FILE_)" -
                  "_exit_status_:(*)" {
                     # ignore
                  }
                  default {
                     ts_log_fine "$host: max_dyn_ec_massive_qsub_sync: unexpected output: $line"
                     append unexpected_output "\n$host: $line"
                     # In error situations we see multiple messages in a line:
                     # The qmaster has become unreachable.  Attempting to reconnect.Reconnected to qmaster.Job 1738 exited with exit code 0.
                     # Try to recognize and count the exited message.
                     if {[string match "*Job * exited with exit code *." $line]} {
                        incr finished
                     }
                  }
               }
            }
         }
         ts_log_fine "submitted: $submitted, finished: $finished"
         if {[llength $spawn_list] > 0 || $submitted > $finished} {
            exp_continue
         }
      }
   }

   foreach id $id_list {
      close_spawn_process $id
   }

   # some additional checks ...
   ts_log_fine "submitted $submitted jobs, $finished jobs finished"
   if {$submitted != $finished} {
      ts_log_severe "submitted $submitted jobs, but $finished jobs finished"
   }
   if {$unexpected_output != ""} {
      ts_log_severe "running qsub -sync y jobs produced unexpected output:$unexpected_output"
   }

   set_config conf_backup
}

proc max_dyn_ec_out_of_ids {} {
   global ts_config CHECK_USER CHECK_ACT_LEVEL

   # need to run this check only once
   if {$CHECK_ACT_LEVEL > 0} {
      return
   }

   # this message gets written when qsub -sync y succeeded
   set msg_exited_0 [translate_macro MSG_QSUB_JOBEXITED_SI "*" "0"]

   # dynamic event clients disabled
   ts_log_fine "testing MAX_DYN_EC=0"
   get_config conf_backup
   set conf(qmaster_params) [add_or_replace_param $conf_backup(qmaster_params) "MAX_DYN_EC" "MAX_DYN_EC=0"]
   set_config conf

   set msg_out_of_ids [translate_macro MSG_TO_MANY_DYNAMIC_EC_U 0]

   set qsub_options "-o /dev/null -j y -sync y -b y sleep 1"
   set output [start_sge_bin "qsub" $qsub_options]
   ts_log_fine $output
   if {[string first $msg_out_of_ids $output] < 0} {
      ts_log_severe "expected qsub to be rejected with message\n$msg_out_of_ids\nbut got\n$output"
   }

   # 1 dynamic event client allowed
   ts_log_fine "testing MAX_DYN_EC=1"
   set conf(qmaster_params) [add_or_replace_param $conf_backup(qmaster_params) "MAX_DYN_EC" "MAX_DYN_EC=1"]
   set_config conf
   set msg_out_of_ids [translate_macro MSG_TO_MANY_DYNAMIC_EC_U 1]
   # positive test: start one event client
   set output [start_sge_bin "qsub" $qsub_options]
   ts_log_fine $output
   if {![string match "*$msg_exited_0*" $output]} {
      ts_log_severe "a single qsub -sync y job should have run through, but qsub output\n$output"
   }
   # wait a moment for qsub to be deregistered as event client
   after 2000
   # negative test: try to start 2 event clients, 2nd one must fail
   ts_log_fine "trying to start 2 jobs"
   set submit_script "$ts_config(testsuite_root_dir)/scripts/qsub_sync.sh"
   set id [open_remote_spawn_process $ts_config(master_host) $CHECK_USER $submit_script "2 1"]
   set spawn_id [lindex $id 1]

   set submitted 0
   set finished 0
   set rejected 0
   set unexpected_output ""
   set done 0
   set timeout 60
   log_user 1
   expect_user {
      -i $spawn_id full_buffer {
         ts_log_severe "expect full_buffer error"
      }
      -i $spawn_id timeout {
         ts_log_severe "timeout"
      }
      -i $spawn_id eof {
         ts_log_severe "got eof"
      }
      -i $spawn_id  "?*\n" {
         foreach line [split $expect_out(0,string) "\n"] {
            set line [string trim $line]
            if {$line != ""} {
               # ts_log_fine "==> $line"
               switch -glob -- $line {
                  "Your job * has been submitted" {
                     incr submitted
                  }
                  "Job * exited with exit code *." {
                     incr finished
                  }
                  "*cannot register event client. Only 1 event clients are allowed in the system" {
                     # workaround for CS-1060
                     if {[string first "Unable to initialize environment" $line] >= 0} {
                        incr rejected
                     }
                  }
                  "qsub_sync.sh exiting" {
                     set done 1
                  }
                  "*_qsub_sync.sh_*_*.sh" -
                  "*_start_mark_:(0)" -
                  "script done. (_END_OF_FILE_)" -
                  "_exit_status_:(*)" -
                  "Unable to initialize environment*" -
                  "Exiting." {
                     # ignore
                  }
                  default {
                     ts_log_fine "max_dyn_ec_massive_qsub_sync: unexpected output: $line"
                     append unexpected_output "\n$line"
                  }
               }
            }
         }
         if {!$done} {
            exp_continue
         }
      }
   }

   close_spawn_process $id

   set error ""
   if {$submitted != 1} {
      append error "$submitted job(s) got submitted, but expected 1\n"
   }
   if {$finished != 1} {
      append error "$finished job(s) finished, but expected 1\n"
   }
   if {$rejected != 1} {
      append error "$rejected job(s) got rejected, but expected 1\n"
   }
   if {$unexpected_output != ""} {
      append error "running the test produced unexpected output:\n"
      append error $unexpected_output
   }

   if {$error != ""} {
      ts_log_severe $error
   }

   # restore config
   set_config conf_backup
}
