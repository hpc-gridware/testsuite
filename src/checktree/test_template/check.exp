#___INFO__MARK_BEGIN_NEW__
###########################################################################
#
#  Copyright 2024-2025 HPC-Gridware GmbH
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
###########################################################################
#___INFO__MARK_END_NEW__

# Template for testsuite check
#
# 1) replace the following symbols by your test specific names
#    o __TESTSUITE_TEST_NAME   name of your test (e.g. consumable_test, or cs_123 for an issue test)
#      (vi: :%s/__TESTSUITE_TEST_NAME/new_name/g)
#
# 2) set check_root_access_needs to "yes" or "no" (if you need root access)
#
# 3) optionally set the check_version_range
#    It defines in which versions a test shall run.
#    Usually it defines in which version a certain feature has been added or a fix has been done:
#       set check_version_range "9.0.0
#    It can also specify from which version on a test shall no longer be run
#    (e.g. as a deprecated feature got removed):
#       set check_version_range {"" "10.0.0"}
#    Or combinations of both:
#       set check_version_range {"9.0.0" "10.0.0"}
#    It can also be set per run level, e.g. from the qacct test
#       set check_description(0)  "test qacct functionality (old colon separated format)"
#       set check_description(1)  "test qacct functionality (JSON format)"
#       set check_version_range(1) "9.0.0"
#
# 4) set check_category
#     - it is a list of categories, e.g.
#        - <FEATURE> like CENTRY, EVENTCLIENT, INSTALL, RSMAP for all tests testing a certain feature
#        - MODULE for module tests
#        - PERFORMANCE for performance tests
#        - <client> like QCONF for all tests verifying the qconf commandline client
#        - VERIFIED for all tests which are known to be OK and which shall be run by default
#     - feel free to create new categories
#     - example: "OBJECT CENTRY QCONF VERIFIED"
#
# 5) set check_needs (e.g.: "init_core_system" this means that this test is not
#    started without successful run of "init_core_system" test
#
# 6) you can add any function name to check_functions (all function (no parameters allowed) are started
#    within each runlevel number
#    PLEASE use ts_log_severe() to submit errors
#    ts_log_severe() is used in many testsuite standard functions, so not every
#    function call must check the return state.
#
# 7) set check_need_running_system != "yes" if you shutdown the qmaster in the setup(level)
#    procedures. This will skip the qmaster alive test before starting test procedures.


# define global variable in this namespace
global check_name
global check_category
global check_description
global check_needs
global check_functions
global check_root_access_needs
global check_need_running_system
global check_version_range

#set check_root_access_needs "yes"
#set check_need_running_system "no"
#set check_version_range "9.0.0"
#set check_version_range {"9.0.0" "10.0.0"}

# define test's name and run level descriptions
set check_name            "__TESTSUITE_TEST_NAME"
set check_category        "OBJECT CENTRY QCONF VERIFIED"
set check_description(0)  "Test template for testsuite check"
set check_description(1)  "Test template for testsuite check"

# define test's dependencies
set check_needs           "init_core_system"

# setup and cleanup functions
set check_setup_function __TESTSUITE_TEST_NAME_setup
set check_setup_level_function __TESTSUITE_TEST_NAME_setup_level
set check_cleanup_level_function __TESTSUITE_TEST_NAME_cleanup_level
set check_cleanup_function __TESTSUITE_TEST_NAME_cleanup

# define test's procedure order
set check_functions {}
lappend check_functions "__TESTSUITE_TEST_NAME_test"

# -------- local test procedures: initialization------------------------------

proc __TESTSUITE_TEST_NAME_setup {} {
   get_current_cluster_config_array ts_config
   global __TESTSUITE_TEST_NAME_hosts __TESTSUITE_TEST_NAME_backup

   # let's assume we need 2 test hosts
   set __TESTSUITE_TEST_NAME_hosts [host_conf_get_suited_hosts 2]

   # we want to modify the global config - make a backup
   get_config __TESTSUITE_TEST_NAME_backup
}

proc __TESTSUITE_TEST_NAME_setup_level {} {
}

proc __TESTSUITE_TEST_NAME_cleanup_level {} {
}

proc __TESTSUITE_TEST_NAME_cleanup {} {
   get_current_cluster_config_array ts_config
   global __TESTSUITE_TEST_NAME_hosts __TESTSUITE_TEST_NAME_backup

   delete_all_jobs
   wait_for_end_of_all_jobs

   # restore config if there were execd config modifications
   # reset_config_and_propagate __TESTSUITE_TEST_NAME_backup

   # standard reset config
   reset_config __TESTSUITE_TEST_NAME_backup

   unset -nocomplain __TESTSUITE_TEST_NAME_hosts __TESTSUITE_TEST_NAME_backup
}


proc __TESTSUITE_TEST_NAME_test {} {
   get_current_cluster_config_array ts_config
   global __TESTSUITE_TEST_NAME_hosts

}
