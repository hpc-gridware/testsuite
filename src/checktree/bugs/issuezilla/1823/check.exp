#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
#  Portions of this software are Copyright (c) 2023-2025 HPC-Gridware GmbH
#
##########################################################################
#___INFO__MARK_END__


# define global variable in this namespace
global check_name
global check_category
global check_description
global check_needs
global check_functions
global check_root_access_needs

set check_root_access_needs "yes"

# define test's name and run level descriptions
set check_name            "issue_1823"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_description(0)    "This test checks the sens of error message which is printed out, "
append check_description(0) "if rc-scripts are started by the wrong user"


# define test's dependencies
set check_needs           "init_core_system"

# define test's procedure order
set check_functions ""
lappend check_functions "LSB_lockfile_test"


global LSB_lockfile_test_test_hosts
global LSB_lockfile_test_saved_slot_count

# -------- local test procedures: initialization------------------------------

proc LSB_lockfile_test {} {
   global LSB_lockfile_test_test_hosts check_description
   global ts_config CHECK_ACT_LEVEL CHECK_USER

   set prod_type_var "SGE_ROOT"
   set my_timeout 500
   set exit_val 0
   set found_linux 0

   foreach exec_host $ts_config(execd_nodes) {
      set test_arch [resolve_arch $exec_host]

      ts_log_fine "testing host $exec_host ..."

      switch -glob -- $test_arch {
         "lx-*" -
         "ulx-*" {
                if {[is_remote_path $exec_host $CHECK_USER "/var/lock/subsys"]} {
                   set execd_found [is_daemon_running $exec_host "sge_execd" 1]
                   if {$execd_found == 0} {
                      continue
                   }
                   set found_linux 1
                   ts_log_fine "try to stop sge_execd as user $CHECK_USER ..."
                   set output [start_remote_prog $exec_host $CHECK_USER "$ts_config(product_root)/$ts_config(cell)/common/sgeexecd" "stop" "exit_val" $my_timeout]
                   if {$exit_val != 1} {
                      ts_log_severe "failed - rc-script tries to shutdown daemons, without having permissions on host $exec_host"
                      return
                   }
                   ts_log_fine $output
                   ts_log_fine "ok"
                   ts_log_fine "checking /var/lock/subsys/sgeexecd file ..."
                   set output [start_remote_prog $exec_host $CHECK_USER "ls" "-la /var/lock/subsys | grep sgeexecd" "exit_val" $my_timeout ]
                   if {$exit_val != 0} {
                      ts_log_severe "failed - /var/lock/subsys/sgeexecd has been deleted by $CHECK_USER on host $exec_host, not allowed!"
                      return
                   }
                   ts_log_fine $output
                   ts_log_fine "ok"
                   ts_log_fine "try to stop sge_execd as user root ..."
                   set output [start_remote_prog $exec_host "root" "$ts_config(product_root)/$ts_config(cell)/common/sgeexecd" "stop" "exit_val" $my_timeout ]
                   if {$exit_val != 0} {
                      ts_log_severe "failed - rc-script runs into any other error, tried to stop as user root on host $exec_host"
                      return
                   }
                   ts_log_fine $output

                   ts_log_fine "ok"
                   ts_log_fine "checking /var/lock/subsys/sgeexecd file ..."
                   set output [start_remote_prog $exec_host $CHECK_USER "ls" "-la /var/lock/subsys | grep sgeexecd" "exit_val" $my_timeout]
                   if {$exit_val == 0} {
                      ts_log_severe "failed - /var/lock/subsys/sgeexecd has not been deleted on host $exec_host!"
                      return
                   }
                   ts_log_fine $output

                   ts_log_fine "ok"

                   # with TLS encryption we cannot start sge_qmaster as non-priviledged user - it needs to read in /var/lib/ocs/...
                   if {![config_has_product_feature "tls"]} {
                      ts_log_fine "try to start sge_execd as user $CHECK_USER ..."
                      set output [start_remote_prog $exec_host $CHECK_USER "$ts_config(product_root)/$ts_config(cell)/common/sgeexecd" "start" "exit_val" $my_timeout ]
                      if {$exit_val != 0} {
                         ts_log_fine $output
                         ts_log_severe "failed - rc-script runs into any error, tried to start as user $CHECK_USER on host $exec_host"
                         return
                      }
                      wait_for_load_from_all_queues
                      ts_log_fine "ok"
                      ts_log_fine "checking /var/lock/subsys/sgeexecd file ..."
                      set output [start_remote_prog $exec_host $CHECK_USER "ls" "-la /var/lock/subsys | grep sgeexecd" "exit_val" $my_timeout]
                      if {$exit_val == 0} {
                         ts_log_severe "failed - /var/lock/subsys/sgeexecd may not be created by user $CHECK_USER on host $exec_host!"
                         return
                      }
                      ts_log_fine $output

                      ts_log_fine "ok"
                      ts_log_fine "try to stop sge_execd as user $CHECK_USER ..."
                      set output [start_remote_prog $exec_host $CHECK_USER "$ts_config(product_root)/$ts_config(cell)/common/sgeexecd" "stop" "exit_val" $my_timeout]
                      if {$exit_val != 0} {
                         ts_log_severe "failed - rc-script runs into any error on host $exec_host, tried to stop as $CHECK_USER"
                         return
                      }
                      ts_log_fine $output
                   }

                   ts_log_fine "ok"
                   ts_log_fine "try to start sge_execd as user root ..."
                   set output [start_remote_prog $exec_host "root" "$ts_config(product_root)/$ts_config(cell)/common/sgeexecd" "start" "exit_val" $my_timeout]
                   if {$exit_val != 0} {
                      ts_log_fine "$output $exit_val"
                      ts_log_severe "failed - rc-script runs into any error on host $exec_host, tried to start as user root"
                      return
                   }
                   ts_log_fine $output
                   wait_for_load_from_all_queues

                   ts_log_fine "ok"
                   ts_log_fine "checking /var/lock/subsys/sgeexecd file ..."
                   set output [start_remote_prog $exec_host $CHECK_USER "ls" "-la /var/lock/subsys | grep sgeexecd" "exit_val" $my_timeout]
                   if {$exit_val != 0} {
                      ts_log_severe "failed - /var/lock/subsys/sgeexecd on host $exec_host has not been created by rc-script!"
                      return
                   }
                   ts_log_fine $output

                   ts_log_fine "ok"
                }
         }

         default {
            ts_log_fine "looking for linux hosts ...."
         }
      }
   }

   if {$found_linux == 0} {
      ts_log_config "test not possible, no linux host found in configuration!"
   }
}
