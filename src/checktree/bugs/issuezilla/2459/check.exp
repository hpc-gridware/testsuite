#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
#  Portions of this software are Copyright (c) 2023-2025 HPC-Gridware GmbH
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name
global check_category
global check_description
global check_needs
global check_functions
global check_root_access_needs
global found_backup_entries found_install_entries

# define test's name and run level descriptions
set check_name            "issue_2459"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_description(0)  "Testing the autoinstall and autobackup configfile checking "
set check_description(1)  "Testing the autoinstall and autobackup configfile checking with JMX enabled"

# define test's dependencies
#set check_needs           "init_core_system"

# setup and cleanup functions
set check_setup_level_function "issue_2459_setup"
set check_cleanup_level_function "issue_2459_cleanup"

# define test's procedure order
set check_functions {}
lappend check_functions "issue_2459_parse_autoinstall"
lappend check_functions "issue_2459_parse_autobackup"

# -------- local test procedures: initialization------------------------------

proc issue_2459_setup {} {
   get_current_cluster_config_array ts_config
   global CHECK_ACT_LEVEL
   global found_backup_entries found_install_entries

   init_found_install_entries
   init_found_backup_entries
   create_auto_config
}

proc issue_2459_cleanup {} {
   get_current_cluster_config_array ts_config
   global found_backup_entries found_install_entries

   set inst_config_file "$ts_config(product_root)/autoinst_config_$ts_config(cell).conf"
   set backup_config_file "$ts_config(product_root)/autobackup_config_$ts_config(cell).conf"
   file delete $inst_config_file
   file delete $backup_config_file

   unset -nocomplain found_backup_entries found_install_entries
}


proc issue_2459_parse_autoinstall {} {
   get_current_cluster_config_array ts_config
   global CHECK_USER
   global issue_2459_hosts
   global found_install_entries

   set my_timeout 500
   set exit_val 0

   set inst_sge_options "-m -x -csp -auto $ts_config(product_root)/autoinst_config_$ts_config(cell).conf"

   ts_log_fine "inst_sge $inst_sge_options"
   set output [start_remote_prog $ts_config(master_host) $CHECK_USER  "./inst_sge" $inst_sge_options exit_val $my_timeout 0 $ts_config(product_root)]

   set lines [split $output "\n"]
   foreach line $lines {
      switch -glob $line {
         "*SGE_ROOT*" {
               set found_install_entries(SGE_ROOT) 1
         }
         "*CELL_NAME*" {
               set found_install_entries(CELL_NAME) 1
         }
         "*SGE_QMASTER_PORT*" {
               set found_install_entries(SGE_QMASTER_PORT) 1
         }
         "*SGE_EXECD_PORT*" {
               set found_install_entries(SGE_EXECD_PORT) 1
         }
         "*QMASTER_SPOOL_DIR*" {
               set found_install_entries(QMASTER_SPOOL_DIR) 1
         }
         "*EXECD_SPOOL_DIR_LOCAL*" {
               set found_install_entries(EXECD_SPOOL_DIR) 1
         }
         "*GID_RANGE*" {
               set found_install_entries(GID_RANGE) 1
         }
         "*SPOOLING_METHOD*" {
               set found_install_entries(SPOOLING_METHOD) 1
         }
         "*PAR_EXECD_INST_COUNT*" {
               set found_install_entries(PAR_EXECD_INST_COUNT) 1
         }
         "*EXEC_HOST_LIST*" {
               set found_install_entries(EXEC_HOST_LIST) 1
         }
         "*EXECD_SPOOL_DIR*" {
               set found_install_entries(EXECD_SPOOL_DIR_LOCAL) 1
         }
         "*HOSTNAME_RESOLVING*" {
               set found_install_entries(HOSTNAME_RESOLVING) 1
         }
         "*SHELL_NAME*" {
               set found_install_entries(SHELL_NAME) 1
         }
         "*COPY_COMMAND*" {
               set found_install_entries(COPY_COMMAND) 1
         }
         "*DEFAULT_DOMAIN*" {
               set found_install_entries(DEFAULT_DOMAIN) 1
         }
         "*ADMIN_MAIL*" {
               set found_install_entries(ADMIN_MAIL) 1
         }
         "*ADD_TO_RC*" {
               set found_install_entries(ADD_TO_RC) 1
         }
         "*SET_FILE_PERMS*" {
               set found_install_entries(SET_FILE_PERMS) 1
         }
         "*SCHEDD_CONF*" {
               set found_install_entries(SCHEDD_CONF) 1
         }
         "*CSP_RECREATE*" {
               set found_install_entries(CSP_RECREATE) 1
         }
         "*CSP_COPY_CERTS*" {
               set found_install_entries(CSP_COPY_CERTS) 1
         }
         "*CSP_COUNTRY_CODE*" {
               set found_install_entries(CSP_COUNTRY_CODE) 1
         }
         "*SERVICE_TAGS*" {
               set found_install_entries(SERVICE_TAGS) 1
         }
         "*SGE_ENABLE_SMF*" {
               set found_install_entries(SGE_ENABLE_SMF) 1
         }
         "*SGE_CLUSTER_NAME*" {
               set found_install_entries(SGE_CLUSTER_NAME) 1
         }
         "*SGE_JMX_PORT*" {
               set found_install_entries(SGE_JMX_PORT) 1
         }
         "*SGE_JMX_SSL_CLIENT*" {
               set found_install_entries(SGE_JMX_SSL_CLIENT) 1
         }
         "*SGE_JMX_SSL*" {
               set found_install_entries(SGE_JMX_SSL) 1
         }
         "*SGE_JMX_SSL_KEYSTORE*" {
               set found_install_entries(SGE_JMX_SSL_KEYSTORE) 1
         }
         "*SGE_JMX_SSL_KEYSTORE_PW*" {
               set found_install_entries(SGE_JMX_SSL_KEYSTORE_PW) 1
         }
         "*SGE_JVM_LIB_PATH*" {
               set found_install_entries(SGE_JVM_LIB_PATH) 1
         }
         "*SGE_ADDITIONAL_JVM_ARGS*" {
               set found_install_entries(SGE_ADDITIONAL_JVM_ARGS) 1
         }
      }
   }

   set error_text ""
   if {$exit_val == 2} {
      set test_ok 1
      foreach index [array names found_install_entries] {
         if {$found_install_entries($index) == 0} {
            append error_text "No error received for configuration entry: $index\n"
            set test_ok 0
         }
      }
      if {$test_ok == 1} {
         ts_log_fine "test is ok!"
      } else {
         ts_log_warning "autoinstall configfile check failed:\n$error_text\noutput was:\n$output"
      }
   } else {
      ts_log_severe "autoinstall configfile check failed with exit code $exit_val != 2 !!!:\n$output"
   }
}

proc issue_2459_parse_autobackup {} {
   get_current_cluster_config_array ts_config
   global CHECK_USER
   global issue_2459_hosts
   global found_backup_entries

   set my_timeout 500
   set exit_val 0

   ts_log_fine "inst_sge -bup -auto $ts_config(product_root)/autobackup_config_$ts_config(cell).conf"
   set output [start_remote_prog $ts_config(master_host) $CHECK_USER  "./inst_sge" "-bup -auto $ts_config(product_root)/autobackup_config_$ts_config(cell).conf" exit_val $my_timeout 0 $ts_config(product_root)]

   set lines [split $output "\n"]
   foreach line $lines {
      switch -glob $line {
         "*SGE_ROOT*" {
               set found_backup_entries(SGE_ROOT) 1
         }
         "*SGE_CELL*" {
               set found_backup_entries(SGE_CELL) 1
         }
         "*BACKUP_DIR*" {
               set found_backup_entries(BACKUP_DIR) 1
         }
         "*BACKUP_FILE*" {
               set found_backup_entries(BACKUP_FILE) 1
         }
      }
   }

   if {$exit_val == 2} {
      set test_ok 1
      foreach index [array names found_backup_entries] {
         if {$found_backup_entries($index) == 0} {
            ts_log_fine "No error received for configuration entry: $index"
            set test_ok 0
         }
      }
      if {$test_ok == 1} {
         ts_log_fine $output
         ts_log_fine "test is ok!"
      } else {
         ts_log_warning "autobackup configfile check failed:\n$output"
      }
      return
   } else {
      ts_log_fine "test failed, scripts exit code was != 2"
      ts_log_warning "inst_sge" "-2" "autobackup configfile check failed:\n$output"
      return
   }
}

#creating corrupt configuration
proc issue_2459_write_autoinst_config {filename host {do_cleanup 1}} {
   get_current_cluster_config_array ts_config
   global CHECK_USER local_execd_spool_set

   set fdo [open $filename w]

   puts $fdo "SGE_ROOT=\"\""
   puts $fdo "SGE_QMASTER_PORT=\"huhu\""
   puts $fdo "SGE_EXECD_PORT=\"wrong\""
   puts $fdo "SGE_ENABLE_SMF=\"fale\""
   puts $fdo "SGE_CLUSTER_NAME=\"1234\""
   puts $fdo "CELL_NAME=\"\""
   puts $fdo "ADMIN_USER=\"$CHECK_USER\""
   puts $fdo "QMASTER_SPOOL_DIR=\"nopath\""
   puts $fdo "EXECD_SPOOL_DIR=\"nopath\""
   puts $fdo "GID_RANGE=\"46000-42000\""
   puts $fdo "SPOOLING_METHOD=\"spooling wrong\""
   if {$ts_config(admin_only_hosts) != "none"} {
      puts $fdo "ADMIN_HOST_LIST=\"$ts_config(all_nodes) $ts_config(admin_only_hosts)\""
   } else {
      puts $fdo "ADMIN_HOST_LIST=\"$ts_config(all_nodes)\""
   }
   if {$ts_config(submit_only_hosts) != "none"} {
      puts $fdo "SUBMIT_HOST_LIST=\"$ts_config(all_nodes) $ts_config(submit_only_hosts)\""
   } else {
      puts $fdo "SUBMIT_HOST_LIST=\"$ts_config(all_nodes)\""
   }
   puts $fdo "EXEC_HOST_LIST=\"\""
   puts $fdo "EXECD_SPOOL_DIR_LOCAL=\"nopath\""
   puts $fdo "HOSTNAME_RESOLVING=\"hello\""
   puts $fdo "SHELL_NAME=\"h\""
   puts $fdo "COPY_COMMAND=\"acp\""
   puts $fdo "DEFAULT_DOMAIN=\"\""
   puts $fdo "ADMIN_MAIL=\"@@@@@@@\""
   puts $fdo "ADD_TO_RC=\"fals\""
   puts $fdo "SET_FILE_PERMS=\"rue\""
   puts $fdo "RESCHEDULE_JOBS=\"ait\""
   if {[is_version_in_range "" "9.0.8"]} {
      puts $fdo "SCHEDD_CONF=\"5\""
   }
   puts $fdo "SHADOW_HOST=\"\""
   puts $fdo "PAR_EXECD_INST_COUNT=\"nonumber\""
   if {$ts_config(gridengine_version) < 80} {
      puts $fdo "SERVICE_TAGS=\"ele\""
   }
   puts $fdo "CSP_COPY_CERTS=\"fae\""
   puts $fdo "CSP_RECREATE=\"fae\""
   puts $fdo "CSP_COUNTRY_CODE=\"DUE\""

   close $fdo
   wait_for_remote_file $host $CHECK_USER $filename
}

proc issue_2459_write_autobackup_config {filename host {do_cleanup 1}} {
   get_current_cluster_config_array ts_config
   global CHECK_USER local_execd_spool_set

   ts_log_fine "delete file $filename ..."
   file delete $filename
#   wait for remote file deletion ...
   wait_for_remote_file $host $CHECK_USER $filename 60 1 1

   set fdo [open $filename w]

   puts $fdo "SGE_ROOT=\"this/does/not/exist\""
   puts $fdo "SGE_CELL=\"Cell/is/wrong/too\""
   puts $fdo "TAR=\"1\""
   puts $fdo "BACKUP_FILE=\"\""
   puts $fdo "BACKUP_DIR=\"\""
   close $fdo
   wait_for_remote_file $host $CHECK_USER $filename
}

proc create_auto_config {} {
   get_current_cluster_config_array ts_config
   global CHECK_USER
   global CORE_INSTALLED
   global check_use_installed_system CHECK_ADMIN_USER_SYSTEM
   global CHECK_DEBUG_LEVEL CHECK_QMASTER_INSTALL_OPTIONS
   global CHECK_PROTOCOL_DIR

   set inst_config_file "$ts_config(product_root)/autoinst_config_$ts_config(cell).conf"
   set backup_config_file "$ts_config(product_root)/autobackup_config_$ts_config(cell).conf"

   if {[file isfile $inst_config_file] == 1} {
      file delete -force $inst_config_file
   }
   if {[file isfile $backup_config_file] == 1} {
      file delete -force $backup_config_file
   }

   ts_log_fine "creating automatic install and backup config file ..."
   issue_2459_write_autoinst_config $inst_config_file $ts_config(master_host) 1
   issue_2459_write_autobackup_config $backup_config_file $ts_config(master_host) 1
   ts_log_fine "automatic install and backup config file successfully created ..."
   ts_log_fine "inst_config_file: $inst_config_file"
   ts_log_fine "backup_config_file: $backup_config_file"
}


proc init_found_install_entries {} {
   get_current_cluster_config_array ts_config
   global found_install_entries

   unset -nocomplain found_install_entries

   set found_install_entries(SGE_ROOT) 0
   set found_install_entries(CELL_NAME) 0
   set found_install_entries(SGE_QMASTER_PORT) 0
   set found_install_entries(SGE_EXECD_PORT) 0
   set found_install_entries(QMASTER_SPOOL_DIR) 0
   set found_install_entries(EXECD_SPOOL_DIR) 0
   set found_install_entries(GID_RANGE) 0
   set found_install_entries(SPOOLING_METHOD) 0
   set found_install_entries(PAR_EXECD_INST_COUNT) 0
   set found_install_entries(EXEC_HOST_LIST) 0
   set found_install_entries(EXECD_SPOOL_DIR_LOCAL) 0
   set found_install_entries(HOSTNAME_RESOLVING) 0
   set found_install_entries(SHELL_NAME) 0
   set found_install_entries(COPY_COMMAND) 1 ;#cannot be tested with this test scenario
   set found_install_entries(DEFAULT_DOMAIN) 0
   set found_install_entries(ADMIN_MAIL) 0
   set found_install_entries(ADD_TO_RC) 0
   set found_install_entries(SET_FILE_PERMS) 0
   if {[is_version_in_range "" "9.0.8"]} {
      set found_install_entries(SCHEDD_CONF) 0
   }
   set found_install_entries(CSP_RECREATE) 0
   set found_install_entries(CSP_COPY_CERTS) 0
   set found_install_entries(CSP_COUNTRY_CODE) 0
   if {$ts_config(gridengine_version) < 80} {
      set found_install_entries(SERVICE_TAGS) 0
   }
   if {[is_smf_host $ts_config(master_host)]} {
      set found_install_entries(SGE_ENABLE_SMF) 0
   } else {
      set found_install_entries(SGE_ENABLE_SMF) 1
   }
   set found_install_entries(SGE_CLUSTER_NAME) 0
}


proc init_found_backup_entries {} {
   global found_backup_entries

   set found_backup_entries(SGE_ROOT) 0
   set found_backup_entries(SGE_CELL) 0
   set found_backup_entries(BACKUP_DIR) 0
   set found_backup_entries(BACKUP_FILE) 0
}
