#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
#  Portions of this software are Copyright (c) 2023-2024 HPC-Gridware GmbH
#
##########################################################################
#___INFO__MARK_END__

# Define the global variables to give them back
global check_name check_description check_needs check_functions
global check_category
global check_root_access_needs

set check_category            "COMPATIBILITY SYSTEM VERIFIED"
set check_name                "issue_1832"
set check_description(0)      "comprehensive -hold_jid_ad test"
set check_needs               "init_core_system"      ;# dependencies of this check (name of other check)
set check_root_access_needs   "yes"

# setup and cleanup functions
set check_setup_function   issue_1832_setup
set check_cleanup_function issue_1832_cleanup

# define test's procedure order
set check_functions           ""
lappend check_functions       "issue_1832_run_simple"
lappend check_functions       "issue_1832_run_master_down"

proc issue_1832_setup {} {
   global ts_config
   if {$ts_config(source_dir) == "none"} {
      ts_log_config "source directory is set to \"none\" - cannot run test"
      return 99
   }
}

proc issue_1832_cleanup {} {
   delete_all_jobs
   wait_for_end_of_all_jobs
}

proc issue_1832_run_simple  {} {
   global ts_config

   set host $ts_config(master_host)

   # use only drmaa_wait() for task status information
   set output [start_test_bin "test_drmaa_issue1832" "$ts_config(product_root)/examples/jobs/sleeper.sh" $host "" prg_exit_state 600]
   ts_log_fine "output:\n$output"

   # If we segfault on any architecture, the bug still exists.
   if {$prg_exit_state != 0} {
      ts_log_severe "test binary test_drmaa_issue1832 failed on host $host:\n$output"
   }

   # retrieve task status via drmaa_job_ps() during run
   set output [start_test_bin "test_drmaa_issue1832" "-ps $ts_config(product_root)/examples/jobs/sleeper.sh" $host "" prg_exit_state 600]
   ts_log_fine "output:\n$output"

   # If we segfault on any architecture, the bug still exists.
   if {$prg_exit_state != 0} {
      ts_log_severe "test binary test_drmaa_issue1832 failed on host $host:\n$output"
   }
}

proc issue_1832_run_master_down  {} {
   global ts_config CHECK_USER
   set host $ts_config(master_host)

   set bin_args "-1st -exit_unknown $ts_config(product_root)/examples/jobs/sleeper.sh"

   # if test binary is installed in SGE_ROOT (from cmake build) then use this one
   # else use the one from the aimk build
   set bin_path [get_test_or_source_path "test_drmaa_issue1832" $host]

   set error_text ""
   set output ""

   set pr_id [open_remote_spawn_process $host $CHECK_USER $bin_path $bin_args 0 "" "" 0 15 1]
   set sp_id [lindex $pr_id 1]

   set master_down 0
   set master_restarted 0
   set timeout 60
   set my_master_start_time -1
   set do_stop 0
   expect {
     -i $sp_id timeout {
         append error_text "got timeout error\n"
     }
     -i $sp_id full_buffer {
         append error_text "got full_buffer error\n"
     }

     -i $sp_id -- "*\n" {
        foreach line [split $expect_out(0,string) "\n"] {
           if {$line != ""} {
              append output "${line}\n"
              ts_log_fine $line
              if { [string match "ddd*" $line] && $master_down == 0} {
                  ts_log_fine "shutting down qmaster ..."
                  shutdown_master_and_scheduler $ts_config(master_host) [get_qmaster_spool_dir]
                  set master_down 1
                  set my_master_start_time [timestamp]
                  incr my_master_start_time 15
              }
              if { $my_master_start_time > 0 && 
                   [timestamp] >= $my_master_start_time &&
                   $master_restarted == 0 } {
                 ts_log_fine "starting up qmaster ..."
                 startup_qmaster
                 set master_restarted 1
              }
              if { [string match "*_exit_status_:(*" $line ] } {
                 ts_log_fine "script terminated!" 
                 set help $line
                 set st [string first "(" $help]
                 set ed [string first ")" $help]
                 incr st 1
                 incr ed -1
                 set exit_state [string range $help $st $ed]
                 ts_log_fine "found exit status of client: ($exit_state)"
                 set do_stop 1
              }
           }
        }
        if { $do_stop == 0 } {
           exp_continue
        }
     }
   }
   close_spawn_process $pr_id

   if {$exit_state != 0} {
      ts_log_severe "test binary test_drmaa_issue1832 failed on host $host\n$output"
   }
   if { $master_restarted == 0 } {
      startup_qmaster
   }


   if { $error_text != "" } {
      ts_log_severe $error_text
   }
}

