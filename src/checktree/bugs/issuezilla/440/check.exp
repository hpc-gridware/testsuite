#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
#  Portions of this software are Copyright (c) 2023-2025 HPC-Gridware GmbH
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name
global check_category
global check_description
global check_needs
global check_functions
global check_root_access_needs

# define test's name and run level descriptions
set check_name            "issue_440"
set check_category        "COMPATIBILITY SYSTEM L10N VERIFIED"
set check_description(0) "qsub / qrsh command lines crash qmaster with arg. lines > 10 K"

# define test's dependencies
set check_needs           "init_core_system"

# setup and cleanup functions
set check_cleanup_function "issue_440_cleanup"
set check_setup_function   "issue_440_setup"

# define test's procedure order
set check_functions ""
lappend check_functions "issue_440_check_qsub"
lappend check_functions "issue_440_check_qrsh"

# -------- local test procedures -----------------------------------------------

proc issue_440_setup {} {
   get_current_cluster_config_array ts_config
   global issue_440_config issue_440_remove_accounting

   set issue_440_config(host_list) $ts_config(unique_arch_nodes)

   foreach host $issue_440_config(host_list) {
      set issue_440_MAX_KBYTE 20
      ts_log_fine "$host: testing with MAX_KBYTE=$issue_440_MAX_KBYTE"
      set issue_440_config(max_kbyte,$host) $issue_440_MAX_KBYTE
   }

   set issue_440_remove_accounting 0
}

proc issue_440_cleanup {} {
   get_current_cluster_config_array ts_config
   global CHECK_USER
   global issue_440_config issue_440_remove_accounting

   delete_all_jobs
   wait_for_end_of_all_jobs

   # if we ran into CS-1381 the test would leave an accounting file with very long lines qacct cannot parse
   # remove this accounting file
   if {$issue_440_remove_accounting == 1} {
      set accounting_file "$ts_config(product_root)/$ts_config(cell)/common/accounting.jsonl"
      ts_log_fine "removing accounting file $accounting_file ..."
      delete_remote_file $ts_config(master_host) $CHECK_USER $accounting_file
   }

   unset -nocomplain issue_440_config issue_440_remove_accounting
}


proc issue_440_check_qsub {} {
   global CHECK_USER
   global issue_440_config

   get_current_cluster_config_array ts_config

   set error_text ""
   set submit_script_path "$ts_config(testsuite_root_dir)/scripts/cmd_line_output.sh"


   foreach host $issue_440_config(host_list) {
      set end_length [expr 1024 * $issue_440_config(max_kbyte,$host)]
      set start_length 0
      set length_list($host) {}
      while {$start_length <= $end_length} {
         # increment next argument length
         lappend length_list($host) $start_length
         incr start_length 4096
      }
   }

   # prepare jobs
   foreach host $issue_440_config(host_list) {
      ts_log_fine "preparing tmp files for jobs on host $host ..."
      foreach length $length_list($host) {
         # generate job output/error file names
         set test_info($host,$length,output_file) [get_tmp_file_name $host $length output]
         set test_info($host,$length,error_file)  [get_tmp_file_name $host $length error]
         # generate command line with corrent length
         set arg_name "argument"
         set command_line "-l h=$host -S /bin/sh -o $test_info($host,$length,output_file)"
         append command_line " -e $test_info($host,$length,error_file) -N long_cmd $submit_script_path $arg_name"
         set arg_length 0
         while {[string length $command_line] < $length} {
            incr arg_length 1
            if {$arg_length > 500} {
               append arg_name " "
               set arg_length 0
            } else {
               append arg_name "_"
            }
            set command_line "-l h=$host -S /bin/sh -o $test_info($host,$length,output_file)"
            append command_line " -e $test_info($host,$length,error_file) -N long_cmd $submit_script_path $arg_name"
         }
         set test_info($host,$length,command_line) $command_line
         set test_info($host,$length,arg_name) [string trim $arg_name]
      }
   }

   # submit jobs
   # TODO (CR): use parallel submit_job
   foreach host $issue_440_config(host_list) {
      foreach length $length_list($host) {
         ts_log_fine "$host: submitting job with command line length: [string length $test_info($host,$length,command_line)] ..."
         # submit jobs
         submit_job $test_info($host,$length,command_line) 1 60 $host "" "" 0
      }
   }

   wait_for_end_of_all_jobs 120


   # verify job outputs
   foreach host $issue_440_config(host_list) {
      foreach length $length_list($host) {
         # read job output/error files remotely on the execution host (to prevent NFS problems)
         get_file_content $host $CHECK_USER $test_info($host,$length,output_file) f_output
         get_file_content $host $CHECK_USER $test_info($host,$length,error_file) f_error

         ts_log_fine "analyse job output on host $host, command line length = $length ..."

         set nr_of_lines $f_output(0)
         set output ""
         set found_start 0
         for {set i 1} {$i <= $nr_of_lines} {incr i 1} {
            if {[string match "*_GE_TESTSUITE_SCRIPT_OUTPUT_END_*" $$f_output($i)]} {
               set found_start 0
            }

            if {$found_start == 1} {
               append output $f_output($i)
            }
            if {[string match "*_GE_TESTSUITE_SCRIPT_OUTPUT_BEGIN_*" $$f_output($i)]} {
               set found_start 1
            }
         }

         # compare argument with job output file content
         set output [string trim $output]
         if {[string compare $output $test_info($host,$length,arg_name)] != 0} {
            append error_text "$host: job output not equal to commandline input:\n"
            append error_text "strlen(cmd_line) = [string length $test_info($host,$length,arg_name)]\n"
            append error_text "strlen(output)   = [string length $output] on host $host\n"
            append error_text "cmd_line: $test_info($host,$length,arg_name)\noutput: $output\n"
         }

         # check for further errors
         set nr_of_lines $f_error(0)
         set got_output_error 0
         set output_errors ""
         for {set i 1 } { $i <= $nr_of_lines} {incr i 1} {
            ts_log_fine $f_error($i)
            set got_output_error 1
            append output_errors "$f_error($i)\n"
         }
         if {$got_output_error != 0} {
            append error_text "$host: got error output from job script:\n$output_errors\n"
         }
      }
   }

   ts_log_fine "check if master and scheduler are running ..."
   set back [are_master_and_scheduler_running $ts_config(master_host) [get_qmaster_spool_dir]]
   set expected_result 2
   if {$back != $expected_result} {
      append error_text "are_master_and_scheduler_running returns $back submit on host $host"
   }

   if {$error_text != ""} {
      ts_log_severe $error_text
   }
}


proc issue_440_check_qrsh {} {
   get_current_cluster_config_array ts_config
   global CHECK_USER
   global issue_440_config issue_440_remove_accounting


   set error_text ""
   set submit_script_path "$ts_config(testsuite_root_dir)/scripts/cmd_line_output.sh"

   foreach host $issue_440_config(host_list) {
      set end_length [expr 1024 * $issue_440_config(max_kbyte,$host)]
      set start_length 0
      set length_list($host) {}
      while {$start_length <= $end_length} {
         # increment next argument length
         lappend length_list($host) $start_length
         incr start_length 4096
      }
   }

   # prepare jobs
   foreach host $issue_440_config(host_list) {
      ts_log_fine "preparing tmp files for jobs on host $host ..."
      foreach length $length_list($host) {
         # generate command line with corrent length
         set arg_name "argument"
         set command_line "-l h=$host $submit_script_path $arg_name"
         set arg_length 0
         while {[string length $command_line] < $length} {
            incr arg_length 1
            if {$arg_length > 500} {
               append arg_name " "
               set arg_length 0
            } else {
               append arg_name "_"
            }
            set command_line "-l h=$host $submit_script_path $arg_name"
         }
         set test_info($host,$length,command_line) $command_line
         set test_info($host,$length,arg_name) [string trim $arg_name]
      }
   }

   # submit jobs
   # TODO (CR): Use parallel qrsh submit function
   foreach host $issue_440_config(host_list) {
      set qrsh_command "$ts_config(product_root)/bin/[resolve_arch $host]/qrsh"
      foreach length $length_list($host) {
         ts_log_fine "$host: submitting qrsh job with command line length: [string length $test_info($host,$length,command_line)] ..."
         # start qrsh job
         set test_info($host,$length,output) [start_remote_prog $host $CHECK_USER $qrsh_command "-verbose $test_info($host,$length,command_line)"]
         if {$prg_exit_state != 0} {
            append error_text "$host: error in qrsh job:\nexit status is $prg_exit_state\noutput: $test_info($host,$length,output)\n"
         }
      }
   }
   # verify job outputs
   foreach host $issue_440_config(host_list) {
      foreach length $length_list($host) {
         ts_log_fine "analyse qrsh job output on host $host, command line length = $length ..."

         set output2 [split [string trim $test_info($host,$length,output)] "\n"]
         set output ""
         set found_start 0
         foreach out_line $output2 {
            if {[string match "Your job * has been *" $out_line]} {
               set job_id [lindex $out_line 2]
               # check for issue CS-1381 qacct complains ... accounting records with huge command line entry
               # either qacct will fail or it will contain accounting records with invalid data, e.g.,
               # submit_cmd_line (null)
               if {[get_qacct $job_id] != 0} {
                  # qacct failed
                  set issue_440_remove_accounting 1
               } else {
                  if {![info exists qacct_info(submit_cmd_line)]} {
                     # the submit_cmd_line is missing
                     append error_text "$host: $length: qacct_info(submit_cmd_line) not set for job $job_id\n"
                     set issue_440_remove_accounting 1
                  } else {
                     if {[string first $test_info($host,$length,arg_name) $qacct_info(submit_cmd_line)] < 0} {
                        # the submit_cmd_line does not contain the full command line
                        append error_text "$host: $length: qacct_info(submit_cmd_line) does not contain the full arguments:\n"
                        set issue_440_remove_accounting 1
                     } else {
                        ts_log_fine "$host: $length: qacct_info(submit_cmd_line) contains arguments as expected"
                     }
                  }
               }
            }
            if {[string match "*_GE_TESTSUITE_SCRIPT_OUTPUT_END_*" $out_line]} {
               set found_start 0
            }

            if {$found_start == 1} {
               append output $out_line
            }
            if {[string match "*_GE_TESTSUITE_SCRIPT_OUTPUT_BEGIN_*" $out_line]} {
               set found_start 1
            }
         }

         # compare argument with job output file content
         set output [string trim $output]
         if {[string compare $output $test_info($host,$length,arg_name)] != 0} {
            append error_text "$host: job output not equal to commandline input:\n"
            append error_text "strlen(cmd_line) = [string length $test_info($host,$length,arg_name)]\n"
            append error_text "strlen(output)   = [string length $output] on host $host\n"
            append error_text "cmd_line: $test_info($host,$length,arg_name)\noutput: $output\n"
         }
      }
   }

   ts_log_fine "check if master and scheduler are running ..."
   set back [are_master_and_scheduler_running $ts_config(master_host) [get_qmaster_spool_dir]]
   set expected_result 2
   if {$back != $expected_result} {
      append error_text "are_master_and_scheduler_running returns $back submit on host $host"
   }

   if {$error_text != ""} {
      ts_log_severe $error_text
   }
}






