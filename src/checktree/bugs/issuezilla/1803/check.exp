#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
#  Portions of this software are Copyright (c) 2011 Univa Corporation
#
#  Portions of this software are Copyright (c) 2023-2024 HPC-Gridware GmbH
#
##########################################################################
#___INFO__MARK_END__



#****** system_tests/shepherd/issue_1803 ***************************************
#  NAME
#     issue_1803
#
#  FUNCTION
#     Run level short:
#
#*******************************************************************************


# define global variable in this namespace
global check_name
global check_category
global check_description
global check_needs
global check_functions
global check_root_access_needs

set check_root_access_needs "yes"

# define test's name and run level descriptions
set check_name            "issue_1803"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_description(0)  "batch job submission"



# define test's dependencies
set check_needs           "init_core_system"

# setup and cleanup functions
set check_setup_function issue_1803_setup
set check_cleanup_function issue_1803_cleanup



# define test's procedure order
set check_functions ""
lappend check_functions "issue_1803_test"

# -------- local test procedures: initialization------------------------------

proc issue_1803_setup {} {
   global ts_config
   global issue_1803_global_conf issue_1803_host_conf issue_1803_allq_conf issue_1803_use_local_conf issue_1803_test_host

   ts_log_fine "\n--- Setup ---"

   # we need just any test execd host for this test
   set issue_1803_test_host [lindex $ts_config(execd_nodes) 0]

   # we will change the global configuration, the scheduler configuration,
   # the configuration of the queue "all.q" and possibly the one of the
   # test execution host, but the scheduler configuration will be restored
   # to default, so we save the three others here:
   ts_log_fine "saving current configurations ..."
   get_config issue_1803_global_conf "global"
   get_config issue_1803_host_conf $issue_1803_test_host
   get_queue "all.q" issue_1803_allq_conf

   # set short scheduling interval
   set my_schedd_conf(schedule_interval) "0:0:01"
   set_schedd_config my_schedd_conf

   # set prolog and epilog in all.q
   set my_queue_conf(prolog) "/usr/bin/true prolog"
   set my_queue_conf(epilog) "/usr/bin/true epilog"
   # test relies on (former default) shell_start_mode posix_compliant
   set my_queue_conf(shell_start_mode) "posix_compliant"
   mod_queue all.q  "" my_queue_conf

   # set KEEP_ACTIVE and short load_report_time in execd params
   # do this in the test exec host config, if there is a execd_params entry,
   # if there is none, do it in the global config.
   if {[info exists issue_1803_host_conf(execd_params)]} {
      # there is a host local execd_params list set
      set issue_1803_use_local_host 1
      set conf_execd_params $issue_1803_host_conf(execd_params)
   } else {
      set issue_1803_use_local_host 0
      set conf_execd_params $issue_1803_global_conf(execd_params)
   }

   # Setting execd_params to KEEP_ACTIVE=true
   set my_execd_params [add_or_replace_param $conf_execd_params "KEEP_ACTIVE" "KEEP_ACTIVE=true"]

   if {$issue_1803_use_local_host} {
      # modify the test exec host config
      set my_host_conf(execd_params) $my_execd_params
      set_config my_host_conf $issue_1803_test_host
   } else {
      # modify the global config
      set my_global_conf(execd_params) $my_execd_params
   }
   ts_log_fine "setting execd_params to \"$my_execd_params\" ..."
   set my_global_conf(load_report_time) "00:00:01"

   # This procedure waits till all execd gets global config
   set_config_and_propagate my_global_conf
}

proc issue_1803_cleanup {} {
   global issue_1803_test_host
   global issue_1803_global_conf issue_1803_host_conf issue_1803_allq_conf issue_1803_use_local_conf issue_1803_test_host

   ts_log_fine "--- Cleanup ---"
   delete_all_jobs
   wait_for_end_of_all_jobs 60

   # delete the content of the "active_jobs" directory
   clear_active_jobs_dir $issue_1803_test_host

   ts_log_fine "restoring original configuration ..."
   reset_schedd_config
   set_config issue_1803_host_conf $issue_1803_test_host
   reset_config_and_propagate issue_1803_global_conf

   set my_queue_conf(prolog) $issue_1803_allq_conf(prolog)
   set my_queue_conf(epilog) $issue_1803_allq_conf(epilog)
   set my_queue_conf(shell_start_mode) $issue_1803_allq_conf(shell_start_mode)
   set my_queue_conf(starter_method) $issue_1803_allq_conf(starter_method)
   mod_queue all.q "" my_queue_conf

   switch_to_admin_user_system

   unset -nocomplain issue_1803_global_conf issue_1803_host_conf issue_1803_allq_conf issue_1803_use_local_conf issue_1803_test_host
}


proc issue_1803_test {} {
   global check_description CHECK_USER ts_user_config
   global ts_config issue_1803_test_host
   global CHECK_ACT_LEVEL CHECK_DISPLAY_OUTPUT
   ts_log_fine $check_description($CHECK_ACT_LEVEL)

   set starter_method_list {}
   lappend starter_method_list "none"
   lappend starter_method_list "/usr/bin/env"

   foreach starter_method $starter_method_list {
      set add_error "starter_method=$starter_method failed:"

      # Setting starter method
      set myconfig(starter_method) $starter_method
      ts_log_fine "setting starter_method to \"$starter_method\" ..."
      mod_queue all.q "" myconfig

      # init_logfile_wait instead of sleep

      set spool_dir [get_spool_dir $issue_1803_test_host execd]

      set qsub_arg_list {}
      set csh_path [get_binary_path $issue_1803_test_host "csh"]
      lappend qsub_arg_list "-l h=$issue_1803_test_host -o /dev/null -e /dev/null -S $csh_path"
      lappend qsub_arg_list "-b y -l h=$issue_1803_test_host -o /dev/null -e /dev/null -S $csh_path"
      lappend qsub_arg_list "-l h=$issue_1803_test_host -S $csh_path"
      lappend qsub_arg_list "-b y -l h=$issue_1803_test_host -S $csh_path"

      foreach job_args $qsub_arg_list {
         set job_id [submit_job "$job_args $ts_config(product_root)/examples/jobs/sleeper.sh 1"]
         wait_for_jobend $job_id "Sleeper" 60 0 1

         set starter_method_split [split $starter_method "/"]
         set starter_bin [lindex $starter_method_split [expr [llength $starter_method_split] -1]]

         set jobs_dir "$spool_dir/active_jobs/$job_id.1"
         set trace_file "$jobs_dir/trace"
         ts_log_fine "trace file:       $trace_file"
         wait_for_remote_file $issue_1803_test_host $ts_user_config(second_foreign_user) $trace_file

         ts_log_fine "reading $trace_file ..."
         set trace_output [start_remote_prog $issue_1803_test_host $ts_user_config(second_foreign_user) cat $trace_file prg_exit_state 10]
#         ts_log_fine "---\n$trace_output\n---"
         set trace_output [split $trace_output "\r\n"]

         set counter 0
         foreach line_a $trace_output {
            set line [string trim $line_a]
            if { $line != "" } {
               if {[string match "*execvp*" $line]} {
                  set line_split [split $line "\""]
                  foreach line_part $line_split {
                     ts_log_fine $line_part
                  }
                  set binary    [get_string_value_between "execvp(" "," [lindex $line_split 0 ]]
                  set argument1 [lindex $line_split 1]
                  set argument2 [lindex $line_split 3]
                  set argument3 [lindex $line_split 5]

                  if {$counter == 0} {
                     # prolog
                     set expected_binary    "/usr/bin/true"
                     set expected_argument1 "/usr/bin/true"
                     set expected_argument2 "prolog"
                     set expected_argument3 ""
                  } elseif {$starter_method == "none" && $counter == 1 && [string first "-b y" $job_args] >= 0} {
                     # job
                     set expected_binary    $csh_path
                     set expected_argument1 "-csh"
                     set expected_argument2 "-c"
                     set expected_argument3 "$ts_config(product_root)/examples/jobs/sleeper.sh 1 "
                  } elseif {$starter_method == "none" && $counter == 1} {
                     # job
                     set expected_binary    $csh_path
                     set expected_argument1 "-csh"
                     set expected_argument2 "$spool_dir/job_scripts/$job_id"
                     set expected_argument3 "1"
                  } elseif {$starter_method != "none" && $counter == 1 && [string first "-b y" $job_args] >= 0} {
                     # job
                     set expected_binary    "$starter_method"
                     set expected_argument1 "-$starter_bin"
                     set expected_argument2 "$ts_config(product_root)/examples/jobs/sleeper.sh"
                     set expected_argument3 "1"
                  } elseif {$starter_method != "none" && $counter == 1} {
                     # job
                     set expected_binary    "$starter_method"
                     set expected_argument1 "-$starter_bin"
                     set expected_argument2 "$spool_dir/job_scripts/$job_id"
                     set expected_argument3 "1"
                  } elseif {$counter == 2} {
                     # epilog
                     set expected_binary    "/usr/bin/true"
                     set expected_argument1 "/usr/bin/true"
                     set expected_argument2 "epilog"
                     set expected_argument3 ""
                  } else {
                     ts_log_severe "shepherd forked more than 3 (epilog, job, prolog) times"
                  }

                  ts_log_fine "binary:    \"$binary\""
                  ts_log_fine "argument1: \"$argument1\""
                  ts_log_fine "argument2: \"$argument2\""
                  ts_log_fine "argument3: \"$argument3\""

                  if {$binary != $expected_binary} {
                     ts_log_severe "$add_error expected $expected_binary, but shepherd executed $binary"
                  }
                  if {$argument1 != $expected_argument1} {
                     ts_log_severe "$add_error expected arg1 = $expected_argument1, but arg1 = $argument1"
                  }
                  if {$argument2 != $expected_argument2} {
                     ts_log_severe "$add_error expected arg2 = $expected_argument2, but arg2 = $argument2"
                  }
                  if {$argument3 != $expected_argument3} {
                     ts_log_severe "$add_error expected arg3 = $expected_argument3, but arg3 = $argument3"
                  }
                  incr counter
               }
            }
         }
      }
   }
}

