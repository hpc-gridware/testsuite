#___INFO__MARK_BEGIN_NEW__
###########################################################################
#
#  Copyright 2025 HPC-Gridware GmbH
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
###########################################################################
#___INFO__MARK_END_NEW__

# 4) set check_category
#     - it is a list of categories, e.g.
#        - <FEATURE> like CENTRY, EVENTCLIENT, INSTALL, RSMAP for all tests testing a certain feature
#        - MODULE for module tests
#        - PERFORMANCE for performance tests
#        - <client> like QCONF for all tests verifying the qconf commandline client
#        - VERIFIED for all tests which are known to be OK and which shall be run by default
#     - feel free to create new categories
#     - example: "OBJECT CENTRY QCONF VERIFIED"
#
# 5) set check_needs (e.g.: "init_core_system" this means that this test is not
#    started without successful run of "init_core_system" test
#
# 6) you can add any function name to check_functions (all function (no parameters allowed) are started
#    within each runlevel number
#    PLEASE use ts_log_severe() to submit errors
#    ts_log_severe() is used in many testsuite standard functions, so not every
#    function call must check the return state.
#
# 7) set check_need_running_system != "yes" if you shutdown the qmaster in the setup(level)
#    procedures. This will skip the qmaster alive test before starting test procedures.


# define global variable in this namespace
global check_name
global check_category
global check_description
global check_needs
global check_functions
global check_version_range

set check_version_range "9.0.6"

# define test's name and run level descriptions
set check_name            "issue_1059"
set check_category        "BUG PARALLEL SCHEDULER VERIFIED"
set check_description(0)  "test if per host resources are correctly booked with multiple queues per host (and gdil is correcly ordered)"

# define test's dependencies
set check_needs           "init_core_system"

# setup and cleanup functions
set check_setup_function issue_1059_setup
set check_cleanup_function issue_1059_cleanup

# define test's procedure order
set check_functions {}
lappend check_functions "issue_1059_test"

# -------- local test procedures: initialization------------------------------

proc issue_1059_setup {} {
   get_current_cluster_config_array ts_config
   global issue_1059_hosts issue_1059_backup

   # we need a PE with round_robin allocation rule
   set pe(slots) 999
   set pe(allocation_rule) "\$round_robin"
   set pe(job_is_first_task) "TRUE"
   add_pe "test.pe" pe

   # we use 3 hosts and 3 queue instances per host
   set issue_1059_hosts [host_conf_get_suited_hosts 3]
   set q(slots) 1
   set q(pe_list) "test.pe"
   add_queue "test1.q" $issue_1059_hosts q
   add_queue "test2.q" $issue_1059_hosts q
   add_queue "test3.q" $issue_1059_hosts q

   set sched_conf(schedd_job_info) "true"
   set_schedd_config sched_conf
}

proc issue_1059_cleanup {} {
   get_current_cluster_config_array ts_config
   global issue_1059_hosts issue_1059_backup

   delete_all_jobs
   wait_for_end_of_all_jobs

   reset_schedd_config

   # remove queues and pe
   del_queue "test1.q" "" 1 1
   del_queue "test2.q" "" 1 1
   del_queue "test3.q" "" 1 1
   del_pe "test.pe"

   unset -nocomplain issue_1059_hosts issue_1059_backup
}

proc issue_1059_check_queue_order {} {
   get_current_cluster_config_array ts_config

   set ret 1
   set qstat_env(MORE_INFO) 1
   set output [start_sge_bin "qstat" "-dj" "" "" prg_exit_state 60 "" "bin" output_lines qstat_env]
   set hosts {}
   foreach line [split $output "\n"] {
      if {[string first "JG_qhostname" $line] != -1} {
         #       JG_qhostname         (Host)    = ubuntu-22-amd64-1
         set host [lindex $line end]
         lappend hosts $host
      }
   }
   ts_log_fine $hosts
   set sequence 1
   set last_host [lindex $hosts 0]
   foreach host [lrange $hosts 1 end] {
      if {$host != $last_host} {
         if {$sequence < 3} {
            ts_log_severe "found less than 3 hosts in sequence, host list is $hosts"
            set ret 0
            break
         }
         set sequence 0
         set last_host $host
      }
      incr sequence
   }

   return $ret
}

proc issue_1059_test {} {
   get_current_cluster_config_array ts_config
   global issue_1059_hosts

   set job_opts "-b y -pe test.pe 9"
   set job_args "sleep 100000"
   set job_id [submit_job "$job_opts $job_args"]
   if {$job_id <= 0} {
      return
   }

   if {[wait_for_jobstart $job_id "" 10] != 0} {
      return
   }

   if {![issue_1059_check_queue_order]} {
      return
   }
}
