#___INFO__MARK_BEGIN_NEW__
###########################################################################
#  
#  Copyright 2024 HPC-Gridware GmbH
#  
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#  
#      http://www.apache.org/licenses/LICENSE-2.0
#  
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#  
###########################################################################
#___INFO__MARK_END_NEW__


# define global variable in this namespace
global check_name
global check_category
global check_description
global check_needs
global check_functions
global check_root_access_needs
global check_need_running_system
global check_version_range

set check_version_range "9.0.0"

# define test's name and run level descriptions
set check_name            "cs_577"
set check_category        "PARALLEL SCHEDULER VERIFIED"
set check_description(0)  "run jobs requesting a memory resource with the scope switch"

# define test's dependencies
set check_needs           "init_core_system"

# setup and cleanup functions
set check_setup_function cs_577_setup
set check_cleanup_function cs_577_cleanup

# define test's procedure order
set check_functions {}
lappend check_functions "scope_master_issue"
lappend check_functions "scope_slave_issue"

# -------- local test procedures: initialization------------------------------

proc cs_577_setup {} {
   get_current_cluster_config_array ts_config
   global cs_577_hosts cs_577_host_backup cs_577_complex_backup
   global host_config_backup

   # need 3 hosts
   set cs_577_hosts [host_conf_get_suited_hosts 2 {} {} {} 1]

   # need a memory consumable
   get_complex cs_577_complex_backup
   set complex(pmem) "pm MEMORY <= YES YES 0 0"
   set_complex complex

   # set pmem in our test hosts
   foreach host $cs_577_hosts {
      get_exechost backup $host
      set cs_577_host_backup($host) $backup(complex_values)
   }

   set h1 [lindex $cs_577_hosts 0]
   set h2 [lindex $cs_577_hosts 1]

   set eh(complex_values) "pmem=3G,slots=5000"
   set_exechost eh $h1
   set eh(complex_values) "pmem=1G,slots=5000"
   set_exechost eh $h2

   # create a pe and queue
   set pe(slots) 100
   set pe(allocation_rule) 2
   set pe(job_is_first_task) true
   add_pe "test.pe" pe

   set q(slots) 4
   set q(pe_list) "test.pe"
   set q(seq_no) "0,\[$h1=2\],\[$h2=1\]"
   add_queue "test.q" $cs_577_hosts q

   # scheduling on demand
   set sconf(schedule_interval) "0:20:00"
   set sconf(flush_submit_sec) "0"
   set sconf(flush_finish_sec) "0"
   set sconf(schedd_job_info) "true"
   set sconf(queue_sort_method) "seqno"
   set_schedd_config sconf

   # start the long scheduling interval
   trigger_scheduling
}

proc cs_577_cleanup {} {
   get_current_cluster_config_array ts_config
   global cs_577_hosts cs_577_host_backup cs_577_complex_backup

   delete_all_jobs
   wait_for_end_of_all_jobs

   # restore config
   foreach host $cs_577_hosts {
      set eh(complex_values) $cs_577_host_backup($host)
      set_exechost eh $host
   }

   del_queue "test.q" "" 1 1
   del_pe "test.pe"

   reset_complex cs_577_complex_backup
   reset_schedd_config

   unset -nocomplain cs_577_hosts cs_577_host_backup cs_577_complex_backup
}


proc scope_master_issue {} {
   get_current_cluster_config_array ts_config
   global cs_577_hosts

   set job_opts "-b y -pe test.pe 4 -scope master -l pmem=1100M -scope slave -l pmem=100M"
   set job_args "sleep 5"

   set job_id [submit_job "$job_opts $job_args"]
   if {$job_id > 0} {
      trigger_scheduling
      if {[wait_for_jobstart $job_id "" 10 0] != 0} {
         ts_log_severe "job $job_id didn't start, this is GS-17"
      }

      delete_job $job_id 1
   }
}

proc scope_slave_issue {} {
   get_current_cluster_config_array ts_config
   global cs_577_hosts

   set job_opts "-b y -pe test.pe 2 -scope slave -l pmem=1200M"
   set job_args "sleep 5"

   set job_id [submit_job "$job_opts $job_args"]
   if {$job_id > 0} {
      trigger_scheduling
      if {[wait_for_jobstart $job_id "" 10 0] != 0} {
         ts_log_severe "job $job_id didn't start, this is GS-17"
      }

      delete_job $job_id 1
   }
}
