#___INFO__MARK_BEGIN_NEW__
###########################################################################
#  
#  Copyright 2024 HPC-Gridware GmbH
#  
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#  
#      http://www.apache.org/licenses/LICENSE-2.0
#  
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#  
###########################################################################
#___INFO__MARK_END_NEW__

# 4) set check_category
#     - it is a list of categories, e.g.
#        - <FEATURE> like CENTRY, EVENTCLIENT, INSTALL, RSMAP for all tests testing a certain feature
#        - MODULE for module tests
#        - PERFORMANCE for performance tests
#        - <client> like QCONF for all tests verifying the qconf commandline client
#        - VERIFIED for all tests which are known to be OK and which shall be run by default
#     - feel free to create new categories
#     - example: "OBJECT CENTRY QCONF VERIFIED"
#
# 5) set check_needs (e.g.: "init_core_system" this means that this test is not
#    started without successful run of "init_core_system" test
#
# 6) you can add any function name to check_functions (all function (no parameters allowed) are started
#    within each runlevel number
#    PLEASE use ts_log_severe() to submit errors
#    ts_log_severe() is used in many testsuite standard functions, so not every
#    function call must check the return state.
#
# 7) set check_need_running_system != "yes" if you shutdown the qmaster in the setup(level)
#    procedures. This will skip the qmaster alive test before starting test procedures.


# define global variable in this namespace
global check_name
global check_category
global check_description
global check_needs
global check_functions
global check_root_access_needs
global check_need_running_system
global check_version_range

set check_version_range "9.0.0"

# define test's name and run level descriptions
set check_name            "cs_574"
set check_category        "BUG SPOOLING VERIFIED"
set check_description(0)  "verify that CE_doubleval in job requests is correctly set after qmaster restart"

# define test's dependencies
set check_needs           "init_core_system"

# setup and cleanup functions
set check_setup_function cs_574_setup
set check_cleanup_function cs_574_cleanup

# define test's procedure order
set check_functions {}
lappend check_functions "cs_574_test"

# -------- local test procedures: initialization------------------------------

proc cs_574_setup {} {
   get_current_cluster_config_array ts_config
}

proc cs_574_cleanup {} {
   get_current_cluster_config_array ts_config

   delete_all_jobs
   wait_for_end_of_all_jobs
}

proc cs_574_read_requests {job_id output_var} {
   upvar $output_var data

   # now check the job's requests
   set myenv(MORE_INFO) 1
   set output [start_sge_bin "qstat" "-dj" "" "" prg_exit_state 60 "" "bin" output_lines myenv]
   ts_log_fine $output
   foreach line [split $output "\n"] {
      if {[string first "CE_name" $line] >= 0} {
         set name [string trim [lindex [split $line "="] 1]]
      } else {
         set pos [string first "CE_" $line]
         if {$pos >= 0} {
            set end [string first " " $line $pos]
            set variable [string range $line $pos [expr $end - 1]]
            set value [string trim [lindex [split $line "="] 1]]
            #ts_log_fine "$variable = $value"
            set data($name,$variable) $value
         }
      }
   }
   parray data
}

proc cs_574_compare_arrays {array1 array2} {
   upvar $array1 before
   upvar $array2 after

   set errors ""
   foreach key [array names before] {
      if {[info exists after($key)]} {
         if {$before($key) != $after($key)} {
            append errors "key $key: before = $before($key), after = $after($key)\n"
         }
      } else {
         append errors "key $key: after does not exist\n"
      }
   }
   foreach key [array names after] {
      if {![info exists before($key)]} {
         append errors "key $key: before does not exist\n"
      }
   }

   if {$errors != ""} {
      ts_log_severe "job dump had errors, this might be CS-574:\n$errors"
   }
}

proc cs_574_test {} {
   get_current_cluster_config_array ts_config

   # the job does not have to start, we just want to verify its requests
   # therefore use any default complex variables of different types
   set job_opts "-b y -h -pe mytestpe 2"
   append job_opts " -scope global -hard -l h_rt=00:01:00 -soft -l h_vmem=1G"
   append job_opts " -scope master -hard -l display_win_gui=true"
   append job_opts " -scope slave -hard -l m_core=2"
   set job_args "sleep 60"
   set job_id [submit_job "$job_opts $job_args"]
   if {$job_id > 0} {
      # read the values after job submission
      cs_574_read_requests $job_id before_restart
      # with the issue data (CE_doubleval) got lost when re-starting sge_qmaster
      shutdown_and_restart_qmaster
      cs_574_read_requests $job_id after_restart

      # compare arrays
      cs_574_compare_arrays before_restart after_restart

      delete_job $job_id
   }
}
