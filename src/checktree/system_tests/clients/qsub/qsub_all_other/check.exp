#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
#  Portions of this software are Copyright (c) 2011 Univa Corporation.
#
#  Portions of this software are Copyright (c) 2024 HPC-Gridware GmbH
#
##########################################################################
#___INFO__MARK_END__

# Define the global variables to give them back
global check_name check_description check_needs check_functions
global check_category
global ts_config
global check_root_access_needs
set check_root_access_needs "yes"

# set description for each level
set check_description(0)  "check every qsub option"

set check_name         "qsub_all_other"
set check_category     "COMPATIBILITY SYSTEM L10N EVENTCLIENT VERIFIED JENKINS_DISABLED"
set check_needs        "init_core_system"       ;# dependencies of this check (name of other check)

# setup and cleanup functions
set check_setup_function "qsub_setup"
set check_cleanup_function "qsub_cleanup"

# define test's procedure order
set check_functions {}
lappend check_functions "check_submit"
lappend check_functions "qsub_starter_method"
lappend check_functions "check_start_time"
lappend check_functions "check_option_A"
lappend check_functions "check_option_clear"
lappend check_functions "check_option_c"
lappend check_functions "check_option_ckpt"
lappend check_functions "check_option_cwd"
lappend check_functions "check_option_C"
lappend check_functions "check_option_hard"
lappend check_functions "check_option_help"
lappend check_functions "check_option_l"
lappend check_functions "check_option_m"
lappend check_functions "check_option_notify"
lappend check_functions "check_option_now_yes"
lappend check_functions "check_option_now_no"
lappend check_functions "check_option_M"
lappend check_functions "check_option_N"
lappend check_functions "check_option_P"
lappend check_functions "check_option_p"
lappend check_functions "check_option_pe"
lappend check_functions "check_option_q"
lappend check_functions "check_option_r_y"
lappend check_functions "check_option_r_n"
lappend check_functions "check_option_soft"
lappend check_functions "check_option_v"
lappend check_functions "check_option_verify"
lappend check_functions "check_option_V"
lappend check_functions "check_option_@"
lappend check_functions "check_deadline"
lappend check_functions "check_option_terse"
lappend check_functions "qsub_wd"         ;# test the -wd <dir>/-cwd options

proc qsub_setup {} {
   global ts_config
   global CHECK_JOB_OUTPUT_DIR
   global stored_configuration
   global job_output_dir test_host default_args default_q_args default_h_args
   global steps_per_queue size_interval

   # set some global variables
   set num_queues [llength $ts_config(unique_arch_nodes)] 
   set job_output_dir $CHECK_JOB_OUTPUT_DIR

   # run host specific tests on a random host
   set test_host [host_conf_get_suited_hosts]

   # set default jobargs
   set default_args "-o $job_output_dir -e $job_output_dir $ts_config(product_root)/examples/jobs/sleeper.sh 5"
   set qinstance [get_queue_instance "all.q" $test_host]
   set default_q_args "-q $qinstance $default_args"
   set default_h_args "-l h=${test_host} $default_args"

   # backup global config
   get_config stored_configuration
  
   # set config for fast scheduling / fast writing of accounting record
   set my_config(reporting_params) "accounting=true reporting=false flush_time=00:00:01 joblog=true sharelog=00:10:00"
   set_config my_config
}

proc qsub_cleanup {} {
   global ts_config
   global stored_configuration
   global job_output_dir test_host default_args default_q_args default_h_args
   global steps_per_queue size_interval

   set spool_dir [get_spool_dir $ts_config(master_host)  "qmaster"] 
   if {[is_qmaster_alive $ts_config(master_host) $spool_dir] != 1} {
      if {[is_scheduler_alive $ts_config(master_host) $spool_dir] != 1} {
         startup_qmaster 1
      } else {
      startup_qmaster 0
      }
   }

   delete_all_jobs
   wait_for_end_of_all_jobs

   reset_config stored_configuration

   # unset our test global variables
   foreach var "stored_configuration job_output_dir test_host default_args default_q_args default_h_args steps_per_queue size_interval" {
      if {[info exists $var]} {
         unset $var
      }
   }
}

proc qsub_submit_check {jobargs expect_submit_error {user ""} {host ""} {output_files 2}} {
   global ts_config CHECK_FIRST_FOREIGN_SYSTEM_USER
   global job_output_dir

   # default user is the first "foreign" user!
   if {$user == ""} {
      set user $CHECK_FIRST_FOREIGN_SYSTEM_USER
   }

   # default submit host is "any host"
   if {$host == ""} {
      set host [host_conf_get_suited_hosts]
   }

   # if we expect a submit error, submit_job shall not do error checking
   set submit_error_check 1
   if {$expect_submit_error} {
      set submit_error_check 0
   }

   # submit job and evaluate result
   set job_id [submit_job $jobargs $submit_error_check 60 $host $user]
   if {$expect_submit_error} {
      if {$job_id > 0} {
         ts_log_severe "submission of job \"$jobargs\" as user $user on host \"$host\" should have failed"
         delete_job $job_id
      }
      # are done
      return 0
   } else {
      if {$job_id < 0} {
         ts_log_severe "submission of job \"$jobargs\" as user $user on host \"$host\" failed:\nerror $job_id"
         return 0
      }
   }

   # wait for job accounting record and expect 1 or 2 ($output_files) output/error files
   set time [expr [timestamp] + 300] 
   while {[timestamp] < $time}  {
      after 1000
      set back [was_job_running $job_id 0]
      if {$back != -1} {
         set back [del_job_files $job_id $job_output_dir $output_files]
         if {$back != $output_files} {
            ts_log_severe "job $job_id (\"$jobargs\") did not produce error and output file"
            return 0
         } else {
            # job ran through successfully
            return $job_id
         }
      }
   }

   # if we get here, we didn't find an accounting record within reasonable time
   ts_log_severe "timeout waiting for job $job_id (\"$jobargs\")"

   # cleanup
   delete_job $job_id
   del_job_files $job_id $job_output_dir 2
   return 0
}
 
proc check_submit {} {
   global ts_config
   global default_args

   # first clean up output directory:
   setup_output_directory
   
   # submit from every architecture
   foreach host $ts_config(unique_arch_nodes) {
      ts_log_fine "--> submit on host $host"
      qsub_submit_check $default_args 0 "" $host
   }

   # submit to every architecture
   foreach host $ts_config(unique_arch_nodes) {
      ts_log_fine "--> submit to host $host"
      qsub_submit_check "-l h=${host} $default_args" 0
   }
}

proc qsub_starter_method {} {
   global ts_config CHECK_ACTUAL_TEST_PATH
   global job_output_dir test_host
   global default_q_args default_h_args

   set ok 1

   # first clean up output directory:
   setup_output_directory
  
   # set starter method
   set change_array(starter_method) "$CHECK_ACTUAL_TEST_PATH/starter.sh"
   mod_queue all.q "" change_array

   set jobargs $default_q_args
   set result [submit_job $jobargs]

   if {$result < 0} {
      ts_log_severe "could not submit job: $jobargs"
      set ok 0
   }

   # Wait job to run and for end of job
   if {$ok} {
      set back [wait_for_jobstart $result "leeper" 300]
      if {$back != 0} {
         ts_log_severe "job $result doesn't start"
         set ok 0
      }
   }

   # Wait for end of job
   if {$ok} {
      set back [wait_for_jobend $result "leeper" 300 0]
      if {$back != 0} {
         ts_log_severe "job $result doesn't stop"
         set ok 0
      }
   }

   # check output file, should contain output from starter method
   if {$ok} {
      after 2000
      set outfilename "$job_output_dir/Sleeper.o$result"
      ts_log_fine "checking output file $outfilename"

      if {![file exists $outfilename]} {
         ts_log_severe "output file for job $result on host $test_host does not exist"
         set ok 0
      } else {
         set f [open $outfilename r]
         set files_ok 0
         set num_lines 0
         while {[gets $f line] >= 0} {
            incr num_lines
            ts_log_fine $line
               if {[string compare $line "starter method started"] == 0} {
               set files_ok 1
               break
            }
         }
         if {$num_lines == 0} {
            ts_log_severe "error reading from job output file for job $result on host $test_host"
            set ok 0
         } else {
            if {$files_ok == 0} {
               ts_log_severe "starter method was not started for job $result on host $test_host"
               set ok 0
            }
         }  
         close $f
      }
   }

   # cleanup
   set back [del_job_files $result $job_output_dir 2]
   if {$back != 2} {
      ts_log_severe "job $result did not produce error and output file\njobargs: $jobargs"
   }
   if {!$ok && $result > 0} {
      delete_job $result
   }

   # unset starter method
   set change_array(starter_method) "none"
   mod_queue all.q "" change_array
}

proc setup_output_directory {} {
   global ts_config
   global job_output_dir 
   
   if {[string length $job_output_dir] < 5} {
      ts_log_severe "job output dir path must at least have 5 characters\ngot \"$job_output_dir\""
      return -1
   }

   # create directory, if it does not yet exist
   # if it already exists, delete all files in it
   set files_deleted 0
   if {![file isdirectory "$job_output_dir"]} {
      file mkdir "$job_output_dir"
      ts_log_fine "new output directory \"$job_output_dir\" generated!"
   } else {
      ts_log_fine "deleting all files in output directory \"$job_output_dir\"!"
      set files [glob -nocomplain $job_output_dir/*]
      foreach elem $files {
         ts_log_fine $elem
         if {[file isfile $elem] == 1 } {
            ts_log_fine "deleting file $elem"
            incr files_deleted
            delete_file $elem
         }
      }
   }

   # make sure every user may create output files here
   file attributes $job_output_dir -permissions "a+rwx"

   return $files_deleted
}

proc check_start_time {} {
   global ts_config
   global job_output_dir test_host

   # first clean up output directory:  
   setup_output_directory

   set now [clock seconds]
   set then [expr $now + 120]

   set start [clock format $then -format "%Y%m%d%H%M.%S"]

   set jobargs "-a $start -l h=${test_host} -o $job_output_dir -e $job_output_dir $ts_config(product_root)/examples/jobs/sleeper.sh 10"

   set ok 1

   # submit job
   set result [submit_job $jobargs]
   if {$result < 0} {
      ts_log_severe "error submitting job \"$jobargs\"\nerror $result"
   }

   # wait for job to get in pending state
   if {[wait_for_jobpending $result "leeper" 200] != 0} {
      ts_log_severe "job $result is not in pending state"
      set ok 0
   }

   # calulate time until job should run
   if {$ok} {
      set wait_time 10
      ts_log_fine "check_start_time - job should not start the next $wait_time seconds"
      set now [clock seconds]
      if {[wait_for_jobstart $result "leeper" $wait_time 0] != -1} {
         ts_log_severe "check_start_time - job $result should not run until yet"
         set ok 0
      }
   }

   # wait for job to start
   if {$ok} {
      ts_log_fine "check_start_time - ok now the job should start"
      if {[wait_for_jobstart $result "leeper" 300] == -1} {
         ts_log_severe "check_start_time - job $result doesn't start"
         set ok 0
      }
   }
 
   # wait for end of job
   if {$ok} {
      if {[wait_for_jobend $result "leeper" 300 0] == -1} {
         ts_log_severe "check_start_time - job $result doesn't stop"
         set ok 0
      }
   }

   # cleanup
   set back [del_job_files $result $job_output_dir 2]
   if {$back != 2} {
      ts_log_severe "job $result did not produce error and output file\njobargs: $jobargs"
   }
   if {!$ok && $result > 0} {
      delete_job $result
   }
}

proc check_option_A {} {
   global ts_config
   global default_args

   # first clean up output directory:
   setup_output_directory

   # positive tests
   foreach string [valid_job_has_valid_account_string "-A"] {
      set option "-A '$string'"
      set jobargs "$option $default_args"
      set job_id [qsub_submit_check $jobargs 0]

      if {$job_id > 0} {
         get_qacct $job_id
         set acct_string $qacct_info(account)
         if {$acct_string != $string} {
            ts_log_severe "account string requested with -A option missing in accounting record:\nexpected $string, but accounting record contains $acct_string\nfor job $job_id"
         }
      }
   }

   # negative tests
   foreach string [invalid_job_has_valid_account_string "-A"] {
      set option "-A '$string'"
      set jobargs "$option $default_args"
      set job_id [qsub_submit_check $jobargs 1]
   }
}

proc check_option_clear {} {
   global ts_config
   global default_args

   # first clean up output directory:
   setup_output_directory

   set option "-A blahblah -clear"
   set jobargs "$option $default_args"
   set job_id [qsub_submit_check $jobargs 0]

   if {$job_id > 0} {
      get_qacct $job_id
      if {$qacct_info(account) == "blahblah"} {
         ts_log_severe "-clear option didn't earlier -A option"
      }
   }
}

proc check_option_c {} {
   global ts_config
   global default_args

   # first clean up output directory:
   setup_output_directory

   set option "-c n"
   set jobargs "$option $default_args"
   qsub_submit_check $jobargs 0
}

proc check_option_ckpt {} {
   global ts_config
   global default_args

   # first clean up output directory:
   setup_output_directory

   set option "-ckpt testcheckpointobject"
   set jobargs "$option $default_args"
   qsub_submit_check $jobargs 0
}

proc check_option_cwd {} {
   global ts_config
   global default_args

   # first clean up output directory:
   setup_output_directory

   set option "-cwd"
   set jobargs "$option $default_args"
   qsub_submit_check $jobargs 0
}

proc check_option_C {} {
   global ts_config
   global default_args

   # first clean up output directory:
   setup_output_directory

   set option "-C TESTPREFIX"
   set jobargs "$option $default_args"
   qsub_submit_check $jobargs 0
}

proc check_option_hard {} {
   global ts_config
   global default_args

   # first clean up output directory:
   setup_output_directory

   set option "-hard"
   set jobargs "$option $default_args"
   qsub_submit_check $jobargs 0
}

proc check_option_help {} {
   global ts_config
   global default_args

   # first clean up output directory:
   setup_output_directory

   set option "-help"
   set jobargs "$option $default_args"
   qsub_submit_check $jobargs 1
}

proc check_option_l {} {
   global ts_config
   global default_h_args

   # first clean up output directory:
   setup_output_directory

   # the default_h_args contain -l h=...
   set jobargs "$default_h_args"
   qsub_submit_check $jobargs 0
}

proc check_option_m {} {
   global ts_config
   global default_args

   # first clean up output directory:
   setup_output_directory

   set option "-m beas"
   set jobargs "$option $default_args"
   qsub_submit_check $jobargs 0
}

proc check_option_notify {} {
   global ts_config
   global default_args

   # first clean up output directory:
   setup_output_directory

   set option "-notify"
   set jobargs "$option $default_args"
   qsub_submit_check $jobargs 0
}

proc check_option_now_yes {} {
   global ts_config
   global default_args job_output_dir

   # first clean up output directory:
   setup_output_directory

   set option "-now yes"
   set jobargs "$option $default_args"

   for {set i 1} {$i <= 3} {incr i 1} {
      set result [submit_job $jobargs 0]
      if {$result != -6} {
         break
      } else {
         ts_log_info "bugtraq id: 4938859 ->\nqsub -now yes returned job could not be scheduled, try later - error - trying again ... (try $i)"
         ts_log_fine "sleeping 5 sec ..."
         after 5000
      }
   }
 
   ts_log_fine "\njob $result has args: \"$jobargs\""

   if {$result < 0} {
      ts_log_severe "could not submit job\n -> return value of submit_job: $result"
      return
   }

   set time [expr [timestamp] + 300]

   while {[timestamp] < $time} {
      after 1000
      set back [was_job_running $result 0]
      if {$back != -1} {
         set back [del_job_files $result $job_output_dir 2]
         if {$back != 2} {
            ts_log_severe "job $result did not produce error and output file\njobargs: $jobargs"
            return
         } else {
            return
         }
      }
   }
 
   ts_log_severe "timeout while waiting for job accounting"

   # negative test: expect job not to be scheduled
   # disable all queues
   #set result [submit_job $jobargs 0]
   #if {$result != -6} {
   #   ts_log_severe "qsub -now yes should have failed with all queues disabled"
   #}
   # enable all queues
}

proc check_option_now_no {} {
   global ts_config
   global default_args

   # first clean up output directory:
   setup_output_directory

   set option "-now no"
   set jobargs "$option $default_args"
   qsub_submit_check $jobargs 0
}

proc check_option_M {} {
   global ts_config CHECK_REPORT_EMAIL_TO
   global default_args

   # can't run the check, if no email address has been configured
   if {[string compare $CHECK_REPORT_EMAIL_TO "none"] == 0} {
      ts_log_config "no email address configured - can't run qsub -M check"
      return
   }

   # first clean up output directory:
   setup_output_directory

   set option "-M $CHECK_REPORT_EMAIL_TO"
   set jobargs "$option $default_args"
   qsub_submit_check $jobargs 0
}

proc check_option_N {} {
   global ts_config
   global default_args

   # first clean up output directory:
   setup_output_directory

   # positive tests
   foreach string [valid_job_has_valid_account_string "-N"] {
      set option "-N '$string'"
      set jobargs "$option $default_args"
      set job_id [qsub_submit_check $jobargs 0]

      if {$job_id > 0} {
         get_qacct $job_id
         set acct_string $qacct_info(jobname)
         if {$acct_string != $string} {
            ts_log_severe "job name string requested with -N option missing in accounting record:\nexpected $string, but accounting record contains $acct_string\nfor job $job_id"
         }
      }
   }

   # negative tests
   foreach string [invalid_job_has_valid_account_string "-N"] {
      set option "-N '$string'"
      set jobargs "$option $default_args"
      set job_id [qsub_submit_check $jobargs 1]
   }
}

proc check_option_P {} {
   global ts_config
   global default_args

   # first clean up output directory:
   setup_output_directory

   set option "-P mytestproject"
   set jobargs "$option $default_args"
   set job_id [qsub_submit_check $jobargs 0]

   if {$job_id > 0} {
      get_qacct $job_id
      if {$qacct_info(project) != "mytestproject"} {
         ts_log_severe "project specified by -P switch missing in accounting record"
      }
   }
}

proc check_option_p {} {
   global ts_config CHECK_USER CHECK_FIRST_FOREIGN_SYSTEM_USER
   global default_args

   # first clean up output directory:
   setup_output_directory

   # test -p option:
   # any user must be allowed to submit with negative -p
   # only superuser may submit with positive -p

   # set as admin user: complete range
   qsub_submit_check "-p -1023 $default_args" 0 $CHECK_USER ;# IZ 2055
   qsub_submit_check "-p 0 $default_args" 0 $CHECK_USER
   qsub_submit_check "-p 1024 $default_args" 0 $CHECK_USER

   qsub_submit_check "-p -1024 $default_args" 1 $CHECK_USER
   qsub_submit_check "-p 1025 $default_args" 1 $CHECK_USER

   # test as non admin user: only negative .. 0
   qsub_submit_check "-p -100 $default_args" 0 $CHECK_FIRST_FOREIGN_SYSTEM_USER ;# IZ 2055
   qsub_submit_check "-p 0 $default_args" 0 $CHECK_FIRST_FOREIGN_SYSTEM_USER

   # Up to version 6.0, a positive priority from non operators will be silently 
   # set to 0 by qmaster.
   # Beginning with version 6.1, we will reject such jobs.
   qsub_submit_check "-p 1 $default_args" 1 $CHECK_FIRST_FOREIGN_SYSTEM_USER
}

proc check_option_pe {} {
   global ts_config
   global default_args

   # first clean up output directory:
   setup_output_directory

   set option "-pe mytestpe 1-3"
   set jobargs "$option $default_args"
   set job_id [qsub_submit_check $jobargs 0]

   if {$job_id > 0} {
      get_qacct $job_id
      if {$qacct_info(granted_pe) != "mytestpe"} {
         ts_log_severe "granted_pe missing in accounting record"
      }
      if {$qacct_info(slots) != 3} {
         ts_log_severe "slots incorrect in accounting record"
      }
   }
}

proc check_option_q {} {
   global ts_config
   global default_args test_host

   # first clean up output directory:
   setup_output_directory

   # submission to a queue instance (5.3 queue)
   set qinstance [get_queue_instance "all.q" $test_host]
   qsub_submit_check "-q $qinstance $default_args" 0

   # beginning with 6.0, we can also submit
   #  - to a cluster queue
   #  - to all queue instances on a host
   #  - to all qinstances of a hostgroup
   qsub_submit_check "-q *@${test_host} $default_args" 0
   qsub_submit_check "-q *@@allhosts $default_args" 0
}

proc check_option_r_y {} {
   global ts_config
   global default_args

   # first clean up output directory:
   setup_output_directory

   set option "-r y"
   set jobargs "$option $default_args"
   qsub_submit_check $jobargs 0
}

proc check_option_r_n {} {
   global ts_config
   global default_args

   # first clean up output directory:
   setup_output_directory

   set option "-r n"
   set jobargs "$option $default_args"
   qsub_submit_check $jobargs 0
}

proc check_option_soft {} {
   global ts_config
   global default_args

   # first clean up output directory:
   setup_output_directory

   set option "-soft"
   set jobargs "$option $default_args"
   qsub_submit_check $jobargs 0
}

proc check_option_verify {} {
   global ts_config
   global default_args

   # first clean up output directory:
   setup_output_directory

   set option "-verify"
   set jobargs "$option $default_args"

   # cannot use submit_job - it would fail on -verify
   set output [start_sge_bin "qsub" $jobargs]

   # expect certain output:
   set found 0
   foreach line [split $output "\n"] {
      if {[string match "job_number:*unassigned*" $line]} {
         set found 1
         break
      }
   }

   if {!$found} {
      ts_log_severe "no verify output on -verify command:\n$output"
   }
}

proc check_option_V {} {
   global ts_config
   global default_args

   # first clean up output directory:
   setup_output_directory

   set option "-V"
   set jobargs "$option $default_args"
   qsub_submit_check $jobargs 0
}

proc check_option_@ {} {
   global ts_config CHECK_ACTUAL_TEST_PATH
   global default_args

   # first clean up output directory:
   setup_output_directory

   set option "-@ $CHECK_ACTUAL_TEST_PATH/commandfile.txt"
   set jobargs "$option $default_args"
   set result [submit_job $jobargs 0]

   if {$result != -2} {
      ts_log_severe "no help output on -@ commandfile option"
   }
}

proc check_option_v {} {
   global ts_config
   global job_output_dir test_host

   # first clean up output directory:
   setup_output_directory

   set option "-v DISPLAY,test_var1=hello=world,test_var2=hello=my=friend"
   set jobargs "$option -l h=${test_host} -o $job_output_dir -e $job_output_dir $ts_config(product_root)/examples/jobs/sleeper.sh 5"

   set result [submit_job $jobargs 0]
   ts_log_fine "\njob $result has args: \"$jobargs\""

   if {$result < 0} {
      ts_log_severe "could not submit job"
      return
   }

   # check if the environment variables are set correctly in the job object
   set qstat_out [start_sge_bin qstat "-j"]
   if {[string match *DISPLAY*,test_var1=hello=world,test_var2=hello=my=friend* $qstat_out] == -1} {
      ts_log_severe "-v option failed, equal sign within variable values not supported"
   }

   # JG: TODO: instead of starting the example sleeper job, we should output the environment in the job. 
   # Then we could check, if the passed environment variables are really set in the job environment.
   # CR: Don't we have already a test for checking the job environment? We can do this in the job_environment test!

   set time [expr [timestamp] + 300]
   while {[timestamp] < $time} {
      after 1000
      set back [was_job_running $result 0]
      if {$back != -1} {
         set back [del_job_files $result $job_output_dir 2]
         if {$back != 2} {
            ts_log_severe "job $result did not produce error and output file\njobargs: $jobargs"
         }
         return
      }
   }
 
   ts_log_severe "timeout while waiting for job accounting"
}

proc invalid_job_has_valid_account_string {option} {
   set ret {}

   lappend ret "test\ntest"
   lappend ret "test\ttest"
   lappend ret "test\rtest"
   lappend ret "test/test"
   lappend ret "test:test"
   lappend ret "test@test"
   lappend ret "test\\test"
   lappend ret "test*test"
   lappend ret "test?test"

   if {$option == "-N"} {
      lappend ret "1test"
   }

   return $ret
}

proc valid_job_has_valid_account_string {option} {
   set ret {}

   lappend ret "test"
   lappend ret "test test"
   lappend ret "test!test"
   lappend ret "test,test"
   lappend ret "test;test"
   lappend ret "test.test"
   lappend ret "testäöüßtest"
   lappend ret "test=test"
   lappend ret "test%test"
   lappend ret "test|test"
   lappend ret "\"test\""

   if {$option == "-A"} {
      lappend ret "1test"
   }

   return $ret
}

#                                                             max. column:     |
#****** qsub/check_option_terse() ******
# 
#  NAME
#     check_option_terse -- Check to see if the terse option works
#
#  SYNOPSIS
#     check_option_terse { } 
#
#  FUNCTION
#     The function tries to submit a job with -terse option to see if it throws
#     only the job id in case of successfull job submission.
#     It further check to verify if the -terse is working by,
#     -  checks to see if the result of start_sge_bin throws the o/p starting
#       with "Your job", if yes then the option is not working.
#     -  checks to see if the result when passed to get_extended_job_info as
#       job-id gives positive result
#
#  INPUTS
#     NONE
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     qsub -terse sleeper.sh
#
#  NOTES
#     This is for RFE 6355875 
#     "-terse" that would have qsub just display the job number, and none of the
#     '[Yy]our job number...' stuff.
#
#     If there are errors, they should continue to be submitted via stderr.
#
#     Thus, the output of qsub would look like:
#
#     $ qsub -terse -cwd -t 1:5 ./runme.sh
#     1321772.1-5:1
#
#     $ qsub -terse -cwd ./runme.sh
#     1321775
#
#     If the user doesn't specify '-terse' the behaviour should be the same as it is
#     today.
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************

proc check_option_terse {} {
   global ts_config
   global default_args

   ts_log_fine "Testing qsub -terse option"
   set job_args "-o /dev/null -e /dev/null -terse $default_args"
   set output ""
   set not_expected [translate_macro MSG_QSUB_YOURJOBHASBEENSUBMITTED_SS "*" "*"]
   ts_log_fine "Running qsub -terse option: $job_args"
   set output [start_sge_bin "qsub" $job_args]
   # now check if the output contained "Your job ", which means the option is not
   # working
   # Do a second check to see if the job has been submitted, and $output has jobid
   if {$prg_exit_state == 0} {
      if {[string first $not_expected $output] == 0 && [get_extended_job_info $output] == 1} {
         ts_log_severe "not working:\n$output"
      } else {
         ts_log_fine "The -terse is working!!!!\n$output)"
      }
   } else {
      ts_log_severe "qsub $job_args failed:\n$output"
   }
}

proc check_deadline {} {
   global ts_config
   global test_host job_output_dir

   if {$ts_config(product_type) == "sge"} {
      ts_log_config "not possible in sge system"
      return
   }

   # get command option string 
   set then [clock scan "1 minute"]
   set deadline [clock format $then -format "%Y%m%d%H%M.%S"]

   # deadline job (2 min) with deadline in 1 minutes
   set jobargs "-dl $deadline -l h=${test_host} -o $job_output_dir -e $job_output_dir $ts_config(product_root)/examples/jobs/sleeper.sh 120"
   # start job
   set job_id [submit_job $jobargs]
   if {$job_id < 0} {
      ts_log_severe "could not submit job"
      return
   }

   # now job is in queueing system (get timestamp now)
   ts_log_fine "monitoring job $job_id"

   set dlcontr_min 999999999
   set dlcontr_max 0
   while {[get_urgency_job_info ""] == 1 && $job_info(index) == $job_id} {
      set dlcontr $job_info($job_id,dlcontr)
      ts_log_fine "job has deadline $job_info($job_id,deadline), dlcontr $dlcontr"
      if {$dlcontr < $dlcontr_min} {
         set dlcontr_min $dlcontr
      }
      if {$dlcontr > $dlcontr_max} {
         set dlcontr_max $dlcontr
      }
      after 5000
   }

   # now the job is done - delete job files
   set back [del_job_files $job_id $job_output_dir 2]
   if {$back != 2} {
      ts_log_severe "job $job_id did not produce error and output file"
   }

   # and now analyze the deadline policy info
   get_schedd_config schedd_config

   ts_log_fine "minimum dlcontr was $dlcontr_min"
   ts_log_fine "maximum dlcontr was $dlcontr_max"
   ts_log_fine "weight_deadline is  $schedd_config(weight_deadline)"

   if {$dlcontr_min != 0} {
      ts_log_severe "expected a minimum dlcontr of 0, but got $dlcontr_min"
   }
   if {$dlcontr_max != $schedd_config(weight_deadline)} {
      ts_log_severe "expected a maximum dlcontr of $schedd_config(weight_deadline), but got $dlcontr_max"
   }
}

#****** qsub/qsub_wd() ******
#
#  NAME
#     qsub_wd -- test if -wd/-cwd work
#
#  SYNOPSIS
#     qsub_wd { }
#
#*******************************
proc qsub_wd {} {
   global ts_config

   # Set a directory
   set wdir "/tmp"
   set cwdir [pwd]

   # Test1 -wd $wdir
   set jobargs "-h -wd $wdir -o /dev/null -j y $ts_config(product_root)/examples/jobs/sleeper.sh 90"
   set hold_job1 [submit_job $jobargs 1 60 "" "" $cwdir 1]
   get_qstat_j_info $hold_job1
   if {[string compare "$qstat_j_info(cwd)" "$wdir"] != 0} {
      set error_text "qsub did not set the correct working dir(1): $wdir != $qstat_j_info(cwd)\n"
      ts_log_severe $error_text
   }
   delete_job $hold_job1

   # Test2 -cwd
   set jobargs "-h -cwd -o /dev/null -j y $ts_config(product_root)/examples/jobs/sleeper.sh 90"
   set hold_job1 [submit_job $jobargs 1 60 "" "" $cwdir 1]
   get_qstat_j_info $hold_job1
   # we do a string match because of possible automounter prefixes (e.g. /tmp_mnt)
   # cwdir MUST be part of reported working dir (at least from the left side)
   if {![string match "*$cwdir" $qstat_j_info(cwd)]} {
      set error_text "qsub did not set the correct working dir(2): $cwdir != $qstat_j_info(cwd)\n"
      ts_log_severe $error_text
   }
   delete_job $hold_job1

   # Test3 -cwd -wd $wdir
   set jobargs "-h -cwd -wd $wdir -o /dev/null -j y $ts_config(product_root)/examples/jobs/sleeper.sh 90"
   set hold_job1 [submit_job $jobargs 1 60 "" "" $cwdir 1]
   get_qstat_j_info $hold_job1
   if {[string compare "$qstat_j_info(cwd)" "$wdir"] != 0} {
      set error_text "qsub did not set the correct working dir(3): $wdir != $qstat_j_info(cwd)\n"
      ts_log_severe $error_text
   }
   delete_job $hold_job1

   # Test4 -wd $wdir -cwd
   set jobargs "-h -wd $wdir -cwd -o /dev/null -j y $ts_config(product_root)/examples/jobs/sleeper.sh 90"
   set hold_job1 [submit_job $jobargs 1 60 "" "" $cwdir 1]
   get_qstat_j_info $hold_job1

   # we do a string match because of possible automounter prefixes (e.g. /tmp_mnt)
   # cwdir MUST be part of reported working dir (at least from the left side)
   if {![string match "*$cwdir" $qstat_j_info(cwd)]} {
      set error_text "qsub did not set the correct working dir(4): $cwdir != $qstat_j_info(cwd)\n"
      ts_log_severe $error_text
   }
   delete_job $hold_job1
   wait_for_end_of_all_jobs
}
