#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
#  Portions of this software are Copyright (c) 2023-2024 HPC-Gridware GmbH
#
##########################################################################
#___INFO__MARK_END__

# Define the global variables to give them back
global check_name check_description check_needs check_functions
global check_category
global check_root_access_needs
set check_root_access_needs "yes"

set check_name         "qalter"
set check_category     "COMPATIBILITY SYSTEM L10N VERIFIED JENKINS_DISABLED"
set check_description(0)  "check every qalter option"
set check_needs        "init_core_system"       ;# dependencies of this check (name of other check)

# setup and cleanup functions
set check_setup_function "qalter_setup"
set check_cleanup_function "qalter_cleanup"

# define test's procedure order
set check_functions ""
lappend check_functions "run_dummy_jobs"   ;# functions to call (in order)
lappend check_functions "start_testjob"
lappend check_functions "qalter_ac"
lappend check_functions "qalter_A"
lappend check_functions "qalter_c"
lappend check_functions "qalter_ckpt"
lappend check_functions "qalter_cwd"
lappend check_functions "qalter_dc"
lappend check_functions "qalter_e"
lappend check_functions "qalter_hard"
lappend check_functions "qalter_hold"
lappend check_functions "qalter_j"
lappend check_functions "qalter_l"
lappend check_functions "qalter_m"
lappend check_functions "qalter_notify"
lappend check_functions "qalter_M"
lappend check_functions "qalter_N"
lappend check_functions "qalter_o"
lappend check_functions "qalter_P"
lappend check_functions "qalter_p"
lappend check_functions "qalter_pe"
lappend check_functions "qalter_q"
lappend check_functions "qalter_ry"
lappend check_functions "qalter_rn"
lappend check_functions "qalter_sc"
lappend check_functions "qalter_soft"
lappend check_functions "qalter_S"
lappend check_functions "qalter_v"
lappend check_functions "qalter_verify"
lappend check_functions "qalter_V"
lappend check_functions "qalter_w"
lappend check_functions "qalter_a"
lappend check_functions "qalter_IZ_2972"

lappend check_functions "qalter_h"
lappend check_functions "qalter_t"

lappend check_functions "qalter_wd"         ;# test the -wd <dir>/-cwd options
lappend check_functions "qalter_iz_2575"
lappend check_functions "qalter_help"
lappend check_functions "qhold_help"
lappend check_functions "qrls_help"

global submitresult
global normal_job_id
global hold_job_A
global hold_job_B
global hold_job_C
global hold_job_D
global hold_job_T
global hold_job_U
global nonadmin_hold_job
global nonadmin_user

proc qalter_setup {} {
   global CHECK_JOB_OUTPUT_DIR
   global qalter_host qalter_queue
   global qalter_global_config
   global job_output_dir

   set qalter_host  [host_conf_get_suited_hosts]
   set qalter_queue [get_queue_instance "all.q" $qalter_host]

   # allow setting LD_LIBRARY_PATH
   get_config qalter_global_config
   set conf(qmaster_params) "ENABLE_SUBMIT_LIB_PATH=TRUE"
   set_config conf

   set job_output_dir $CHECK_JOB_OUTPUT_DIR
}

proc qalter_cleanup {} {
   global qalter_host qalter_queue
   global qalter_global_config

   delete_all_jobs
   wait_for_end_of_all_jobs

   reset_config qalter_global_config

   unset -nocomplain qalter_host qalter_queue qalter_global_config
}

#                                                             max. column:     |
#****** qalter/run_dummy_jobs() ******
# 
#  NAME
#     run_dummy_jobs -- ??? 
#
#  SYNOPSIS
#     run_dummy_jobs { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc run_dummy_jobs {} {
   global ts_config
   global submitresult
   global hold_job_D hold_job_U
   global normal_job_id hold_job_A hold_job_B hold_job_C hold_job_T
   global ts_user_config nonadmin_user nonadmin_hold_job
   global qalter_queue

   # This jobs has to be long enough to survive the starting of the next jobs
   set submitresult [submit_job "-o /dev/null -e /dev/null -q $qalter_queue $ts_config(product_root)/examples/jobs/sleeper.sh 180"]
   if {$submitresult < 0 } {
      return
   }

   # wait for job to run
   if {[wait_for_jobstart $submitresult "leeper" 200] != 0} {
      ts_log_severe "job $submitresult does not start"
      delete_all_jobs
      return
   }

   set normal_job_id $submitresult 

   set submitresult [submit_job "-h -o /dev/null -e /dev/null -q $qalter_queue $ts_config(product_root)/examples/jobs/sleeper.sh 15"]
   if {$submitresult < 0} {
      return
   }
   
   # wait for job to get in pending state
   if {[wait_for_jobpending $submitresult "leeper" 200] != 0} {
      ts_log_severe "job $submitresult is not in pending state"
      delete_all_jobs
      return 
   }
   set hold_job_A $submitresult

   set submitresult [submit_job "-h -o /dev/null -e /dev/null -q $qalter_queue $ts_config(product_root)/examples/jobs/sleeper.sh 15"]
   if {$submitresult < 0} {
      return
   }
   
   # wait for job to get in pending state
   if {[wait_for_jobpending $submitresult "leeper" 200] != 0} {
      ts_log_severe "job $submitresult is not in pending state"
      delete_all_jobs
      return 
   }
   set hold_job_B $submitresult
    
   set submitresult [submit_job "-h -o /dev/null -e /dev/null -q $qalter_queue $ts_config(product_root)/examples/jobs/sleeper.sh 15 "]
   if {$submitresult < 0} {
      return
   }
   
   # wait for job to get in pending state
   if {[wait_for_jobpending $submitresult "leeper" 200 ] != 0} {
      ts_log_severe "job $submitresult is not in pending state"
      delete_all_jobs
      return 
   }
   set hold_job_C $submitresult
    
   set submitresult [submit_job "-h -o /dev/null -e /dev/null -q $qalter_queue $ts_config(product_root)/examples/jobs/sleeper.sh 15 "]
   if {$submitresult < 0} {
      return
   }
   
   # wait for job to get in pending state
   if {[wait_for_jobpending $submitresult "leeper" 200] != 0} {
      ts_log_severe "job $submitresult is not in pending state"
      delete_all_jobs
      return 
   }
   set hold_job_D $submitresult

   set submitresult [submit_job "-h -t 1-4 -o /dev/null -e /dev/null -q $qalter_queue $ts_config(product_root)/examples/jobs/sleeper.sh 15 "]
   if {$submitresult < 0} {
      return
   }
   
   # wait for job to get in pending state
   if {[wait_for_jobpending $submitresult "leeper" 200] != 0} {
      ts_log_severe "job $submitresult is not in pending state"
      delete_all_jobs
      return 
   }
   set hold_job_T $submitresult

   set submitresult [submit_job "-h -t 1-4 -o /dev/null -e /dev/null -q $qalter_queue $ts_config(product_root)/examples/jobs/sleeper.sh 15 "]
   if {$submitresult < 0} {
      return
   }
   
   # wait for job to get in pending state
   if {[wait_for_jobpending $submitresult "leeper" 200 ] != 0} {
      ts_log_severe "job $submitresult is not in pending state"
      delete_all_jobs
      return 
   }
   set hold_job_U $submitresult
   
   #  Submit a job as not admin user
   set nonadmin_user $ts_user_config(first_foreign_user)
   
   set submitresult [submit_job "-h -t 1-4 -o /dev/null -e /dev/null -q $qalter_queue $ts_config(product_root)/examples/jobs/sleeper.sh 15 " 1  60 "" $nonadmin_user]
   if {$submitresult < 0} {
      return
   }
   
   # wait for job to get in pending state
   if {[wait_for_jobpending $submitresult "leeper" 200] != 0} {
      ts_log_severe "job $submitresult is not in pending state"
      delete_all_jobs
      return 
   }
   set nonadmin_hold_job $submitresult

   # Restore submitresult for legacy tests
   set submitresult $normal_job_id
}

#                                                             max. column:     |
#****** qalter/start_testjob() ******
# 
#  NAME
#     start_testjob -- ??? 
#
#  SYNOPSIS
#     start_testjob { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc start_testjob {} {
   global ts_config
   global submitresult
   global job_output_dir
   global CHECK_ACTUAL_TEST_PATH CHECK_USER
   global qalter_queue

   set submitresult [submit_job "-h -q $qalter_queue -e $job_output_dir -o $job_output_dir $ts_config(product_root)/examples/jobs/sleeper.sh 15"]
   if {$submitresult < 0} {
      return
   }
   # wait for job to get in pending state 
   if {[wait_for_jobpending $submitresult "leeper" 200] != 0} {
      ts_log_severe "job $submitresult is not in pending state"
      delete_all_jobs
      return 
   }
}

#                                                             max. column:     |
#****** qalter/qalter_ac() ******
# 
#  NAME
#     qalter_ac -- ??? 
#
#  SYNOPSIS
#     qalter_ac { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc qalter_ac {} {
   global ts_config normal_job_id

   set option "-ac myvar=test -ac myvar2=\\\'test2a,test2b\\\' -ac myvar3=\\\"test3a,test3b\\\""

   set qalteroutput [start_sge_bin "qalter" "$option $normal_job_id"]
   if {$prg_exit_state != 0} {
      ts_log_severe "qalter $option - $qalteroutput"
      return
   }

   set qstatoutput [start_sge_bin "qstat" "-j $normal_job_id"]
   if {$prg_exit_state != 0} {
      ts_log_severe "qalter $option - qstat error:\n$qstatoutput"
      return
   }

   if {[regexp {context:[ \t]+([^ \t\r\n]+)\r\n} $qstatoutput context vars] != 1} {
      ts_log_severe "qalter $option - qalter error: context variables were not set (1)"
      return
   }

   if {$vars != "myvar=test,myvar2='test2a,test2b',myvar3=\"test3a,test3b\""} {
      ts_log_severe "qalter $option - qalter error: context variables incorrect: $vars"
      return
   }
}

#                                                             max. column:     |
#****** qalter/qalter_A() ******
# 
#  NAME
#     qalter_A -- ??? 
#
#  SYNOPSIS
#     qalter_A { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc qalter_A {} {
   global ts_config
   global submitresult

   set option "-A blahblah"
   set qalteroutput [start_sge_bin "qalter" "$option $submitresult"]
   if {$prg_exit_state != 0} {
      ts_log_severe "qalter $option failed:\n$qalteroutput"
      return
   }
}

#                                                             max. column:     |
#****** qalter/qalter_c() ******
# 
#  NAME
#     qalter_c -- ??? 
#
#  SYNOPSIS
#     qalter_c { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc qalter_c {} {
   global ts_config
   global submitresult

   set option "-c n -ckpt testcheckpointobject"
   set qalteroutput [start_sge_bin "qalter" "$option $submitresult"]
   if {$prg_exit_state != 0} {
      ts_log_severe "qalter $option failed:\n$qalteroutput"
      return
   }
}

#                                                             max. column:     |
#****** qalter/qalter_ckpt() ******
# 
#  NAME
#     qalter_ckpt -- ??? 
#
#  SYNOPSIS
#     qalter_ckpt { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc qalter_ckpt {} {
   global ts_config
   global submitresult

   set option "-ckpt testcheckpointobject"
   set qalteroutput [start_sge_bin "qalter" "$option $submitresult"]
   if {$prg_exit_state != 0} {
      ts_log_severe "qalter $option failed:\n$qalteroutput"
      return
   }
}

#                                                             max. column:     |
#****** qalter/qalter_clear() ******
# 
#  NAME
#     qalter_clear -- ??? 
#
#  SYNOPSIS
#     qalter_clear { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc qalter_clear {} {
   global ts_config
   global submitresult

   set option "-clear"
   set qalteroutput [start_sge_bin "qalter" "$option $submitresult"]
   if {$prg_exit_state != 0} {
      ts_log_severe "qalter $option failed:\n$qalteroutput"
      return
   }
}

#                                                             max. column:     |
#****** qalter/qalter_cwd() ******
# 
#  NAME
#     qalter_cwd -- ??? 
#
#  SYNOPSIS
#     qalter_cwd { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc qalter_cwd {} {
   global ts_config
   global submitresult

   set option "-cwd"
   set qalteroutput [start_sge_bin "qalter" "$option $submitresult"]
   if {$prg_exit_state != 0} {
      ts_log_severe "qalter $option failed:\n$qalteroutput"
      return
   }
}

#                                                             max. column:     |
#****** qalter/qalter_dc() ******
# 
#  NAME
#     qalter_dc -- ??? 
#
#  SYNOPSIS
#     qalter_dc { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc qalter_dc {} {
   global ts_config
   global normal_job_id

   # Test delete with double-quoted list
   set option "-dc myvar3"
   set qalteroutput [start_sge_bin "qalter" "$option $normal_job_id"]
   if {$prg_exit_state != 0} {
      ts_log_severe "qalter $option failed:\n$qalteroutput"
      return
   }

   set qstatoutput [start_sge_bin "qstat" "-j $normal_job_id"]
   if {$prg_exit_state != 0} {
      ts_log_severe "qalter $option - qstat error:\n$qstatoutput"
      return
   }

   if {[regexp {context:[ \t]+([^ \t\r\n]+)\r\n} $qstatoutput context vars] != 1} {
      ts_log_severe "qalter $option - qalter error: context variables were not set (2)"
      return
   }

   if {$vars != "myvar=test,myvar2='test2a,test2b'"} {
      ts_log_severe "qalter $option - qalter error: context variables incorrect: $vars"
      return
   }

   # Test delete with single-quoted list
   set option "-dc myvar2"
   set qalteroutput [start_sge_bin "qalter" "$option $normal_job_id"]
   if {$prg_exit_state != 0} {
      ts_log_severe "qalter $option failed:\n$qalteroutput"
      return
   }

   set qstatoutput [start_sge_bin "qstat" "-j $normal_job_id"]
   if {$prg_exit_state != 0} {
      ts_log_severe "qalter $option - qstat error:\n$qstatoutput"
      return
   }

   if {[regexp {context:[ \t]+([^ \t\r\n]+)\r\n} $qstatoutput context vars] != 1} {
      ts_log_severe "qalter $option - qalter error: context variables were not set (3)"
      return
   }

   if {$vars != "myvar=test"} {
      ts_log_severe "qalter $option - qalter error: context variables incorrect: $vars"
      return
   }

   # Test delete without quotes
   set option "-dc myvar"
   set qalteroutput [start_sge_bin "qalter" "$option $normal_job_id"]
   if {$prg_exit_state != 0} {
      ts_log_severe "qalter $option failed:\n$qalteroutput"
      return
   }

   set qstatoutput [start_sge_bin "qstat" "-j $normal_job_id"]
   if {$prg_exit_state != 0} {
      ts_log_severe "qalter $option - qstat error:\n$qstatoutput"
      return
   }

   if {[regexp {context:[ \t]+([^ \t\r\n]+)\r\n} $qstatoutput context vars] == 1} {
      ts_log_severe "qalter $option - qalter error: context variables were not deleted"
      return
   }
}

#                                                             max. column:     |
#****** qalter/qalter_e() ******
# 
#  NAME
#     qalter_e -- ??? 
#
#  SYNOPSIS
#     qalter_e { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc qalter_e {} {
   global ts_config
   global submitresult job_output_dir

   set option "-e $job_output_dir"
   set qalteroutput [start_sge_bin "qalter" "$option $submitresult"]
   if {$prg_exit_state != 0} {
      ts_log_severe "qalter $option failed:\n$qalteroutput"
      return
   }
}

#                                                             max. column:     |
#****** qalter/qalter_hard() ******
# 
#  NAME
#     qalter_hard -- ??? 
#
#  SYNOPSIS
#     qalter_hard { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc qalter_hard {} {
   global ts_config
   global submitresult qalter_queue

   set option "-hard -q $qalter_queue"
   ts_log_fine "calling: qalter $option $submitresult"
   set qalteroutput [start_sge_bin "qalter" "$option $submitresult"]
   if {$prg_exit_state != 0} {
      ts_log_severe "qalter $option failed:\n$qalteroutput"
      return
   }
}

#                                                             max. column:     |
#****** qalter/qalter_hold() ******
# 
#  NAME
#     qalter_hold -- ??? 
#
#  SYNOPSIS
#     qalter_hold { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc qalter_hold {} {
   global ts_config
   global submitresult normal_job_id hold_job_A hold_job_B hold_job_C 
  
   set option "-hold_jid $normal_job_id,$hold_job_B,$hold_job_C,[expr $hold_job_C + 1000]"
   ts_log_fine "calling: qalter $option $hold_job_A"
   set qalteroutput [start_sge_bin "qalter" "$option $hold_job_A"]
   if {$prg_exit_state != 0} {
      ts_log_severe "qalter $option failed:\n$qalteroutput"
      return
   }

   if {[release_job $hold_job_A] != 0} {
      ts_log_severe "could not release job $hold_job_A"
      return
   }

   # wait for job to run
   if {[wait_for_jobstart $hold_job_A "leeper" 200 0] != -1} {
      ts_log_severe "job $hold_job_A should not start yet"
      delete_all_jobs
      return 
   }

   # release job B 
   if {[release_job $hold_job_B] != 0} {
      ts_log_severe "could not release job $hold_job_B"
      return
   }

   # release job C
   if {[release_job $hold_job_C] != 0} {
      ts_log_severe "could not release job $hold_job_C"
      return
   }

   # wait for job A to run 
   if {[wait_for_jobstart $hold_job_A "leeper" 200] != 0} {
      ts_log_severe "job $hold_job_A does not run"
      delete_all_jobs
      return 
   }
}

#                                                             max. column:     |
#****** qalter/qalter_j() ******
# 
#  NAME
#     qalter_j -- ??? 
#
#  SYNOPSIS
#     qalter_j { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc qalter_j {} {
   global ts_config
   global submitresult

   set option "-j y"
   set qalteroutput [start_sge_bin "qalter" "$option $submitresult"]
   if {$prg_exit_state != 0} {
      ts_log_severe "qalter $option failed:\n$qalteroutput"
      return
   }
}

#                                                             max. column:     |
#****** qalter/qalter_l() ******
# 
#  NAME
#     qalter_l -- ??? 
#
#  SYNOPSIS
#     qalter_l { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc qalter_l {} {
   global ts_config
   global submitresult qalter_host

   set option "-l h=$qalter_host"
   set qalteroutput [start_sge_bin "qalter" "$option $submitresult"]
   if {$prg_exit_state != 0} {
      ts_log_severe "qalter $option failed:\n$qalteroutput"
      return
   }
}

#                                                             max. column:     |
#****** qalter/qalter_m() ******
# 
#  NAME
#     qalter_m -- ??? 
#
#  SYNOPSIS
#     qalter_m { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc qalter_m {} {
   global ts_config
   global submitresult

   set option "-m beas"
   set qalteroutput [start_sge_bin "qalter" "$option $submitresult"]
   if {$prg_exit_state != 0} {
      ts_log_severe "qalter $option failed:\n$qalteroutput"
      return
   }
}

#                                                             max. column:     |
#****** qalter/qalter_notify() ******
# 
#  NAME
#     qalter_notify -- ??? 
#
#  SYNOPSIS
#     qalter_notify { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc qalter_notify {} {
   global ts_config
   global submitresult

   set option "-notify"
   set qalteroutput [start_sge_bin "qalter" "$option $submitresult"]
   if {$prg_exit_state != 0} {
      ts_log_severe "qalter $option failed:\n$qalteroutput"
      return
   }
}

#                                                             max. column:     |
#****** qalter/qalter_M() ******
# 
#  NAME
#     qalter_M -- ??? 
#
#  SYNOPSIS
#     qalter_M { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc qalter_M {} {
   global ts_config CHECK_REPORT_EMAIL_TO
   global submitresult

   if {[string compare $CHECK_REPORT_EMAIL_TO "none"] == 0} {
      ts_log_severe "no email address specified"  
      return
   }

   set option "-M $CHECK_REPORT_EMAIL_TO"
   set qalteroutput [start_sge_bin "qalter" "$option $submitresult"]
   if {$prg_exit_state != 0} {
      ts_log_severe "qalter $option failed:\n$qalteroutput"
      return
   }
}

#                                                             max. column:     |
#****** qalter/qalter_N() ******
# 
#  NAME
#     qalter_N -- ??? 
#
#  SYNOPSIS
#     qalter_N { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc qalter_N {} {
   global ts_config
   global submitresult

   set option "-N Sleeper_job"
   set qalteroutput [start_sge_bin "qalter" "$option $submitresult"]
   if {$prg_exit_state != 0} {
      ts_log_severe "qalter $option failed:\n$qalteroutput"
      return
   }
}

#                                                             max. column:     |
#****** qalter/qalter_o() ******
# 
#  NAME
#     qalter_o -- ??? 
#
#  SYNOPSIS
#     qalter_o { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc qalter_o {} {
   global ts_config
   global submitresult job_output_dir

   set option "-o $job_output_dir"
   set qalteroutput [start_sge_bin "qalter" "$option $submitresult"]
   if {$prg_exit_state != 0} {
      ts_log_severe "qalter $option failed:\n$qalteroutput"
      return
   }
}

#                                                             max. column:     |
#****** qalter/qalter_P() ******
# 
#  NAME
#     qalter_P -- ??? 
#
#  SYNOPSIS
#     qalter_P { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc qalter_P {} {
   global ts_config
   global submitresult

   set option "-P mytestproject"
   if {[string compare $ts_config(product_type) "sgeee"] == 0} {
      set qalteroutput [start_sge_bin "qalter" "$option $submitresult"]
      if {$prg_exit_state != 0} {
         ts_log_severe "qalter $option failed:\n$qalteroutput"
         return
      }
   } else {
      # not possible for sge systems!
      ts_log_config "qalter $option - not possible for sge system"
      return
   }
}

#                                                             max. column:     |
#****** qalter/qalter_p() ******
# 
#  NAME
#     qalter_p -- ??? 
#
#  SYNOPSIS
#     qalter_p { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc qalter_p {} {
   global ts_config
   global submitresult

   set option "-p 1024"
   set qalteroutput [start_sge_bin "qalter" "$option $submitresult"]
   if {$prg_exit_state != 0} {
      ts_log_severe "qalter $option failed:\n$qalteroutput"
      return
   }
}

#                                                             max. column:     |
#****** qalter/qalter_pe() ******
# 
#  NAME
#     qalter_pe -- ??? 
#
#  SYNOPSIS
#     qalter_pe { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc qalter_pe {} {
   global ts_config
   global submitresult

   set option "-pe mytestpe 1-3"
   set qalteroutput [start_sge_bin "qalter" "$option $submitresult"]
   if {$prg_exit_state != 0} {
      ts_log_severe "qalter $option failed:\n$qalteroutput"
      return
   }
}

#                                                             max. column:     |
#****** qalter/qalter_q() ******
# 
#  NAME
#     qalter_q -- ??? 
#
#  SYNOPSIS
#     qalter_q { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc qalter_q {} {
   global ts_config
   global submitresult qalter_queue

   set option "-q $qalter_queue"
   set qalteroutput [start_sge_bin "qalter" "$option $submitresult"]
   if {$prg_exit_state != 0} {
      ts_log_severe "qalter $option failed:\n$qalteroutput"
      return
   }
}

#                                                             max. column:     |
#****** qalter/qalter_ry() ******
# 
#  NAME
#     qalter_ry -- ??? 
#
#  SYNOPSIS
#     qalter_ry { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc qalter_ry {} {
   global ts_config
   global submitresult

   set option "-r y"
   set qalteroutput [start_sge_bin "qalter" "$option $submitresult"]
   if {$prg_exit_state != 0} {
      ts_log_severe "qalter $option failed:\n$qalteroutput"
      return
   }
}

#                                                             max. column:     |
#****** qalter/qalter_rn() ******
# 
#  NAME
#     qalter_rn -- ??? 
#
#  SYNOPSIS
#     qalter_rn { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc qalter_rn {} {
   global ts_config
   global submitresult

   set option "-r n"
   set qalteroutput [start_sge_bin "qalter" "$option $submitresult"]
   if {$prg_exit_state != 0} {
      ts_log_severe "qalter $option failed:\n$qalteroutput"
      return
   }
}

#                                                             max. column:     |
#****** qalter/qalter_sc() ******
# 
#  NAME
#     qalter_sc -- ??? 
#
#  SYNOPSIS
#     qalter_sc { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc qalter_sc {} {
   global ts_config
   global hold_job_D

   set option "-ac myvar=test4 -sc myvar=test,myvar2=\\\'test2a,test2b\\\',myvar3=\\\"test3a,test3b\\\""
   # At this point, hold_job_D is the only single job still hanging around
   set qalteroutput [start_sge_bin "qalter" "$option $hold_job_D"]
   if {$prg_exit_state != 0} {
      ts_log_severe "qalter $option failed:\n$qalteroutput"
      return
   }

   set qstatoutput [start_sge_bin "qstat" "-j $hold_job_D"]
   if {$prg_exit_state != 0} {
      ts_log_severe "qalter $option - qstat error:\n$qstatoutput"
      return
   }

   if {[regexp {context:[ \t]+([^ \t\r\n]+)\r\n} $qstatoutput context vars] != 1} {
      ts_log_severe "qalter $option - qalter error: context variables were not set (4)"
      return
   }

   if {$vars != "myvar=test,myvar2='test2a,test2b',myvar3=\"test3a,test3b\""} {
      ts_log_severe "qalter $option - qalter error: context variables incorrect: $vars"
      return
   }
}

#                                                             max. column:     |
#****** qalter/qalter_soft() ******
# 
#  NAME
#     qalter_soft -- ??? 
#
#  SYNOPSIS
#     qalter_soft { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc qalter_soft {} {
   global ts_config
   global submitresult qalter_queue

   set option "-soft -q $qalter_queue"
   set qalteroutput [start_sge_bin "qalter" "$option $submitresult"]
   if {$prg_exit_state != 0} {
      ts_log_severe "qalter $option failed:\n$qalteroutput"
      return
   }
}

#                                                             max. column:     |
#****** qalter/qalter_S() ******
# 
#  NAME
#     qalter_S -- ??? 
#
#  SYNOPSIS
#     qalter_S { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc qalter_S {} {
   global ts_config
   global submitresult

   set option "-S /bin/sh"
   set qalteroutput [start_sge_bin "qalter" "$option $submitresult"]
   if {$prg_exit_state != 0} {
      ts_log_severe "qalter $option failed:\n$qalteroutput"
      return
   }
}

#                                                             max. column:     |
#****** qalter/qalter_v() ******
# 
#  NAME
#     qalter_v -- ??? 
#
#  SYNOPSIS
#     qalter_v { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc qalter_v {} {
   global ts_config
   global submitresult

   set option "-v DISPLAY"
   set qalteroutput [start_sge_bin "qalter" "$option $submitresult"]
   if {$prg_exit_state != 0} {
      ts_log_severe "qalter $option failed:\n$qalteroutput"
      return
   }
}

#                                                             max. column:     |
#****** qalter/qalter_verify() ******
# 
#  NAME
#     qalter_verify -- ??? 
#
#  SYNOPSIS
#     qalter_verify { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc qalter_verify {} {
   global ts_config
   global submitresult

   set option "-verify"
   set qalteroutput [start_sge_bin "qalter" "$option $submitresult"]
   if {$prg_exit_state != 0} {
      ts_log_severe "qalter $option failed:\n$qalteroutput"
      return
   }
}

#                                                             max. column:     |
#****** qalter/qalter_V() ******
# 
#  NAME
#     qalter_V -- ??? 
#
#  SYNOPSIS
#     qalter_V { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc qalter_V {} {
   global ts_config
   global submitresult

   set option "-V"
   set qalteroutput [start_sge_bin "qalter" "$option $submitresult"]
   if {$prg_exit_state != 0} {
      ts_log_severe "qalter $option failed:\n$qalteroutput"
      return
   }
}

#                                                             max. column:     |
#****** qalter/qalter_w() ******
# 
#  NAME
#     qalter_w -- ??? 
#
#  SYNOPSIS
#     qalter_w { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc qalter_w {} {
   global ts_config
   global submitresult qalter_queue

   set option "-w e -q $qalter_queue"
   set qalteroutput [start_sge_bin "qalter" "$option $submitresult"]
   if {$prg_exit_state != 0} {
      ts_log_severe "qalter $option failed:\n$qalteroutput"
      return
   }
}

#                                                             max. column:     |
#****** qalter/qalter_a() ******
# 
#  NAME
#     qalter_a -- ??? 
#
#  SYNOPSIS
#     qalter_a { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc qalter_a {} {
   global ts_config
   global submitresult job_output_dir qalter_queue

   set job_id [submit_job "-h -q $qalter_queue -e $job_output_dir -o $job_output_dir $ts_config(product_root)/examples/jobs/sleeper.sh 15"]

   if {$job_id < 0} {
     del_job_files $job_id $job_output_dir 2
     return
   }

   set now [clock seconds]
   set then [expr $now + 120]
   set start [clock format $then -format "%Y%m%d%H%M.%S"]

   set option "-a $start"

   ts_log_fine "$option $job_id"
   set qalteroutput [start_sge_bin "qalter" "$option $job_id"]
   if {$prg_exit_state != 0} {
     ts_log_severe "qalter $option failed - couldn't change starttime:\n$qalteroutput"
     delete_job $job_id
     return
   }
   
   #Release job
   ts_log_fine "will qrls $job_id now ..."
   set qrlsoutput [start_sge_bin "qrls" "$job_id"]
   ts_log_fine "qrls result is $prg_exit_state"
   ts_log_fine "qrls output is $qrlsoutput"

   # calulate time until job should run
   set wait_time 100
   ts_log_fine "qalter $option - job should not start the next $wait_time seconds"
   if {[wait_for_jobstart $job_id "leeper" $wait_time 0] != -1} {
      ts_log_severe "qalter $option - job should not run until yet"
      delete_all_jobs
      return 
   } 

   # wait for job to start
   ts_log_fine "qalter $option - ok now the job should start"
   if {[wait_for_jobstart $job_id "leeper" 60 1 1] == -1} {
      ts_log_severe "qalter $option - job doesn't start"
      del_job_files $job_id $job_output_dir 2
      return 
   } 
 
   # wait for end of job
   if {[wait_for_jobend $job_id "leeper" 300 0] == -1} {
      ts_log_severe "qalter $option - job doesn't stop"
      del_job_files $job_id $job_output_dir 2
      return 
   } 
  
   set back [del_job_files $job_id $job_output_dir 2]
   if {$back != 2} {
      ts_log_severe "qalter $option - can't delete Jobfile $job_id"
   }
}

#                                                             max. column:     |
#****** qalter/qalter_IZ_2972() ******
# 
#  NAME
#     qalter_IZ_2972 -- testing qalter -h U 
#
#  SYNOPSIS
#     qalter_IZ_2972 { } 
#
#  FUNCTION
#     testing qalter -h U option. removing hold from
#     job using job name eg: qalter -h U <job_name> 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc qalter_IZ_2972 {} {
   global ts_config
   global submitresult qalter_queue job_output_dir 

   set submitresult [submit_job "-h -q $qalter_queue -N qalter_test_job -e $job_output_dir -o $job_output_dir $ts_config(product_root)/examples/jobs/sleeper.sh 15"]

   set option "-h U qalter_test_job"
   set qalteroutput [start_sge_bin "qalter" "$option $submitresult"]
   if {$prg_exit_state != 0} {
      ts_log_severe "qalter $option failed:\n$qalteroutput"
   }
}

proc qalter_h {} {
   global ts_config submitresult
   global hold_job_D hold_job_U
   global CHECK_ACTUAL_TEST_PATH CHECK_USER
   global nonadmin_user nonadmin_hold_job

   set option "-h n"
   set qalteroutput [start_sge_bin "qalter" "$option $hold_job_D $hold_job_U.1-4"]
   if {$prg_exit_state != 0} {
      ts_log_severe "qalter $option failed:\n$qalteroutput"
      return
   }

   #
   # Set a user hold as nonadmin user
   #
   set option       "-h u"
   ts_log_fine "set user hold as non admin user $nonadmin_user for job $nonadmin_hold_job"
   set qalterresult [start_sge_bin "qhold" "$option $nonadmin_hold_job" $ts_config(master_host) $nonadmin_user]
   if {$prg_exit_state != 0} {
      ts_log_severe "qhold $option as non admin user failed:\n$qalterresult"
      return
   }

   #
   # Remove a user hold as nonadmin user
   #
   set option       "-h u"
   ts_log_fine "release user hold as non admin user $nonadmin_user for job $nonadmin_hold_job"
   set qalterresult [start_sge_bin "qrls" "$option $nonadmin_hold_job" $ts_config(master_host) $nonadmin_user]
   if {$prg_exit_state != 0} {
      ts_log_severe "qrls $option as non admin user failed:\n$qalterresult"
      return
   }

   #
   # Negativ test
   # Set an operator hold as nonadmin user
   #
   set option       "-h o"
   ts_log_fine "set operator hold as user $nonadmin_user for job $nonadmin_hold_job"
   set qalterresult [start_sge_bin "qhold" "$option $nonadmin_hold_job" $ts_config(master_host) $nonadmin_user]
   if {$prg_exit_state == 0} {
      ts_log_severe "illegal set of operator hold as non admin user succeeded (qhold $option):\n$qalterresult"
      return
   }

   #
   # Negativ test
   # Set an system hold as nonadmin user
   #
   set option       "-h s"
   ts_log_fine "set system hold as non admin user $nonadmin_user for job $nonadmin_hold_job"
   set qalterresult [start_sge_bin "qhold" "$option $nonadmin_hold_job" $ts_config(master_host) $nonadmin_user]
   if {$prg_exit_state == 0} {
      ts_log_severe "illegal set of system hold as non admin user succeeded (qhold $option):\n$qalterresult"
      return
   }

   #
   # Set an system hold as admin user
   #
   set option       "-h s"
   ts_log_fine "set system hold as admin user $CHECK_USER for job $nonadmin_hold_job"
   set qalteroutput [start_sge_bin "qhold" "$option $nonadmin_hold_job"]
   if {$prg_exit_state != 0} {
      ts_log_severe "system hold as admin user failed (qhold $option):\n$qalteroutput"
      return
   }

   #
   # Negativ test
   # Remove an system hold as nonadmin user
   #
   set option       "-h s"
   ts_log_fine "release system hold as non admin user $nonadmin_user for job $nonadmin_hold_job"
   set qalterresult [ start_sge_bin "qrls" "$option $nonadmin_hold_job" $ts_config(master_host) $nonadmin_user]
   if { $prg_exit_state == 0 } {
      ts_log_severe "illegal remove of system hold as non admin user succeeded (qhold $option)"
      return
   }

   #
   # Set an operator hold as admin user
   #
   set option       "-h o"
   ts_log_fine "set operator hold as admin user $CHECK_USER for job $nonadmin_hold_job"
   set qalteroutput [start_sge_bin "qhold" "$option $nonadmin_hold_job"]
   if {$prg_exit_state != 0} {
      ts_log_severe "system hold as admin user failed (qhold $option):\n$qalteroutput"
      return
   }

   #
   # Negativ test
   # Remove an operator hold as nonadmin user
   #
   set option       "-h o"
   ts_log_fine "release operator hold as non admin user $nonadmin_user for job $nonadmin_hold_job"
   set qalterresult [start_sge_bin "qrls" "$option $nonadmin_hold_job" $ts_config(master_host) $nonadmin_user]
   if {$prg_exit_state == 0} {
      ts_log_severe "illegal remove of operator hold as non admin user succeeded (qhold $option):\n$qalterresult"
      return
   }
}

proc qalter_t {} {
   global ts_config
   global submitresult
   global hold_job_T
   global CHECK_ACTUAL_TEST_PATH CHECK_USER

   set option "-h n"
   set qalteroutput [start_sge_bin "qalter" "$option $hold_job_T -t 1-4"]
   if {$prg_exit_state != 0} {
      ts_log_severe "qalter $option failed:\n$qalteroutput"
      return
   }

   # Test invalid uses
   set qalteroutput [start_sge_bin "qalter" "$option $hold_job_T -t 1-4 -t 1-4"]
   if {$prg_exit_state == 0} {
      ts_log_severe "qalter $option - allowed invalid -t switch:\n$qalteroutput"
      return
   }

   set qalteroutput [start_sge_bin "qalter" "$option -t 1-4 $hold_job_T -t 1-4"]
   if {$prg_exit_state == 0} {
      ts_log_severe "qalter $option - allowed invalid -t switch\n$qalteroutput"
      return
   }
}

#****** qalter/qalter_wd() ******
#
#  NAME
#     qalter_wd -- test if -wd/-cwd work
#
#  SYNOPSIS
#     qalter_wd { }
#
#*******************************
proc qalter_wd {} {
   global ts_config

   ts_log_fine "check if -wd/-cwd is set correctly"

   # Set a directory
   set wdir "/tmp"
   set cwdir [pwd]

   # Test1 qsub -cwd -h $SGE_ROOT/examples/jobs/sleeper.sh
   set jobargs "-cwd -h -o /dev/null -j y $ts_config(product_root)/examples/jobs/sleeper.sh"
   set hold_job1 [submit_job $jobargs 1 60 "" "" $cwdir 1]
   get_qstat_j_info $hold_job1
   if {[string compare "$qstat_j_info(cwd)" "$cwdir"] != 0} {
      set error_text "qsub did not set the correct working dir: $cwdir != $qstat_j_info(cwd)"
      ts_log_severe $error_text
   }
   set result1 [start_sge_bin qalter "-wd $wdir $hold_job1"]
   get_qstat_j_info $hold_job1
   if {[string compare "$qstat_j_info(cwd)" "$wdir"] != 0} {
      set error_text "qalter did not set the correct working dir: $wdir != $qstat_j_info(cwd)"
      ts_log_severe $error_text
   }
   delete_job $hold_job1 1
}

#****** qalter/qalter_iz_2575() ******
#
#  NAME
#     qalter_iz_2575 -- test if iz 2575 is present
#
#  SYNOPSIS
#     qalter_iz_2575 { }
#
#  FUNCTION
#     Calls qalter -q "" <job_id>.
#     Check for correct output, may not contain invalid queue name"
#*******************************
proc qalter_iz_2575 {} {
   global ts_config
   set job_id [submit_job "-h -q all.q $ts_config(product_root)/examples/jobs/sleeper.sh"]
   if {$job_id <= 0} {
      # error has been raised already in submit_job
      return
   }

   # this is the message we expect
   set expected [translate_macro MSG_PARSE_WRONGDESTIDLISTFORMATXSPECTOXOPTION_SS "XXXXX" "-q"]
   set pos [string first "XXXXX" $expected]
   set expected [string trim [string replace $expected $pos [expr $pos + 4]]]

   set output [start_sge_bin "qalter" "-q '' $job_id"]
   set output [string trim $output]

   if {[string first $expected $output] < 0} {
      ts_log_severe "qalter -q '' didn't show expected output, expected\n$expected\nbut got\n$output"
   }

   delete_job $job_id
}

#                                                             max. column:     |
#****** qalter/qalter_help() ******
#
#  NAME
#     qalter_help -- test -help option for qalter
#
#  SYNOPSIS
#     qalter_help { }
#
#  FUNCTION
#     Checks if the help text is presented if no option is given.
#     Checks the return codes of qalter -help and qalter with no option.
#
#  INPUTS
#
#  RESULT
#     ???
#
#  EXAMPLE
#     ???
#
#  NOTES
#     ???
#
#  SEE ALSO
#     ???/???
#*******************************
proc qalter_help {} {
   test_help_and_usage "qalter"
}

#                                                             max. column:     |
#****** qalter/qhold_help() ******
#
#  NAME
#     qhold_help -- test -help option for qhold
#
#  SYNOPSIS
#     qhold_help { }
#
#  FUNCTION
#     Checks if the help text is presented if no option is given.
#     Checks the return codes of qhold -help and qhold with no option.
#
#  INPUTS
#
#  RESULT
#     ???
#
#  EXAMPLE
#     ???
#
#  NOTES
#     ???
#
#  SEE ALSO
#     ???/???
#*******************************

proc qhold_help {} {
   test_help_and_usage "qhold"
}

#                                                             max. column:     |
#****** qalter/qrls_help() ******
#
#  NAME
#     qrls_help -- test -help option for qrls
#
#  SYNOPSIS
#     qrls_help { }
#
#  FUNCTION
#     Checks if the help text is presented if no option is given.
#     Checks the return codes of qrls -help and qrls with no option.
#
#  INPUTS
#
#  RESULT
#     ???
#
#  EXAMPLE
#     ???
#
#  NOTES
#     ???
#
#  SEE ALSO
#     ???/???
#*******************************
proc qrls_help {} {
   test_help_and_usage "qrls"
}


