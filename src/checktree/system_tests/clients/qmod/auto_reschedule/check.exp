#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
#  Portions of this software are Copyright (c) 2023-2025 HPC-Gridware GmbH
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name
global check_category
global check_description
global check_needs
global check_functions
global check_root_access_needs

# we need root access
set check_root_access_needs "yes"

# define test's name and run level descriptions
set check_name            "qmod_auto_reschedule"
set check_category        "PARALLEL QMOD RESCHEDULE SCHEDULER VERIFIED"
set check_description(0)  "checking auto_reschedule with global reschedule_unknown 00:01:00"
set check_description(1)  "checking auto_reschedule with global reschedule_unknown 00:00:00"
set check_description(2)  "checking auto_reschedule with global reschedule_unknown 00:01:00 and ENABLE_RESCHEDULE_KILL"
set check_description(3)  "checking auto_reschedule with global reschedule_unknown 00:01:00, ENABLE_RESCHEDULE_KILL and ENABLE_RESCHEDULE_SLAVE"
set check_description(4)  "checking auto_reschedule with global reschedule_unknown 00:01:00, ENABLE_RESCHEDULE_SLAVE"

# define test's dependencies
set check_needs           "init_core_system"

# setup and cleanup functions
set check_setup_level_function "auto_reschedule_setup"
set check_cleanup_level_function "auto_reschedule_cleanup"

# define test's procedure order
set check_functions ""
lappend check_functions "auto_reschedule_unknown_check"
lappend check_functions "auto_reschedule_unknown_check_master"
lappend check_functions "auto_reschedule_GE_3331"

# CHECK description
# =================
#
# disable all queues (but not auto_reschedule_host1.q and auto_reschedule_host2.q )
#
# parameters
#
#  scheduler:
#  schedule_interval 00:00:04
#
#  global:
#  load_report_time           00:00:06
#  max_unheard                00:00:30
#  reschedule_value           00:01:00
#
#  auto_reschedule_host1:
#  reschedule_unknown         00:01:00
#
#  auto_reschedule_host2:
#  no changes
#
#  queue1:
#  hostname                   auto_reschedule_host1
#  rerun                      TRUE
#  qtype                      BATCH INTERACTIVE PARALLEL CHECKPOINTING
#  load_thresholds            np_load_avg=8.00
#  slots                      100
#
#
#  queue2:
#  hostname                   auto_reschedule_host2
#  rerun                      TRUE
#  qtype                      BATCH INTERACTIVE PARALLEL CHECKPOINTING
#  load_thresholds            np_load_avg=8.00
#  slots                      100
#
#  1) submit different jobs to each hosts ...
#     wait till jobs are in "r" state
#
#  2) kill execd on auto_reschedule_host1 and auto_reschedule_host2
#
#  3) wait 80 sec for first job on auto_reschedule_host1.q to get into pending state,
#     second stay running in runlevel 0 and 1 and gets killed in runlevel 2 and 3
#
#  4) job on auto_reschedule_host2.q should still run until 3 minutes are over
#
#  5) restart execds, wait for jobs to get rescheduled, remove jobs
#
# -------- local test procedures -----------------------------------------------

proc auto_reschedule_setup {} {
   global ts_config CHECK_ACT_LEVEL
   global CHECK_USER
   global queue1 queue2 queue3 queue4 auto_reschedule_host1 auto_reschedule_host2
   global stored_configuration
   global stored_auto_reschedule_host1_config global_resch reschedule_kill reschedule_slave
   global host_config_backup

   if {[llength $ts_config(execd_nodes)] < 2} {
      ts_log_config "Need at least 2 execd nodes for this test"
      return 99
   }

   # increase slots capacity
   foreach host $ts_config(execd_nodes) {
      get_exechost host_config_bkup $host
      set host_config_backup($host) $host_config_bkup(complex_values)

      set host_cfg(complex_values)  "slots=5000"
      set_exechost host_cfg $host
   }

   # This test only works if auto_reschedule_host2 is not the testsuite host
   set hosts [host_conf_get_suited_hosts 2]
   if {[lindex $hosts 0] != $ts_config(master_host)} {
      set auto_reschedule_host2 [lindex $hosts 0]
      set auto_reschedule_host1 [lindex $hosts 1]
   } else {
      set auto_reschedule_host2 [lindex $hosts 1]
      set auto_reschedule_host1 [lindex $hosts 0]
   }

   switch -- $CHECK_ACT_LEVEL {
      0 {
         set global_resch 1
         set reschedule_kill 0
         set reschedule_slave 0
      }
      1 {
         set global_resch 0
         set reschedule_kill 0
         set reschedule_slave 0
      }
      2 {
         set global_resch 1
         set reschedule_kill 1
         set reschedule_slave 0
      }
      3 {
         set global_resch 1
         set reschedule_kill 1
         set reschedule_slave 1
      }
      4 {
         set global_resch 1
         set reschedule_kill 0
         set reschedule_slave 1
      }
   }

   # create parallel environment
   set pe(slots)              1000
   set pe(allocation_rule)    "\$round_robin"
   set pe(control_slaves)     TRUE
   set pe(job_is_first_task)  FALSE
   add_pe "tight" pe

   # set new_queue(rerun)    "TRUE"
   set new_queue(qtype)    "BATCH INTERACTIVE"
   set new_queue(load_thresholds) "np_load_avg=8.00"
   set new_queue(slots)    "100"
   set new_queue(pe_list) "tight"

   add_queue "queue1" $auto_reschedule_host1 new_queue
   set queue1 [get_queue_instance "queue1" $auto_reschedule_host1]

   add_queue "queue2" $auto_reschedule_host2 new_queue
   set queue2 [get_queue_instance "queue2" $auto_reschedule_host2]

   switch -- $CHECK_ACT_LEVEL {
      4 {
         set new_queue_b(qtype)    "BATCH INTERACTIVE"
         set new_queue_b(load_thresholds) "np_load_avg=8.00"
         set new_queue_b(slots)    "100"

         add_queue "queue3" $auto_reschedule_host1 new_queue_b
         set queue3 [get_queue_instance "queue3" $auto_reschedule_host1]

         add_queue "queue4" $auto_reschedule_host2 new_queue_b
         set queue4 [get_queue_instance "queue4" $auto_reschedule_host2]
      }
   }

   set schedd_config(schedule_interval) "00:00:04"
   set_schedd_config schedd_config

   get_config stored_configuration
   get_config tmp_config $auto_reschedule_host2
   if {![info exists tmp_config(execd_spool_dir)]} {
      get_config tmp_config
   }

   set myconfig(load_report_time)   "00:00:05"

   if {$global_resch != 0} {
      set global_reschedule_value "00:01:00"
      set myconfig(reschedule_unknown) "00:01:00"
   } else {
      set global_reschedule_value "00:00:00"
      set myconfig(reschedule_unknown) "00:00:00"
   }
   if {$reschedule_kill != 0} {
      if {$reschedule_slave != 0} {
         set myconfig(qmaster_params) "ENABLE_RESCHEDULE_KILL=true,ENABLE_RESCHEDULE_SLAVE=true"
      } else {
         set myconfig(qmaster_params) "ENABLE_RESCHEDULE_KILL=true"
      }
   } else {
      if {$reschedule_slave != 0} {
         set myconfig(qmaster_params) "ENABLE_RESCHEDULE_SLAVE=true"
      } else {
         set myconfig(qmaster_params) "NONE"
      }
   }

   #add_or_replace_array_param myconfig stored_configuration "execd_params" "KEEP_ACTIVE" "ERROR"
   set_config_and_propagate myconfig
   ts_log_fine "changed global config (1)"

   # We need to change load_report_time and max_unheard in two steps:
   #   - current load_report_time is 15
   #   - when we change it, it takes up to 2 load report intervals to change
   #   - when max_unheard (being considered in sge_qmaster) is lower than load report time
   #     the host will go into unknown state
   unset -nocomplain myconfig
   set myconfig(max_unheard)        "00:00:10"
   set_config_and_propagate myconfig
   ts_log_fine "changed global config (2)"

   get_config stored_auto_reschedule_host1_config $auto_reschedule_host1
   set myhostconfig(reschedule_unknown) "00:00:30"
   set_config_and_propagate myhostconfig $auto_reschedule_host1
   ts_log_fine "chang config for host $auto_reschedule_host1"

   foreach host $ts_config(execd_nodes) {
      set q [get_queue_instance all.q $host]
      disable_queue $q
   }
   ts_log_fine "disabled all cluster queues"
}

proc auto_reschedule_cleanup {} {
   global ts_config
   global queue1 queue2 auto_reschedule_host1 auto_reschedule_host2
   global stored_configuration
   global stored_auto_reschedule_host1_config
   global CHECK_USER
   global CHECK_ACT_LEVEL
   global host_config_backup

   delete_all_jobs
   wait_for_end_of_all_jobs

   # restore complex_values
   foreach host $ts_config(execd_nodes) {
      set host_cfg(complex_values) $host_config_backup($host)
      set_exechost host_cfg $host
   }

   reset_schedd_config

   get_config tmp_config $auto_reschedule_host2
   if {![info exists tmp_config(execd_spool_dir)]} {
      get_config tmp_config
   }

   set messages_name "$tmp_config(execd_spool_dir)/$auto_reschedule_host2/messages"

   reset_config_and_propagate stored_configuration
   reset_config_and_propagate stored_auto_reschedule_host1_config $auto_reschedule_host1

   ts_log_fine "removing queues ..."
   del_queue queue1 $auto_reschedule_host1 0 1
   del_queue queue2 $auto_reschedule_host2 0 1

   switch -- $CHECK_ACT_LEVEL {
      4 {
         del_queue queue3 $auto_reschedule_host1 0 1
         del_queue queue4 $auto_reschedule_host2 0 1
      }
   }

   ts_log_fine "removing pe ..."
   del_pe "tight"

   ts_log_fine "enabling queues ..."
   foreach host $ts_config(execd_nodes) {
      ts_log_fine $host
      enable_queue [get_queue_instance all.q $host]
   }

   wait_for_load_from_all_queues 200
}

proc auto_reschedule_unknown_check_master {} {
   global ts_config CHECK_ACT_LEVEL
   global queue1 queue2 auto_reschedule_host1 auto_reschedule_host2
   global global_resch reschedule_kill reschedule_slave

   if {$CHECK_ACT_LEVEL == 4 } {
      ts_log_fine "skipping test for runlevel $CHECK_ACT_LEVEL ..."
      return
   }

   set my_outputs "-o /dev/null -e /dev/null"

   ts_log_fine "submitting job to queue $queue1 ..."
   set arguments "$my_outputs -q $queue1 -r y $ts_config(product_root)/examples/jobs/sleeper.sh 10000"
   set job_id1 [submit_job $arguments]

   ts_log_fine "submitting job to queue $queue2 ..."
   set arguments "$my_outputs -q $queue2 -r y $ts_config(product_root)/examples/jobs/sleeper.sh 10000"
   set job_id2 [submit_job $arguments]

   ts_log_fine "submitting job to queue $queue2 ..."
   set arguments "$my_outputs -q $queue2 $ts_config(product_root)/examples/jobs/sleeper.sh 10000"
   set job_id3 [submit_job $arguments]

   ts_log_fine "submitting pe job with master queue $queue2 ..."
   set arguments "$my_outputs -pe tight 4 -masterq $queue2 $ts_config(product_root)/examples/jobs/sleeper.sh 10000"
   set job_id4 [submit_job $arguments]

   ts_log_fine "submitting pe job with master queue $queue1 ..."
   set arguments "$my_outputs -pe tight 4 -masterq $queue1 $ts_config(product_root)/examples/jobs/sleeper.sh 10000"
   set job_id5 [submit_job $arguments]

   # make sure the jobs are running
   set job_list "$job_id1 $job_id2 $job_id3 $job_id4 $job_id5"
   set time_out 100

   foreach job $job_list {
      set ret [wait_for_jobstart $job "Sleeper" $time_out]
      if {$ret == -1} {
         ts_log_severe "Job $job wasn't scheduled within the timeout \
                        of $time_out s!"
         return
      }
   }

   foreach job $job_list {
      set ret [wait_for_end_of_transfer $job $time_out]
      if {$ret == -1} {
         ts_log_severe "Job $job didn't leave \"t\" state within the timeout \
                        of $time_out s!"
         return
      }
   }

   shutdown_qmaster

   ts_log_fine "master and scheduler must be down now"

   ts_log_fine "killing execd on host $auto_reschedule_host2"
   shutdown_system_daemon $auto_reschedule_host2 "execd"
   ts_log_fine "execd on auto_reschedule_host2 ($auto_reschedule_host2) should be down now"

   startup_qmaster
   ts_log_fine "master and scheduler should be up again now"

   if {$global_resch != 0} {
      # here we have global reschedule_unknown enabled
      ts_log_fine "global reschedule_unknown enabled"
      wait_for_jobpending $job_id2 "Sleeper" 100
      ts_log_fine "reschedule_kill=$reschedule_kill"
      if {$reschedule_kill == 0} {
         if {[is_job_running $job_id3 "Sleeper"] != 1} {
            ts_log_severe "job $job_id3 should still run"
         }
         if {[is_job_running $job_id4 "Sleeper"] != 1} {
            ts_log_severe "pe (master) job $job_id4 should still run"
         }
         if {[is_job_running $job_id5 "Sleeper"] != 1} {
            ts_log_severe "pe (slave) job $job_id5 should still run"
         }
      } else {
         if {[is_job_running $job_id3 "Sleeper"] != -1} {
            ts_log_severe "job $job_id3 should be reaped"
         }
         if {[is_job_running $job_id4 "Sleeper"] != -1} {
            ts_log_severe "pe (master) job $job_id4 should be reaped"
         }
         ts_log_fine "reschedule_slave=$reschedule_slave"
         if {$reschedule_slave == 0} {
            if {[is_job_running $job_id5 "Sleeper"] != 1} {
               ts_log_severe "pe (slave) job $job_id5 should still run"
            }
         } else {
            if {[is_job_running $job_id5 "Sleeper"] != -1} {
               ts_log_severe "pe (slave) job $job_id5 should be reaped"
            }
         }
      }
   } else {
      # here we have global reschedule_unknown set to 00:00:00
      ts_log_fine "global reschedule_unknown set to 00:00:00"
      set my_timeout [expr [timestamp] + 100]
      while {[timestamp] <= $my_timeout}  {

         if {[is_job_running $job_id2 "Sleeper"] != 1} {
            ts_log_severe "job $job_id2 should still run"
            break
         }
         if {[is_job_running $job_id3 "Sleeper"] != 1} {
            ts_log_severe "job $job_id3 should still run"
            break
         }
         if {[is_job_running $job_id4 "Sleeper"] != 1} {
            ts_log_severe "job $job_id4 should still run"
            break
         }
         if {[is_job_running $job_id5 "Sleeper"] != 1} {
            ts_log_severe "job $job_id5 should still run"
            break
         }

         set to_go [expr $my_timeout - [timestamp]]
         ts_log_fine "job $job_id2 and $job_id3 still running, continue in $to_go seconds ... "
         after 10000
      }
   }

   wait_for_jobstart $job_id1 "Sleeper" 100
   wait_for_end_of_transfer $job_id1 100

   # restart execds
   startup_execd $auto_reschedule_host2

   wait_for_jobstart $job_id2 "Sleeper" 300
   wait_for_end_of_transfer $job_id2 100

   delete_job $job_id1
   delete_job $job_id2
   if {$reschedule_kill == 0} {
      delete_job $job_id3
      delete_job $job_id4
      delete_job $job_id5
   } else {
      if {$reschedule_slave == 0} {
         delete_job $job_id5
      }
   }

   wait_for_jobend $job_id1 "Sleeper" 200 0
   wait_for_jobend $job_id2 "Sleeper" 200 0
   wait_for_jobend $job_id3 "Sleeper" 200 0
   wait_for_jobend $job_id4 "Sleeper" 200 0
   wait_for_jobend $job_id5 "Sleeper" 200 0
}

proc auto_reschedule_unknown_check {} {
   global ts_config
   global queue1 queue2 auto_reschedule_host1 auto_reschedule_host2
   global global_resch CHECK_ACT_LEVEL

   if {$CHECK_ACT_LEVEL != 0 && $CHECK_ACT_LEVEL != 1} {
      ts_log_fine "skipping test for runlevel $CHECK_ACT_LEVEL ..."
      return
   }

   ts_log_fine "submitting job to queue $queue1 ..."
   set my_outputs "-o /dev/null -e /dev/null"
   set arguments "$my_outputs -q $queue1 -r y $ts_config(product_root)/examples/jobs/sleeper.sh 10000"
   set job_id1 [submit_job $arguments]

   ts_log_fine "submitting job to queue $queue2 ..."
   set my_outputs "-o /dev/null -e /dev/null"
   set arguments "$my_outputs -q $queue2 -r y $ts_config(product_root)/examples/jobs/sleeper.sh 10000"
   set job_id2 [submit_job $arguments]

   wait_for_jobstart $job_id1 "Sleeper" 100
   wait_for_jobstart $job_id2 "Sleeper" 100

   wait_for_end_of_transfer $job_id1 100
   wait_for_end_of_transfer $job_id2 100

   # shutdown execds
   ts_log_fine "killing execd on host $auto_reschedule_host1 ..."
   shutdown_execd $auto_reschedule_host1 1
   ts_log_fine "killing execd on host $auto_reschedule_host2 ..."
   shutdown_execd $auto_reschedule_host2 1

   set my_queue_names $queue1
   lappend my_queue_names $queue2
   wait_for_unknown_load 100 $my_queue_names
   ts_log_fine "both execd should be down now"

   if {$global_resch != 0} {
      # here we have global reschedule_unknown enabled
      wait_for_jobpending $job_id1  "Sleeper" 80
      set j_state [is_job_running $job_id2 "Sleeper"]
      if {$j_state != 1} {
         set qstat_output [start_sge_bin "qstat" "-f -g t -u \*"
         ts_log_severe "job $job_id2 should still run(1)\n$qstat_output"]
      }
      wait_for_jobpending $job_id2  "Sleeper" 220
   } else {
      # here we have global reschedule_unknown set to 00:00:00
      set my_timeout [expr [timestamp] + 250]
      wait_for_jobpending $job_id1  "Sleeper" 80
      while {[timestamp] <= $my_timeout}  {
         set j_state [is_job_running $job_id2 "Sleeper"]
         if {$j_state != 1} {
            set qstat_output [start_sge_bin "qstat" "-f -g t -u \*"
            ts_log_severe "job $job_id2 should still run(2)\n$qstat_output"]
            break
         } else {
            set to_go [expr $my_timeout - [timestamp]]
            ts_log_fine "job $job_id2 still running, continue in $to_go seconds ... "
         }
         after 2000
      }
   }

   # restart execds
   startup_execd $auto_reschedule_host1
   startup_execd $auto_reschedule_host2

   wait_for_load_from_all_queues 200

   wait_for_jobstart $job_id1 "Sleeper" 100
   wait_for_jobstart $job_id2 "Sleeper" 100

   wait_for_end_of_transfer $job_id1 100
   wait_for_end_of_transfer $job_id2 100

   delete_job $job_id1
   delete_job $job_id2

   wait_for_jobend $job_id1 "Sleeper" 200 0
   wait_for_jobend $job_id2 "Sleeper" 200 0
}

proc auto_reschedule_GE_3331 {} {
   global ts_config
   global queue1 queue2 queue3 queue4 auto_reschedule_host1 auto_reschedule_host2
   global global_resch CHECK_ACT_LEVEL
   global auto_reschedule_host1 auto_reschedule_host2

   if {$CHECK_ACT_LEVEL != 4 } {
      ts_log_fine "skipping test for runlevel $CHECK_ACT_LEVEL ..."
      return
   }

   # sumbit first pe job with masterq queue2
   set job_args "-o /dev/null -e /dev/null "
   append job_args "-pe tight 2 -q $queue1 -masterq $queue2 -r y "
   append job_args "$ts_config(product_root)/examples/jobs/sleeper.sh 10000"
   set job_id1 [submit_job $job_args]

   # submit second pe job with masterq queue1
   set job_args "-o /dev/null -e /dev/null "
   append job_args "-pe tight 2 -p $queue2 -masterq $queue1 -r y "
   append job_args "$ts_config(product_root)/examples/jobs/sleeper.sh 10000"
   set job_id2 [submit_job $job_args]

   # submit one non-pe job to each queue
   set job_args "-o /dev/null -e /dev/null "
   append job_args "-q $queue1 -r y "
   append job_args "$ts_config(product_root)/examples/jobs/sleeper.sh 10000"
   set job_id3 [submit_job $job_args]
   set job_args "-o /dev/null -e /dev/null "
   append job_args "-q $queue2 -r y "
   append job_args "$ts_config(product_root)/examples/jobs/sleeper.sh 10000"
   set job_id4 [submit_job $job_args]
   set job_args "-o /dev/null -e /dev/null "
   append job_args "-q $queue3 -r y "
   append job_args "$ts_config(product_root)/examples/jobs/sleeper.sh 10000"
   set job_id5 [submit_job $job_args]
   set job_args "-o /dev/null -e /dev/null "
   append job_args "-q $queue4 -r y "
   append job_args "$ts_config(product_root)/examples/jobs/sleeper.sh 10000"
   set job_id6 [submit_job $job_args]

   # wait till all jobs are running
   wait_for_end_of_transfer $job_id1 100
   wait_for_end_of_transfer $job_id2 100
   wait_for_end_of_transfer $job_id3 100
   wait_for_end_of_transfer $job_id4 100
   wait_for_end_of_transfer $job_id5 100
   wait_for_end_of_transfer $job_id6 100

   shutdown_execd $auto_reschedule_host1 1

   # both pe jobs and the batch jobs running on the host that
   # has been shut down have to be rescheduled other jobs should be running
   wait_for_jobpending $job_id1  "Sleeper" 80
   wait_for_jobpending $job_id2  "Sleeper" 80
   wait_for_jobpending $job_id3  "Sleeper" 80
   wait_for_jobpending $job_id5  "Sleeper" 80
   set is_running4 [is_job_running $job_id4 "Sleeper"]
   set is_running6 [is_job_running $job_id6 "Sleeper"]

   if {$is_running4 != 1 || $is_running6 != 1 } {
      ts_log_severe "Jobs were rescheduled that should remain running"
   }

   startup_execd $auto_reschedule_host1

   # We need to wait for
   # - the sge_execd to have reported the jobs
   # - jobs to have been signalled by sge_qmaster as they are not supposed to be there
   # - jobs to have been cleaned up
   # The jobs' shepherd processes are not children of the current sge_execd, so cleanup will
   # only be done by the regular job cleanup mechanism, which is called once a minute.
   # This means that we need to wait longer than one minute.
   # If we do not wait, the post check tests will fail on hosts having systemd
   # as the job is still there and the job scope still exists.
   sleep_for_seconds 75 "waiting for re-started sge_execd to clean up the still running jobs (75 seconds)"
}

