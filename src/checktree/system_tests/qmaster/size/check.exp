#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
#  Portions of this software are Copyright (c) 2023-2024 HPC-Gridware GmbH
#
##########################################################################
#___INFO__MARK_END__

# Define the global variables to give them back
global check_name check_description check_needs check_functions
global check_category
global check_root_access_needs

set check_root_access_needs  "yes"
set check_name         "qmaster-size"
set check_category     "COMPATIBILITY SYSTEM L10N VERIFIED JENKINS_DISABLED"
set check_description(0)    "check qmaster/schedd for memory leaks - functional test"
set check_description(200)  "check qmaster/schedd for memory leaks - normal test"
set check_description(400)  "check qmaster/schedd for memory leaks - long test"
set check_needs        "init_core_system"       ;# dependencies of this check (name of other check)

# setup and cleanup functions
set check_setup_level_function "qmaster_size_setup_level"
set check_cleanup_level_function "qmaster_size_cleanup_level"

# define test's procedure order
set check_functions     ""
lappend check_functions "check_size_config"            ;# set initial config
lappend check_functions "check_idle"                   ;# wait for execd's to connect etc.
lappend check_functions "check_qstat"                  ;# do qstats
lappend check_functions "check_idle"                   ;# wait for system to stabilize
lappend check_functions "check_miniworm"               ;# run miniworms
lappend check_functions "check_idle"                   ;# wait for system to stabilize
lappend check_functions "check_flood"                  ;# flood of qsub's (sleeper)
lappend check_functions "check_idle"                   ;# wait for system to stabilize
lappend check_functions "check_size_config_zombies"    ;# activate finished jobs
lappend check_functions "check_idle"                   ;# wait for system to stabilize
lappend check_functions "check_miniworm"               ;# run miniworms
lappend check_functions "check_idle"                   ;# wait for system to stabilize
lappend check_functions "check_flood"                  ;# flood of qsub's (sleeper)
lappend check_functions "check_idle"                   ;# wait for system to stabilize
lappend check_functions "check_miniworm"               ;# run miniworms
lappend check_functions "check_idle"                   ;# wait for system to stabilize


proc qmaster_size_setup_level {} {
   global CHECK_ACT_LEVEL
   global CHECK_USER
   global CHECK_PROTOCOL_DIR
   global ts_config qmaster_size_config_backup
   global qmaster_size_monitor_filename qmaster_size_monitor_size_interval qmaster_size_monitor_size_error
   global qmaster_size_num_zombies
   global qmaster_size_time_start qmaster_size_last_size qmaster_size_next_report
   global qmaster_size_idle_after


   set qmaster_size_time_start [clock seconds]
   set qmaster_size_last_size(master) 0
   set qmaster_size_last_size(schedd) 0
   set qmaster_size_next_report 0
   set qmaster_size_idle_after "startup"

   global qmaster_size_idle_delay
   global qmaster_size_idle_duration
   global qmaster_size_idle_interval
   global qmaster_size_qstat_delay
   global qmaster_size_qstat_duration
   global qmaster_size_qstat_interval
   global qmaster_size_miniworm_types
   global qmaster_size_miniworm_delay
   global qmaster_size_miniworm_duration
   global qmaster_size_miniworm_interval
   global qmaster_size_flood_amounts
   global qmaster_size_flood_types
   global qmaster_size_flood_interval
   global qmaster_size_flood_stab_delay
   global qmaster_size_flood_stab_interval

   set qmaster_size_idle_after "startup"

   set qmaster_size_monitor_size_error SEVERE

   switch -exact $CHECK_ACT_LEVEL {
      0 {
         # in functional test, it is ok for qmaster/schedd to grow
         set qmaster_size_monitor_size_error       FINE

         set qmaster_size_monitor_size_interval   10
         set qmaster_size_num_zombies             10
         set qmaster_size_idle_delay        20
         set qmaster_size_idle_duration      0
         set qmaster_size_idle_interval      5
         set qmaster_size_qstat_delay       20
         set qmaster_size_qstat_duration     0
         set qmaster_size_qstat_interval     5
         set qmaster_size_miniworm_types    "5"
         set qmaster_size_miniworm_delay    30
         set qmaster_size_miniworm_duration 10
         set qmaster_size_miniworm_interval 10
         set qmaster_size_flood_amounts     "10"
         set qmaster_size_flood_types       "1 5 10"
         set qmaster_size_flood_interval    10
         set qmaster_size_flood_stab_delay        20
         set qmaster_size_flood_stab_interval     5
      }
      200 {
         set qmaster_size_monitor_size_interval    60
         set qmaster_size_num_zombies             100
         set qmaster_size_idle_delay        120
         set qmaster_size_idle_duration     120
         set qmaster_size_idle_interval      10
         set qmaster_size_qstat_delay       120
         set qmaster_size_qstat_duration    120
         set qmaster_size_qstat_interval     10
         set qmaster_size_miniworm_types    "1 5 10 20 30 60 120"
         set qmaster_size_miniworm_delay    600
         set qmaster_size_miniworm_duration 600
         set qmaster_size_miniworm_interval  30
         set qmaster_size_flood_amounts     "10 100 10"
         set qmaster_size_flood_types       "5 10 20 30 60 120"
         set qmaster_size_flood_interval     30
         set qmaster_size_flood_stab_delay        60
         set qmaster_size_flood_stab_interval     10
      }
      400 {
         set qmaster_size_monitor_size_interval    300
         set qmaster_size_num_zombies             1000
         set qmaster_size_idle_delay         300
         set qmaster_size_idle_duration      120
         set qmaster_size_idle_interval       10
         set qmaster_size_qstat_delay        600
         set qmaster_size_qstat_duration     600
         set qmaster_size_qstat_interval      20
         set qmaster_size_miniworm_types    "1 5 10 20 30 60 120 300 600 1200"
         set qmaster_size_miniworm_delay    3600
         set qmaster_size_miniworm_duration 3600
         set qmaster_size_miniworm_interval   60
         set qmaster_size_flood_amounts     "10 100 1000 100 10"
         set qmaster_size_flood_types       "1 5 10 20 30 60 120 300 600 1200"
         set qmaster_size_flood_interval      60
         set qmaster_size_flood_stab_delay        120
         set qmaster_size_flood_stab_interval     20
      }
   }


   get_config qmaster_size_config_backup

   # delete interactive queue that might exist from a previous run
   get_queue_list queue_list
   if {[lsearch $queue_list "interactive"] != -1} {
      del_queue interactive "" 0 1
   }

   # create an additional interactive only queue
   # This verifies IZ 1087
   set queue_conf(qtype) INTERACTIVE
   add_queue interactive "@allhosts" queue_conf 1

   # get qmaster spool dir
   set qmaster_spool_dir [ get_qmaster_spool_dir ]

   set qmaster_size_monitor_filename $CHECK_PROTOCOL_DIR/qmaster_size.$ts_config(master_host).$CHECK_ACT_LEVEL.[clock format [clock seconds] -format "%Y%m%d%H%M"]

   if { [string length $qmaster_size_monitor_filename ] > 5} {
      if [ file exists $qmaster_size_monitor_filename ] {
         delete_file $qmaster_size_monitor_filename
      }
   } else {
      ts_log_severe "file name length of monitor size file should be longer than 5 characters"
   }

   monitor_header

   shutdown_master_and_scheduler $ts_config(master_host) $qmaster_spool_dir
   startup_qmaster

   set time [timestamp]
   while { 1 } {
      ts_log_fine "waiting for startup of qmaster (and scheduler if version < 62) ..."
      after 5000
      set running [ are_master_and_scheduler_running $ts_config(master_host) $qmaster_spool_dir]
      set expected_ret_val 2
      if { $running == $expected_ret_val } {
         break;
      }
      set runtime [expr ( [timestamp] - $time) ]
      if { $runtime >= 300 } {
          ts_log_severe "timeout while waiting for startup of qmaster and scheduler"
          break;
      }
   }

   wait_for_load_from_all_queues 300

   set qmaster_size_time_start [clock seconds]
}

proc get_size {who} {
   global ts_config

   if {$who == "master"} {
      set pid [get_qmaster_pid]
      if { $pid == -1 } {
         ts_log_severe "could not evaluate pid of qmaster"
         return -1
      }
      ts_log_finer "qmaster pid: $pid"
   } elseif {$who == "schedd"} {
      return 0
   } else {
      return 0
   }

   if {[info exists ps_info]} {
      unset ps_info
   }

   set result [get_ps_info $pid $ts_config(master_host) ps_info]

   if {$ps_info($pid,error) != 0} {
      ts_log_severe "cannot get info about process $job_pid"
      return -1
   }
   return $ps_info($pid,vsz)
}

proc monitor_header {} {
   global qmaster_size_monitor_filename CHECK_ACT_LEVEL

   set f [open $qmaster_size_monitor_filename "w"]
   puts $f [format "%s\t%s\t%s\t%s\t%s" "date/time" "size qmaster" "size schedd" "num jobs" "situation"]
   close $f
}

proc monitor_size {jobs {when ""}} {
   global qmaster_size_time_start
   global qmaster_size_next_report qmaster_size_last_size
   global qmaster_size_monitor_filename qmaster_size_monitor_size_interval
   global ts_config

   set now  [clock seconds]
   set size(master) [get_size "master"]
   set size(schedd) [get_size "schedd"]

   if { $qmaster_size_last_size(master) != $size(master) ||
        $qmaster_size_last_size(schedd) != $size(schedd) ||
        $now >= $qmaster_size_next_report                ||
        $when != ""} {
      set f [open $qmaster_size_monitor_filename "a"]
      #puts $f [format "%ld\t%ld\t%ld\t%ld\t%s" [expr $now - $qmaster_size_time_start] $size(master) $size(schedd) $jobs $when]
      puts $f [format "%s\t%ld\t%ld\t%ld\t%s" [clock format $now -format "%m/%d/%Y %H:%M:%S"] $size(master) $size(schedd) $jobs $when]
      close $f

      set qmaster_size_last_size(master) $size(master)
      set qmaster_size_last_size(schedd) $size(schedd)
      set qmaster_size_next_report [expr $now + $qmaster_size_monitor_size_interval]
   }

   return $size(master)
}

proc stabilize {text delay interval commands} {
   if { $delay > 0 } {
      ts_log_fine "waiting $delay s for system to stabilize $text"

      set end [expr [clock seconds] + $delay]
      set now 0
      while { $now < $end } {
         foreach i $commands {
            eval $i
         }
         monitor_size [get_job_count]
         after [expr $interval * 1000]
         set now [clock seconds]
      }
   }
}

proc output_monitor_result {start_size end_size} {
   global qmaster_size_monitor_size_error

   if { $start_size < $end_size } {
      set message "size of qmaster increased from $start_size to $end_size"
      ts_log_fine $message
      ts_log $qmaster_size_monitor_size_error $message
   } else {
      if { $start_size == $end_size } {
         set message "size of qmaster remained $end_size"
      } else {
         set message "size of qmaster reduced from $start_size to $end_size"
      }
   }
}

proc monitor {text duration interval commands} {
   if { $duration > 0 } {
      ts_log_fine "monitoring size for $duration s $text"

      set start_size [get_size "master"]
      set now 0
      set end [expr [clock seconds] + $duration]
      while { $now < $end } {
         foreach i $commands {
            eval $i
         }
         set size [monitor_size [get_job_count]]
         after [expr $interval * 1000]
         set now [clock seconds]
      }

      output_monitor_result $start_size $size
   }
}

proc check_idle {} {
   global qmaster_size_idle_after
   global qmaster_size_idle_delay
   global qmaster_size_idle_duration
   global qmaster_size_idle_interval

   ts_log_fine "check_idle after $qmaster_size_idle_after"

   monitor_size [get_job_count] "check_idle"
   stabilize "doing nothing" $qmaster_size_idle_delay $qmaster_size_idle_interval {}
   monitor "doing nothing" $qmaster_size_idle_duration $qmaster_size_idle_interval {}
}

proc qstat_test {} {
   global ts_config CHECK_USER
      set output [start_sge_bin "qstat" "-f" $ts_config(master_host) $CHECK_USER]
   if { $prg_exit_state != 0 } {
      ts_log_error $output
   }
   set output [start_sge_bin "qstat" "-s r" $ts_config(master_host) $CHECK_USER]
   if { $prg_exit_state != 0 } {
      ts_log_error $output
   }
}

proc check_qstat {} {
   global qmaster_size_idle_after
   global qmaster_size_qstat_delay
   global qmaster_size_qstat_duration
   global qmaster_size_qstat_interval

   monitor_size [get_job_count] "check_qstat"
   stabilize "doing qstat's" $qmaster_size_qstat_delay $qmaster_size_qstat_interval {qstat_test}
   monitor "doing qstat's" $qmaster_size_qstat_duration $qmaster_size_qstat_interval {qstat_test}

   set qmaster_size_idle_after "check qstat"
}

proc check_miniworm {} {
   global ts_config
   global CHECK_ACTUAL_TEST_PATH CHECK_USER

   global qmaster_size_idle_after
   global qmaster_size_miniworm_types
   global qmaster_size_miniworm_delay
   global qmaster_size_miniworm_duration
   global qmaster_size_miniworm_interval

   monitor_size [get_job_count] "check_miniworm"

   set last_job [get_last_jobid]

   ts_log_fine "submitting miniworms with delays $qmaster_size_miniworm_types \[s\]"

   foreach host $ts_config(execd_nodes) {
      foreach i $qmaster_size_miniworm_types {
         set result [submit_job "-j y $CHECK_ACTUAL_TEST_PATH/pminiworm.sh $CHECK_ACTUAL_TEST_PATH $i 0 $i"]
         if {$result >= 0} {
            ts_log_finest "pminiworm submitted"
         } else {
            ts_log_severe "pminiworm didn't start"
         }
      }
   }

   stabilize "doing qstat's while miniworms working" $qmaster_size_miniworm_delay  $qmaster_size_miniworm_interval {{set jobs [get_job_count]} {qstat_test}}
   monitor "doing qstat's while miniworms working" $qmaster_size_miniworm_duration $qmaster_size_miniworm_interval {{set jobs [get_job_count]} {qstat_test}}

   set queue_list {}
   foreach i $ts_config(execd_nodes) {
      lappend queue_list [get_queue_instance all.q $i]
   }
   ts_log_fine "disabling queues $queue_list"
   disable_queue $queue_list
   ts_log_fine "deleting miniworms"

   while {[get_job_count] > 0} {
      start_sge_bin "qdel" "-u $CHECK_USER"
      after 5000
   }
   ts_log_fine "enabling queues $queue_list"
   enable_queue $queue_list

   monitor_size [get_job_count] "check_miniworm finished [expr [get_last_jobid] - $last_job] jobs"

   set qmaster_size_idle_after "check miniworm"
}

proc get_last_jobid {} {
   set ret [get_jobseqnum]
   if {$ret < 0} {
      set ret 0
   }
   return $ret
}

proc get_job_count {} {
   set job_count 0
   # get number of lines of qstat output
   set output [start_sge_bin "qstat" ""]
   if { $prg_exit_state == 0 } {
      set output [split $output "\n"]
      set output [llength $output]
      # qstat output contains 2 header lines
      if { $output > 0 } {
         set job_count [expr $output - 2]
      }
   } else {
      ts_log_severe "qstat failed: $output"
   }
   return $job_count
}

proc check_flood {} {
   global ts_config
   global CHECK_ACTUAL_TEST_PATH
   global CHECK_USER

   global qmaster_size_idle_after
   global qmaster_size_flood_amounts
   global qmaster_size_flood_types
   global qmaster_size_flood_interval
   global qmaster_size_idle_delay
   global qmaster_size_idle_interval
   global qmaster_size_flood_stab_delay
   global qmaster_size_flood_stab_interval

   set num_hosts [llength $ts_config(execd_nodes)]

   # limit the number of hosts, otherwise we could get out of filehandles
   if {$num_hosts > 10} {
      set num_hosts 10
   }

   set queue_list {}
   foreach i $ts_config(execd_nodes) {
      lappend queue_list [get_queue_instance all.q $i]
   }

   foreach amount $qmaster_size_flood_amounts {
      set jobs_per_host [expr $amount / $num_hosts]
      if {[expr $amount % $num_hosts] > 0} {
         incr jobs_per_host
      }

      set jobs_total [expr $num_hosts * $jobs_per_host * [llength $qmaster_size_flood_types]]

      ts_log_fine "disabling queues $queue_list"
      disable_queue $queue_list

      monitor_size [get_job_count] "check_flood submitting $jobs_total"

      set spawn_list {}
      set num 0

      if {[info exists flood_ids]} {
         unset flood_ids
      }

      foreach host $ts_config(execd_nodes) {
         ts_log_fine "start flooding qsubs on host $host"
         set flood_id [open_remote_spawn_process $host $CHECK_USER "$CHECK_ACTUAL_TEST_PATH/flood_sleeper.sh" "$ts_config(product_root) $ts_config(cell) $jobs_per_host '$qmaster_size_flood_types' $num"]
         set spawn_id [lindex $flood_id 1]
         set flood_ids($spawn_id) $flood_id
         lappend spawn_list $spawn_id
         incr num
         ts_log_fine "started flood submitter on host $host with spawn id $spawn_id"

         if {$num >= $num_hosts } {
            break
         }
      }

      set timeout $qmaster_size_flood_interval
      expect {
         full_buffer {
            ts_log_severe "buffer overflow please increment CHECK_EXPECT_MATCH_MAX_BUFFER value"
         }
         timeout {
            ts_log_fine "expect timeout during flood submit"
         }
         -i $spawn_list -- "finished submitting" {
            set spawn_id $expect_out(spawn_id)
            ts_log_fine "reaping (1) flood submitter with id $spawn_id"
            close_spawn_process $flood_ids($spawn_id)
            set index [lsearch -exact $spawn_list $spawn_id]
            set spawn_list [lreplace $spawn_list $index $index]
            if {[llength $spawn_list] > 0} {
               monitor_size [get_job_count]
               exp_continue
            }
         }
         -i $spawn_list -- "_exit_status_" {
            set spawn_id $expect_out(spawn_id)
            ts_log_fine "reaping (2) flood submitter with id $spawn_id"
            close_spawn_process $flood_ids($spawn_id)
            set index [lsearch -exact $spawn_list $spawn_id]
            set spawn_list [lreplace $spawn_list $index $index]
            if {[llength $spawn_list] > 0} {
               monitor_size [get_job_count]
               exp_continue
            }
         }
         -i $spawn_list default {
            set spawn_id $expect_out(spawn_id)
            ts_log_fine "reaping failed flood submitter with id $spawn_id"
            close_spawn_process $flood_ids($spawn_id)
            set index [lsearch -exact $spawn_list $spawn_id]
            set spawn_list [lreplace $spawn_list $index $index]
            if {[llength $spawn_list] > 0} {
               monitor_size [get_job_count]
               exp_continue
            }
         }
      }

      set size [monitor_size [get_job_count] "check_flood submitted $jobs_total"]

      ts_log_fine "enabling queues $queue_list"
      enable_queue $queue_list

      stabilize "after enabling queues" $qmaster_size_flood_stab_delay $qmaster_size_flood_stab_interval {}

      ts_log_fine "monitoring size until no jobs remain"
      set start_size [get_size "master"]
      set job_count [get_job_count]
      while { $job_count > 0 } {
         set size [monitor_size $job_count]
         after [expr $qmaster_size_flood_interval * 1000]
         set job_count [get_job_count]
      }

      monitor_size [get_job_count] "check_flood finished $jobs_total"

      output_monitor_result $start_size $size

      stabilize "before next flood of jobs" $qmaster_size_idle_delay $qmaster_size_idle_interval {}
   }


   set qmaster_size_idle_after "check flood"
}

proc check_size_config {} {
   global ts_config

   monitor_size [get_job_count] "set initial parameters"
}

proc check_size_config_zombies {} {
   global qmaster_size_num_zombies

   set default_array(finished_jobs)   $qmaster_size_num_zombies
   set_config default_array

   monitor_size [get_job_count] "set finished jobs to $qmaster_size_num_zombies"
}

proc qmaster_size_cleanup_level {} {
   global qmaster_size_config_backup
   global qmaster_size_monitor_filename qmaster_size_monitor_size_interval qmaster_size_monitor_size_error
   global qmaster_size_num_zombies
   global qmaster_size_time_start qmaster_size_last_size qmaster_size_next_report
   global qmaster_size_idle_after qmaster_size_idle_delay
   global qmaster_size_idle_duration qmaster_size_idle_interval
   global qmaster_size_qstat_delay qmaster_size_qstat_duration qmaster_size_qstat_interval
   global qmaster_size_miniworm_types qmaster_size_miniworm_delay
   global qmaster_size_miniworm_duration qmaster_size_miniworm_interval
   global qmaster_size_flood_amounts qmaster_size_flood_types qmaster_size_flood_interval
   global qmaster_size_flood_stab_delay qmaster_size_flood_stab_interval

   delete_all_jobs
   wait_for_end_of_all_jobs 180

   reset_config qmaster_size_config_backup

   del_queue interactive "" 0 1

   monitor_size [get_job_count] "reset initial parameters"

   unset -nocomplain qmaster_size_config_backup
   unset -nocomplain qmaster_size_monitor_filename qmaster_size_monitor_size_interval qmaster_size_monitor_size_error
   unset -nocomplain qmaster_size_num_zombies
   unset -nocomplain qmaster_size_time_start qmaster_size_last_size qmaster_size_next_report
   unset -nocomplain qmaster_size_idle_after qmaster_size_idle_delay
   unset -nocomplain qmaster_size_idle_duration qmaster_size_idle_interval
   unset -nocomplain qmaster_size_qstat_delay qmaster_size_qstat_duration qmaster_size_qstat_interval
   unset -nocomplain qmaster_size_miniworm_types qmaster_size_miniworm_delay
   unset -nocomplain qmaster_size_miniworm_duration qmaster_size_miniworm_interval
   unset -nocomplain qmaster_size_flood_amounts qmaster_size_flood_types qmaster_size_flood_interval
   unset -nocomplain qmaster_size_flood_stab_delay qmaster_size_flood_stab_interval
}
