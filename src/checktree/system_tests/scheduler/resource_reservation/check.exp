#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
#  Portions of this software are Copyright (c) 2023-2024 HPC-Gridware GmbH
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_needs
global check_functions 
global check_root_access_needs

# define test's name and run level descriptions
set check_name            "resource_reservation"
set check_category        "AR RESERVATION RQS SCHEDULER VERIFIED"
set check_description(2)  "check resource reservation (drmaa version 1.0)"
set check_description(3)  "check resource reservation with resource quota sets (drmaa version 1.0)"
set check_description(4)  "check resource reservation with calendar disabled queue (drmaa version 1.0)"
set check_description(5)  "check resource reservation inside an advance reservation (drmaa version 1.0)"

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_setup_function resource_reservation_setup
set check_cleanup_function resource_reservation_cleanup

# per level setup and cleanup functions
set check_setup_level_function resource_reservation_level_setup
set check_cleanup_level_function resource_reservation_level_cleanup

# define test's procedure order
set check_functions ""
lappend check_functions "resource_reservation_basic"

# -------- local test procedures: initialization ------------------------------

proc resource_reservation_setup {} {
   global rr_queue_name rr_cal_queue_name rr_h_vmem_complex 
   global rr_host
   global ts_config
   global resource_reservation_complex_backup

   ts_log_fine "resource_reservation_setup" 

   get_complex resource_reservation_complex_backup

   set rr_queue_name               "rr_queue.q"
   set rr_cal_queue_name           "rr_cal_queue.q"

   # we use the first exec host here
   # and in runlevel 4 the second one for an additional queue
   set rr_host [lindex $ts_config(execd_nodes) 0]

   # Setup the scheduler
   set schedconf(weight_tickets_functional)  "0"
   set schedconf(weight_tickets_share)       "0"
   set schedconf(share_override_tickets)     "TRUE"
   set schedconf(share_functional_shares)    "TRUE"
   set schedconf(weight_ticket)              "0.000000"
   set schedconf(weight_waiting_time)        "0.000000"
   set schedconf(weight_urgency)             "0.1"
   set schedconf(weight_priority)            "1.000000"
   set schedconf(max_reservation)            "10"
   set schedconf(job_load_adjustments)       "NONE"
   set schedconf(load_adjustment_decay_time) "0:0:00"

   set result [set_schedd_config schedconf]
   if {$result != 0} {
      ts_log_severe "setup of scheduler for overwrite ticket test failed"
      return
   }
   
   ts_log_fine "Scheduler configured"

   # Save original complexes
   get_complex urgency_org_complexes
   set rr_h_vmem_complex $urgency_org_complexes(h_vmem)

   # set complex attributes
   set tmp_complex(license)   "lic        INT      <=    YES         YES        0       100"
   set tmp_complex(license2)  "lic2       double   <=    YES         YES        0       100"   
   set tmp_complex(h_vmem)    "h_vmem     MEMORY   <=    YES         YES        200M    0.0000001"
   set tmp_complex(myslots)   "ms         INT      <=    YES         YES        0       100"
   set tmp_complex(jobs)      "j          INT      <=    YES         JOB        0       0"

   set result [ set_complex tmp_complex ]

   # enable / disable queues needed for the test
   disable_queue "all.q"

#-----  
  
   # set global variable  
   set my_host_config(complex_values) "license=10,license2=10"
   set_exechost my_host_config "global"

   # set host variable 
   set my_host_config(complex_values) "h_vmem=20G"
   set_exechost my_host_config $rr_host
}

proc resource_reservation_level_setup {} {
   global rr_queue_name rr_cal_queue_name rr_h_vmem_complex
   global rr_host
   global ts_config
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      2 {
         # Tests resource_reservation
      }
      3 {
         # Tests resource_reservation with resource quota sets
      }
      4 {
         # Tests resource_reservation
         if {[llength $ts_config(execd_nodes)] < 2} {
            ts_log_config "Need 2 execd nodes for this test in runlevel $CHECK_ACT_LEVEL"
            return 99
         }
      }
      5 {
         # Tests resource_reservation with resource quota sets
      }
   }

   if {$CHECK_ACT_LEVEL == 2 || $CHECK_ACT_LEVEL == 4} {
      # setup needed pe
      set pe(slots)             "10"
      set pe(allocation_rule)   "\$round_robin"
      add_pe "round_robin" pe

      set pe(slots)             "10"
      set pe(allocation_rule)   "\$fill_up"
      add_pe "fill_up" pe

      set pe(slots)             "10"
      set pe(allocation_rule)   "\$pe_slots"
      add_pe "pe_slots" pe

      # setup the rr test queue
      set queue_conf(slots)            "100"
      set queue_conf(load_thresholds)  "NONE"
      set queue_conf(pe_list)          "make round_robin fill_up pe_slots"
      set queue_conf(complex_values)   "myslots=10,jobs=2"

      if {$CHECK_ACT_LEVEL == 4} {
         add_queue "$rr_cal_queue_name" "@allhosts" queue_conf
         set no_rr_host [lindex $ts_config(execd_nodes) 1]

         # submit jobs into that queue
         set job_options "-j y -o /dev/null -q $rr_cal_queue_name -l h=$no_rr_host $ts_config(product_root)/examples/jobs/sleeper.sh 1000"
         set job_id [submit_job "$job_options"]
         trigger_scheduling
         wait_for_jobstart $job_id "Sleeper" 60 1 1

         set cal_name "always_suspend_calendar"
         set new_cal(calendar_name)  "$cal_name"
         set new_cal(week)           "mon-sun=0-24=suspended"

         add_calendar "$cal_name" new_cal
         set cal_queue_conf(calendar)   $cal_name

         mod_queue $rr_cal_queue_name "@allhosts" cal_queue_conf 1
      }
   }

   if {$CHECK_ACT_LEVEL == 1 || $CHECK_ACT_LEVEL == 3} {
      # setup needed pe
      set pe(slots)             "100"
      set pe(allocation_rule)   "\$round_robin"
      add_pe "round_robin" pe

      set pe(slots)             "100"
      set pe(allocation_rule)   "\$fill_up"
      add_pe "fill_up" pe

      set pe(slots)             "100"
      set pe(allocation_rule)   "\$pe_slots"
      add_pe "pe_slots" pe

      # setup the rr test queue
      set queue_conf(slots)            "100"
      set queue_conf(load_thresholds)  "NONE"
      set queue_conf(pe_list)          "make round_robin fill_up pe_slots"
      set queue_conf(complex_values)   "myslots=100,jobs=100"

      # setup needed resource quota sets
      set rqs_name  "no_pe"
      set rules {}
      lappend rules "pes !* to myslots=10,jobs=2"
      set rqs_charray($rqs_name,limit) $rules
      set rqs_charray($rqs_name,enabled) "true"

      set rqs_name "pe"
      set rules {}
      lappend rules "pes * to slots=10,jobs=2"
      set rqs_charray($rqs_name,limit) $rules
      set rqs_charray($rqs_name,enabled) "true"
 
      add_rqs rqs_charray
   }

   if {$CHECK_ACT_LEVEL == 5} {
      # setup needed pe
      set pe(slots)             "10"
      set pe(allocation_rule)   "\$round_robin"
      add_pe "round_robin" pe

      set pe(slots)             "10"
      set pe(allocation_rule)   "\$fill_up"
      add_pe "fill_up" pe

      set pe(slots)             "10"
      set pe(allocation_rule)   "\$pe_slots"
      add_pe "pe_slots" pe

      # setup the rr test queue
      set queue_conf(slots)            "100"
      set queue_conf(load_thresholds)  "NONE"
      set queue_conf(pe_list)          "make round_robin fill_up pe_slots"
      set queue_conf(complex_values)   "myslots=100,jobs=100"
   }

   ts_log_fine "Add queue $rr_queue_name"
   add_queue $rr_queue_name "@allhosts" queue_conf 1

   disable_queue $rr_queue_name
   enable_queue [get_queue_instance $rr_queue_name $rr_host]
}

proc resource_reservation_cleanup {  } {
   global rr_h_vmem_complex
   global ts_config
   global rr_host
   global resource_reservation_complex_backup

   # reset the scheduler configuration
   reset_schedd_config
   
   # set global variable  
   set my_host_config(complex_values) "NONE"
   set_exechost my_host_config "global"

   # set host variable 
   set my_host_config(complex_values) "NONE"
   set_exechost my_host_config $rr_host
 
   # remove complex attributes
   reset_complex resource_reservation_complex_backup
   unset resource_reservation_complex_backup

   # enable queues
    enable_queue "all.q"

   unset -nocomplain rr_h_vmem_complex rr_host global resource_reservation_complex_backup
}

proc resource_reservation_level_cleanup {} {
   global rr_queue_name rr_cal_queue_name rr_h_vmem_complex
   global rr_host
   global ts_config
   global CHECK_ACT_LEVEL

   ts_log_fine "resource_reservation_level_cleanup"

   # remove jobs
   delete_all_jobs
   wait_for_end_of_all_jobs 60

   # del queues 
   del_queue $rr_queue_name "@allhosts" 0 1

   if {$CHECK_ACT_LEVEL == 4} {
      del_queue $rr_cal_queue_name "@allhosts" 0 1
      del_calendar "always_suspend_calendar"
   }
 
   # remove PEs
   del_pe        "round_robin"
   del_pe        "fill_up"
   del_pe        "pe_slots"

   # Delete resource quota sets
   if {[get_rqs_list rqs_names "" "" 0] == 0} {
      foreach elem $rqs_names {
         ts_log_fine "Removing resource quota sets $elem ...\n"
         del_rqs $elem
      }
   }
}

# -------- local test procedures: initialization ------------------------------

proc get_job_descriptions { test1 test2 {ar_id 0} } {
   global job_desc
   global ts_config

   set runtime_def "10"
   set runtime_long "20" 

   set job_script "$ts_config(product_root)/examples/jobs/sleeper.sh"
   set drmaa_mode "ST_RESERVATION_FINISH_ORDER"

   if { $test2 == "backfill" } {
      set runtime_long $runtime_def 
      set drmaa_mode "ST_BACKFILL_FINISH_ORDER"
   }

   if {$ar_id != 0} {
      set args "-R y -ar $ar_id"
   } else {
      set args "-R y"
   }
   
   switch -exact $test1 {
      "license" {
         set job_desc1 "$args -N L4_BF -p 100 -l h_rt=$runtime_def,license=8"
         set job_desc2 "$args -N L5_BF -p 0 -l h_rt=$runtime_def,license=10"
         set job_desc3 "$args -N L1_BF -p 0 -l h_rt=$runtime_long,license=2"
      }
      "array" {
         set job_desc1 "$args -N L4_BF -p 100 -l h_rt=$runtime_def,license=8"
         set job_desc2 "$args -t 1-2 -N L5_BF -p 0 -l h_rt=$runtime_def,license=5"
         set job_desc3 "$args -N L1_BF -p 0 -l h_rt=$runtime_long,license=2"
      }
      "memory" {
         set job_desc1 "$args -N L4_BF -p 100 -l h_rt=$runtime_def,h_vmem=16G"
         set job_desc2 "$args -N L5_BF -p 0 -l h_rt=$runtime_def,h_vmem=20G" 
         set job_desc3 "$args -N L1_BF -p 0 -l h_rt=$runtime_long,h_vmem=4G"
      }
      "myslots" {
         set job_desc1 "$args -N L4_BF -p 100 -l h_rt=$runtime_def,myslots=8"
         set job_desc2 "$args -N L5_BF -p 0 -l h_rt=$runtime_def,myslots=10" 
         set job_desc3 "$args -N L1_BF -p 0 -l h_rt=$runtime_long,myslots=2"
      }
      "round_robin" {
         set job_desc1 "$args -N L4_BF -p 100 -l h_rt=$runtime_def -pe round_robin 8"
         set job_desc2 "$args -N L5_BF -p 0 -l h_rt=$runtime_def -pe round_robin 10" 
         set job_desc3 "$args -N L1_BF -p 0 -l h_rt=$runtime_long -pe round_robin 2"
      }
      "fill_up" {
         set job_desc1 "$args -N L4_BF -p 100 -l h_rt=$runtime_def -pe fill_up 8"
         set job_desc2 "$args -N L5_BF -p 0 -l h_rt=$runtime_def -pe fill_up 10" 
         set job_desc3 "$args -N L1_BF -p 0 -l h_rt=$runtime_long -pe fill_up 2"
      }
      "pe_slots" {
         set job_desc1 "$args -N L4_BF -p 100 -l h_rt=$runtime_def -pe pe_slots 8"
         set job_desc2 "$args -N L5_BF -p 0 -l h_rt=$runtime_def -pe pe_slots 10" 
         set job_desc3 "$args -N L1_BF -p 0 -l h_rt=$runtime_long -pe pe_slots 2"
      }
   }
   switch -exact $test1 {
      "jobs" {
         set job_desc1 "$args -N L4_BF -p 100 -l h_rt=$runtime_def,jobs=1"
         set job_desc2 "$args -N L5_BF -p 10 -l h_rt=$runtime_def,jobs=2"
         set job_desc3 "$args -N L1_BF -p 0 -l h_rt=$runtime_long,jobs=1"
      }
      "rr_jobs" {
         set job_desc1 "$args -N L4_BF -p 100 -l h_rt=$runtime_def,jobs=1 -pe round_robin 2"
         set job_desc2 "$args -N L5_BF -p 10 -l h_rt=$runtime_def,jobs=2 -pe round_robin 2"
         set job_desc3 "$args -N L1_BF -p 0 -l h_rt=$runtime_long,jobs=1 -pe round_robin 2"
      }
      "fu_jobs" {
         set job_desc1 "$args -N L4_BF -p 100 -l h_rt=$runtime_def,jobs=1 -pe fill_up 2"
         set job_desc2 "$args -N L5_BF -p 10 -l h_rt=$runtime_def,jobs=2 -pe fill_up 2"
         set job_desc3 "$args -N L1_BF -p 0 -l h_rt=$runtime_long,jobs=1 -pe fill_up 2"
      }
      "ps_jobs" {
         set job_desc1 "$args -N L4_BF -p 100 -l h_rt=$runtime_def,jobs=1 -pe pe_slots 2"
         set job_desc2 "$args -N L5_BF -p 10 -l h_rt=$runtime_def,jobs=2 -pe pe_slots 2"
         set job_desc3 "$args -N L1_BF -p 0 -l h_rt=$runtime_long,jobs=1 -pe pe_slots 2"
      }
   }

   set job_desc "$drmaa_mode $job_script \"$job_desc1\" \"$job_desc2\" \"$job_desc3\"" 
}

#****** resource_reservation/resource_reservation_drmaa_test() ******
#  NAME
#     resource_reservation_drmaa_test() -- generic drmaa test
#
#  SYNOPSIS
#     resource_reservation_drmaa_test { test_name host arguments }
#
#  FUNCTION
#     This procedure starts test_drmaa with the corresponding arguemnts.
#     Exit status of test_drmaa must always be 0 otherwise test has failed.
#
#  INPUTS
#     test_name                  - The name of a test. To get a complete list
#                                  of all test cases run 'test_drmaa' without args
#     arguments                  - Additional arguments needed for the test case.
#
#  EXAMPLE
#     resource_reservation_drmaa_test ST_SUBMIT_WAIT ori <source-path>/SOLARIS86/ $SGE_ROOT/examples/jobs/sleeper.sh
#*******************************
#
proc resource_reservation_drmaa_test { test_name arguments } {
   global CHECK_USER
   global rr_host

   set user $CHECK_USER

   set test_output [start_test_bin "test_drmaa" "$test_name $arguments" $rr_host $user prg_exit_state 300]

   ts_log_fine "exit status was $prg_exit_state"
   ts_log_fine "output was\n$test_output"

   if { $prg_exit_state != 0 } {
      ts_log_severe "test_drmaa $test_name $arguments failed at host $rr_host\n$test_output"
   }

   # @todo report an error if there are still jobs
   delete_all_jobs
   wait_for_end_of_all_jobs
}

proc resource_reservation_basic { } {
   global job_desc
   global rr_queue_name rr_host
   global CHECK_ACT_LEVEL

   set ar_id 0

   if {$CHECK_ACT_LEVEL == 5} {
      delete_all_ars

      set qname [get_queue_instance $rr_queue_name $rr_host]
      set ar_args "-q $qname -l myslots=1,license=1,license2=1,h_vmem=2G,jobs=2 -d 360000"

      set ar_id [submit_ar "$ar_args -pe round_robin 10"]
      if { $ar_id <= 0} {
         ts_log_severe "couldn't submit required advance reservation"
         return
      }
   }
   get_job_descriptions "license" "backfill" $ar_id
   resource_reservation_drmaa_test "" $job_desc 
   get_job_descriptions "memory" "backfill" $ar_id
   resource_reservation_drmaa_test "" $job_desc
   get_job_descriptions "myslots" "backfill" $ar_id
   resource_reservation_drmaa_test "" $job_desc 

   get_job_descriptions "jobs" "backfill" $ar_id
   resource_reservation_drmaa_test "" $job_desc

   get_job_descriptions "round_robin" "backfill" $ar_id
   resource_reservation_drmaa_test "" $job_desc 

   get_job_descriptions "rr_jobs" "backfill" $ar_id
   resource_reservation_drmaa_test "" $job_desc

   if {$CHECK_ACT_LEVEL == 5} {
      delete_ar $ar_id 1
      set ar_id [submit_ar "$ar_args -pe fill_up 10"]
      if { $ar_id <= 0} {
         ts_log_severe "couldn't submit required advance reservation"
         return
      }
   }
   get_job_descriptions "fill_up" "backfill" $ar_id
   resource_reservation_drmaa_test "" $job_desc

   get_job_descriptions "fu_jobs" "backfill" $ar_id
   resource_reservation_drmaa_test "" $job_desc

   if {$CHECK_ACT_LEVEL == 5} {
      delete_ar $ar_id 1
      set ar_id [submit_ar "$ar_args -pe pe_slots 10"]
      if { $ar_id <= 0} {
         ts_log_severe "couldn't submit required advance reservation"
         return
      }
   }

   get_job_descriptions "pe_slots" "backfill" $ar_id
   resource_reservation_drmaa_test "" $job_desc

   get_job_descriptions "ps_jobs" "backfill" $ar_id
   resource_reservation_drmaa_test "" $job_desc

   get_job_descriptions "array" "backfill" $ar_id
   resource_reservation_drmaa_test "" $job_desc 
  
   get_job_descriptions "license" "reservation" $ar_id
   resource_reservation_drmaa_test "" $job_desc 

   get_job_descriptions "memory" "reservation" $ar_id
   resource_reservation_drmaa_test "" $job_desc

   get_job_descriptions "myslots" "reservation" $ar_id
   resource_reservation_drmaa_test "" $job_desc

   get_job_descriptions "jobs" "reservation" $ar_id
   resource_reservation_drmaa_test "" $job_desc

   if {$CHECK_ACT_LEVEL == 5} {
      delete_ar $ar_id 1
      set ar_id [submit_ar "$ar_args -pe round_robin 10"]
      if { $ar_id <= 0} {
         ts_log_severe "couldn't submit required advance reservation"
         return
      }
   }
   get_job_descriptions "round_robin" "reservation" $ar_id
   resource_reservation_drmaa_test "" $job_desc

   get_job_descriptions "rr_jobs" "reservation" $ar_id
   resource_reservation_drmaa_test "" $job_desc

   if {$CHECK_ACT_LEVEL == 5} {
      delete_ar $ar_id 1
      set ar_id [submit_ar "$ar_args -pe fill_up 10"]
      if { $ar_id <= 0} {
         ts_log_severe "couldn't submit required advance reservation"
         return
      }
   }
   get_job_descriptions "fill_up" "reservation" $ar_id
   resource_reservation_drmaa_test "" $job_desc

   get_job_descriptions "fu_jobs" "reservation" $ar_id
   resource_reservation_drmaa_test "" $job_desc

   if {$CHECK_ACT_LEVEL == 5} {
      delete_ar $ar_id 1
      set ar_id [submit_ar "$ar_args -pe pe_slots 10"]
      if { $ar_id <= 0} {
         ts_log_severe "couldn't submit required advance reservation"
         return
      }
   }
   get_job_descriptions "pe_slots" "reservation" $ar_id
   resource_reservation_drmaa_test "" $job_desc

   get_job_descriptions "ps_jobs" "reservation" $ar_id
   resource_reservation_drmaa_test "" $job_desc

   get_job_descriptions "array" "reservation" $ar_id
   resource_reservation_drmaa_test "" $job_desc

   if {$CHECK_ACT_LEVEL == 5} {
      delete_ar $ar_id 1
   }
}
